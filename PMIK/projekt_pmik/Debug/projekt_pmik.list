
projekt_pmik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800bf60  0800bf60  0001bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c04c  0800c04c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c054  0800c054  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c054  0800c054  0001c054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000090  0800c0e8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  0800c0e8  000207d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032163  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005002  00000000  00000000  0005221f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f98  00000000  00000000  00057228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d78  00000000  00000000  000591c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003015d  00000000  00000000  0005af38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ee71  00000000  00000000  0008b095  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115c8d  00000000  00000000  000a9f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bfb93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bdc  00000000  00000000  001bfc10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf48 	.word	0x0800bf48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800bf48 	.word	0x0800bf48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <MX_BlueNRG_MS_Init+0x138>)
 8000f40:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000f42:	f000 f8a9 	bl	8001098 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f003 f8fa 	bl	8004140 <BSP_PB_GetState>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b48      	ldr	r3, [pc, #288]	; (8001074 <MX_BlueNRG_MS_Init+0x13c>)
 8000f52:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f54:	2100      	movs	r1, #0
 8000f56:	4848      	ldr	r0, [pc, #288]	; (8001078 <MX_BlueNRG_MS_Init+0x140>)
 8000f58:	f009 fd58 	bl	800aa0c <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f5c:	1dba      	adds	r2, r7, #6
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f009 fbc8 	bl	800a6fa <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000f6a:	f009 fc0a 	bl	800a782 <hci_reset>
  HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f003 fa38 	bl	80043e4 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f74:	7a3b      	ldrb	r3, [r7, #8]
 8000f76:	2b30      	cmp	r3, #48	; 0x30
 8000f78:	d902      	bls.n	8000f80 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000f7a:	4b40      	ldr	r3, [pc, #256]	; (800107c <MX_BlueNRG_MS_Init+0x144>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000f80:	f107 0209 	add.w	r2, r7, #9
 8000f84:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <MX_BlueNRG_MS_Init+0x148>)
 8000f86:	2106      	movs	r1, #6
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	f009 fb32 	bl	800a5f2 <aci_hal_read_config_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <MX_BlueNRG_MS_Init+0x148>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000f9a:	2bc0      	cmp	r3, #192	; 0xc0
 8000f9c:	d000      	beq.n	8000fa0 <MX_BlueNRG_MS_Init+0x68>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000f9e:	e7fe      	b.n	8000f9e <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000fa0:	f009 f8e6 	bl	800a170 <aci_gatt_init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000fa8:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_BlueNRG_MS_Init+0x144>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d110      	bne.n	8000fd2 <MX_BlueNRG_MS_Init+0x9a>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fb0:	f107 020e 	add.w	r2, r7, #14
 8000fb4:	f107 030a 	add.w	r3, r7, #10
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f008 fea0 	bl	8009d0c <aci_gap_init_IDB05A1>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	e00a      	b.n	8000fe8 <MX_BlueNRG_MS_Init+0xb0>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fd2:	f107 030a 	add.w	r3, r7, #10
 8000fd6:	f107 020c 	add.w	r2, r7, #12
 8000fda:	f107 010e 	add.w	r1, r7, #14
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f008 fee4 	bl	8009dac <aci_gap_init_IDB04A1>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000fe8:	89fc      	ldrh	r4, [r7, #14]
 8000fea:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff f8ef 	bl	80001d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4629      	mov	r1, r5
 8001000:	4620      	mov	r0, r4
 8001002:	f009 fa36 	bl	800a472 <aci_gatt_update_char_value>
 8001006:	4603      	mov	r3, r0
 8001008:	613b      	str	r3, [r7, #16]
  if (ret) {
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d000      	beq.n	8001012 <MX_BlueNRG_MS_Init+0xda>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8001010:	e7fe      	b.n	8001010 <MX_BlueNRG_MS_Init+0xd8>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001012:	2301      	movs	r3, #1
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2300      	movs	r3, #0
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	2310      	movs	r3, #16
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2307      	movs	r3, #7
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2001      	movs	r0, #1
 800102a:	f008 fff8 	bl	800a01e <aci_gap_set_auth_requirement>
 800102e:	4603      	mov	r3, r0
 8001030:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d000      	beq.n	800103a <MX_BlueNRG_MS_Init+0x102>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8001038:	e7fe      	b.n	8001038 <MX_BlueNRG_MS_Init+0x100>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 800103a:	f000 ff39 	bl	8001eb0 <Add_HWServW2ST_Service>
 800103e:	4603      	mov	r3, r0
 8001040:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d000      	beq.n	800104a <MX_BlueNRG_MS_Init+0x112>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8001048:	e7fe      	b.n	8001048 <MX_BlueNRG_MS_Init+0x110>
  }

  ret = Add_SWServW2ST_Service();
 800104a:	f001 f809 	bl	8002060 <Add_SWServW2ST_Service>
 800104e:	4603      	mov	r3, r0
 8001050:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d000      	beq.n	800105a <MX_BlueNRG_MS_Init+0x122>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8001058:	e7fe      	b.n	8001058 <MX_BlueNRG_MS_Init+0x120>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800105a:	2104      	movs	r1, #4
 800105c:	2001      	movs	r0, #1
 800105e:	f009 fb1b 	bl	800a698 <aci_hal_set_tx_power_level>
 8001062:	4603      	mov	r3, r0
 8001064:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	0800bf60 	.word	0x0800bf60
 8001074:	20000000 	.word	0x20000000
 8001078:	0800261d 	.word	0x0800261d
 800107c:	200000ac 	.word	0x200000ac
 8001080:	200004dc 	.word	0x200004dc
 8001084:	0001e240 	.word	0x0001e240

08001088 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 800108c:	f000 f812 	bl	80010b4 <User_Process>
  hci_user_evt_proc();
 8001090:	f009 fe36 	bl	800ad00 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f002 fffa 	bl	8004098 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f002 ffc7 	bl	8004038 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f003 f872 	bl	8004194 <BSP_COM_Init>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <User_Process+0xb8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 80010c4:	f001 fa36 	bl	8002534 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <User_Process+0xb8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f002 ffc4 	bl	800405c <BSP_LED_Toggle>

    if (connected)
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <User_Process+0xbc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d042      	beq.n	8001162 <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 80010dc:	f003 f976 	bl	80043cc <HAL_GetTick>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f009 ffca 	bl	800b07c <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 80010e8:	463a      	mov	r2, r7
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f84c 	bl	800118c <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001174 <User_Process+0xc0>
 80010fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001100:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001104:	edd7 7a01 	vldr	s15, [r7, #4]
 8001108:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001114:	ee17 3a90 	vmov	r3, s15
 8001118:	b21b      	sxth	r3, r3
 800111a:	4619      	mov	r1, r3
 800111c:	ee16 0a90 	vmov	r0, s13
 8001120:	f001 f9c2 	bl	80024a8 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <User_Process+0xc4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f8a9 	bl	8001280 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <User_Process+0xc8>)
 8001130:	4913      	ldr	r1, [pc, #76]	; (8001180 <User_Process+0xcc>)
 8001132:	4814      	ldr	r0, [pc, #80]	; (8001184 <User_Process+0xd0>)
 8001134:	f001 f828 	bl	8002188 <Acc_Update>
      Quat_Update(&q_axes);
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <User_Process+0xd4>)
 800113a:	f001 f8af 	bl	800229c <Quat_Update>

      counter ++;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <User_Process+0xc4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <User_Process+0xc4>)
 8001146:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <User_Process+0xc4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b28      	cmp	r3, #40	; 0x28
 800114e:	d104      	bne.n	800115a <User_Process+0xa6>
        counter = 0;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <User_Process+0xc4>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8001156:	f000 fdb1 	bl	8001cbc <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f003 f941 	bl	80043e4 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000001 	.word	0x20000001
 8001170:	200000b8 	.word	0x200000b8
 8001174:	42c80000 	.word	0x42c80000
 8001178:	200000b0 	.word	0x200000b0
 800117c:	200000d4 	.word	0x200000d4
 8001180:	200000c8 	.word	0x200000c8
 8001184:	200000bc 	.word	0x200000bc
 8001188:	200000e0 	.word	0x200000e0

0800118c <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8001196:	f009 ff95 	bl	800b0c4 <rand>
 800119a:	4603      	mov	r3, r0
 800119c:	461d      	mov	r5, r3
 800119e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80011a2:	4629      	mov	r1, r5
 80011a4:	4632      	mov	r2, r6
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	f04f 0400 	mov.w	r4, #0
 80011ae:	0094      	lsls	r4, r2, #2
 80011b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80011b4:	008b      	lsls	r3, r1, #2
 80011b6:	4619      	mov	r1, r3
 80011b8:	4622      	mov	r2, r4
 80011ba:	194b      	adds	r3, r1, r5
 80011bc:	eb42 0406 	adc.w	r4, r2, r6
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	f7ff fd34 	bl	8000c38 <__aeabi_uldivmod>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4618      	mov	r0, r3
 80011d6:	4621      	mov	r1, r4
 80011d8:	f7ff f9d8 	bl	800058c <__aeabi_ul2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <Set_Random_Environmental_Values+0xec>)
 80011e2:	f7ff f853 	bl	800028c <__adddf3>
 80011e6:	4603      	mov	r3, r0
 80011e8:	460c      	mov	r4, r1
 80011ea:	4618      	mov	r0, r3
 80011ec:	4621      	mov	r1, r4
 80011ee:	f7ff fcd3 	bl	8000b98 <__aeabi_d2f>
 80011f2:	4602      	mov	r2, r0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 80011f8:	f009 ff64 	bl	800b0c4 <rand>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461d      	mov	r5, r3
 8001200:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001204:	462b      	mov	r3, r5
 8001206:	4634      	mov	r4, r6
 8001208:	f04f 0100 	mov.w	r1, #0
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	00a2      	lsls	r2, r4, #2
 8001212:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001216:	0099      	lsls	r1, r3, #2
 8001218:	460b      	mov	r3, r1
 800121a:	4614      	mov	r4, r2
 800121c:	195b      	adds	r3, r3, r5
 800121e:	eb44 0406 	adc.w	r4, r4, r6
 8001222:	f04f 0100 	mov.w	r1, #0
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	0122      	lsls	r2, r4, #4
 800122c:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8001230:	0119      	lsls	r1, r3, #4
 8001232:	460b      	mov	r3, r1
 8001234:	4614      	mov	r4, r2
 8001236:	4618      	mov	r0, r3
 8001238:	4621      	mov	r1, r4
 800123a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	f7ff fcf9 	bl	8000c38 <__aeabi_uldivmod>
 8001246:	4603      	mov	r3, r0
 8001248:	460c      	mov	r4, r1
 800124a:	4618      	mov	r0, r3
 800124c:	4621      	mov	r1, r4
 800124e:	f7ff f99d 	bl	800058c <__aeabi_ul2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <Set_Random_Environmental_Values+0xf0>)
 8001258:	f7ff f818 	bl	800028c <__adddf3>
 800125c:	4603      	mov	r3, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4618      	mov	r0, r3
 8001262:	4621      	mov	r1, r4
 8001264:	f7ff fc98 	bl	8000b98 <__aeabi_d2f>
 8001268:	4602      	mov	r2, r0
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	601a      	str	r2, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001276:	bf00      	nop
 8001278:	403b0000 	.word	0x403b0000
 800127c:	408f4000 	.word	0x408f4000

08001280 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b13      	cmp	r3, #19
 800128c:	f200 827c 	bhi.w	8001788 <Set_Random_Motion_Values+0x508>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001290:	f009 ff18 	bl	800b0c4 <rand>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0400 	mov.w	r4, #0
 80012a2:	fb03 f502 	mul.w	r5, r3, r2
 80012a6:	fb01 f004 	mul.w	r0, r1, r4
 80012aa:	4428      	add	r0, r5
 80012ac:	fba1 3403 	umull	r3, r4, r1, r3
 80012b0:	1902      	adds	r2, r0, r4
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	4626      	mov	r6, r4
 80012b8:	1969      	adds	r1, r5, r5
 80012ba:	eb46 0206 	adc.w	r2, r6, r6
 80012be:	460d      	mov	r5, r1
 80012c0:	4616      	mov	r6, r2
 80012c2:	18e8      	adds	r0, r5, r3
 80012c4:	eb46 0104 	adc.w	r1, r6, r4
 80012c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	f7ff fcb2 	bl	8000c38 <__aeabi_uldivmod>
 80012d4:	4603      	mov	r3, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	4619      	mov	r1, r3
 80012da:	4622      	mov	r2, r4
 80012dc:	f111 030a 	adds.w	r3, r1, #10
 80012e0:	f142 0400 	adc.w	r4, r2, #0
 80012e4:	4ae0      	ldr	r2, [pc, #896]	; (8001668 <Set_Random_Motion_Values+0x3e8>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	461a      	mov	r2, r3
 80012ec:	4bde      	ldr	r3, [pc, #888]	; (8001668 <Set_Random_Motion_Values+0x3e8>)
 80012ee:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80012f0:	f009 fee8 	bl	800b0c4 <rand>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4619      	mov	r1, r3
 80012f8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f04f 0400 	mov.w	r4, #0
 8001302:	fb03 f502 	mul.w	r5, r3, r2
 8001306:	fb01 f004 	mul.w	r0, r1, r4
 800130a:	4428      	add	r0, r5
 800130c:	fba1 5603 	umull	r5, r6, r1, r3
 8001310:	1983      	adds	r3, r0, r6
 8001312:	461e      	mov	r6, r3
 8001314:	4629      	mov	r1, r5
 8001316:	4632      	mov	r2, r6
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f04f 0400 	mov.w	r4, #0
 8001320:	0094      	lsls	r4, r2, #2
 8001322:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001326:	008b      	lsls	r3, r1, #2
 8001328:	4619      	mov	r1, r3
 800132a:	4622      	mov	r2, r4
 800132c:	194b      	adds	r3, r1, r5
 800132e:	eb42 0406 	adc.w	r4, r2, r6
 8001332:	4618      	mov	r0, r3
 8001334:	4621      	mov	r1, r4
 8001336:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	f7ff fc7b 	bl	8000c38 <__aeabi_uldivmod>
 8001342:	4603      	mov	r3, r0
 8001344:	460c      	mov	r4, r1
 8001346:	4619      	mov	r1, r3
 8001348:	4622      	mov	r2, r4
 800134a:	f06f 0309 	mvn.w	r3, #9
 800134e:	f04f 34ff 	mov.w	r4, #4294967295
 8001352:	1a5b      	subs	r3, r3, r1
 8001354:	eb64 0402 	sbc.w	r4, r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	4626      	mov	r6, r4
 800135c:	4ac2      	ldr	r2, [pc, #776]	; (8001668 <Set_Random_Motion_Values+0x3e8>)
 800135e:	6852      	ldr	r2, [r2, #4]
 8001360:	462b      	mov	r3, r5
 8001362:	4413      	add	r3, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4bc0      	ldr	r3, [pc, #768]	; (8001668 <Set_Random_Motion_Values+0x3e8>)
 8001368:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800136a:	f009 feab 	bl	800b0c4 <rand>
 800136e:	4603      	mov	r3, r0
 8001370:	4619      	mov	r1, r3
 8001372:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f04f 0400 	mov.w	r4, #0
 800137c:	fb03 f502 	mul.w	r5, r3, r2
 8001380:	fb01 f004 	mul.w	r0, r1, r4
 8001384:	4428      	add	r0, r5
 8001386:	fba1 5603 	umull	r5, r6, r1, r3
 800138a:	1983      	adds	r3, r0, r6
 800138c:	461e      	mov	r6, r3
 800138e:	4629      	mov	r1, r5
 8001390:	4632      	mov	r2, r6
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f04f 0400 	mov.w	r4, #0
 800139a:	00d4      	lsls	r4, r2, #3
 800139c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80013a0:	00cb      	lsls	r3, r1, #3
 80013a2:	4619      	mov	r1, r3
 80013a4:	4622      	mov	r2, r4
 80013a6:	1b49      	subs	r1, r1, r5
 80013a8:	eb62 0206 	sbc.w	r2, r2, r6
 80013ac:	4608      	mov	r0, r1
 80013ae:	4611      	mov	r1, r2
 80013b0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	f7ff fc3e 	bl	8000c38 <__aeabi_uldivmod>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	4619      	mov	r1, r3
 80013c2:	4622      	mov	r2, r4
 80013c4:	f111 030a 	adds.w	r3, r1, #10
 80013c8:	f142 0400 	adc.w	r4, r2, #0
 80013cc:	4aa6      	ldr	r2, [pc, #664]	; (8001668 <Set_Random_Motion_Values+0x3e8>)
 80013ce:	6892      	ldr	r2, [r2, #8]
 80013d0:	4413      	add	r3, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	4ba4      	ldr	r3, [pc, #656]	; (8001668 <Set_Random_Motion_Values+0x3e8>)
 80013d6:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80013d8:	f009 fe74 	bl	800b0c4 <rand>
 80013dc:	4603      	mov	r3, r0
 80013de:	4619      	mov	r1, r3
 80013e0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0400 	mov.w	r4, #0
 80013ea:	fb03 f502 	mul.w	r5, r3, r2
 80013ee:	fb01 f004 	mul.w	r0, r1, r4
 80013f2:	4428      	add	r0, r5
 80013f4:	fba1 5603 	umull	r5, r6, r1, r3
 80013f8:	1982      	adds	r2, r0, r6
 80013fa:	4616      	mov	r6, r2
 80013fc:	196b      	adds	r3, r5, r5
 80013fe:	eb46 0406 	adc.w	r4, r6, r6
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	f7ff fc13 	bl	8000c38 <__aeabi_uldivmod>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	4619      	mov	r1, r3
 8001418:	4622      	mov	r2, r4
 800141a:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 800141e:	f142 0400 	adc.w	r4, r2, #0
 8001422:	4a92      	ldr	r2, [pc, #584]	; (800166c <Set_Random_Motion_Values+0x3ec>)
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	4413      	add	r3, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4b90      	ldr	r3, [pc, #576]	; (800166c <Set_Random_Motion_Values+0x3ec>)
 800142c:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800142e:	f009 fe49 	bl	800b0c4 <rand>
 8001432:	4603      	mov	r3, r0
 8001434:	4619      	mov	r1, r3
 8001436:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f04f 0400 	mov.w	r4, #0
 8001440:	fb03 f502 	mul.w	r5, r3, r2
 8001444:	fb01 f004 	mul.w	r0, r1, r4
 8001448:	4428      	add	r0, r5
 800144a:	fba1 3403 	umull	r3, r4, r1, r3
 800144e:	1902      	adds	r2, r0, r4
 8001450:	4614      	mov	r4, r2
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	00a1      	lsls	r1, r4, #2
 800145c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001460:	0098      	lsls	r0, r3, #2
 8001462:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	f7ff fbe5 	bl	8000c38 <__aeabi_uldivmod>
 800146e:	4603      	mov	r3, r0
 8001470:	460c      	mov	r4, r1
 8001472:	4619      	mov	r1, r3
 8001474:	4622      	mov	r2, r4
 8001476:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800147a:	f04f 34ff 	mov.w	r4, #4294967295
 800147e:	1a5b      	subs	r3, r3, r1
 8001480:	eb64 0402 	sbc.w	r4, r4, r2
 8001484:	461d      	mov	r5, r3
 8001486:	4626      	mov	r6, r4
 8001488:	4a78      	ldr	r2, [pc, #480]	; (800166c <Set_Random_Motion_Values+0x3ec>)
 800148a:	6852      	ldr	r2, [r2, #4]
 800148c:	462b      	mov	r3, r5
 800148e:	4413      	add	r3, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <Set_Random_Motion_Values+0x3ec>)
 8001494:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001496:	f009 fe15 	bl	800b0c4 <rand>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f04f 0400 	mov.w	r4, #0
 80014a8:	fb03 f502 	mul.w	r5, r3, r2
 80014ac:	fb01 f004 	mul.w	r0, r1, r4
 80014b0:	4428      	add	r0, r5
 80014b2:	fba1 1203 	umull	r1, r2, r1, r3
 80014b6:	1883      	adds	r3, r0, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	460d      	mov	r5, r1
 80014bc:	4616      	mov	r6, r2
 80014be:	196b      	adds	r3, r5, r5
 80014c0:	eb46 0406 	adc.w	r4, r6, r6
 80014c4:	461d      	mov	r5, r3
 80014c6:	4626      	mov	r6, r4
 80014c8:	186d      	adds	r5, r5, r1
 80014ca:	eb46 0602 	adc.w	r6, r6, r2
 80014ce:	196b      	adds	r3, r5, r5
 80014d0:	eb46 0406 	adc.w	r4, r6, r6
 80014d4:	461d      	mov	r5, r3
 80014d6:	4626      	mov	r6, r4
 80014d8:	4628      	mov	r0, r5
 80014da:	4631      	mov	r1, r6
 80014dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	f7ff fba8 	bl	8000c38 <__aeabi_uldivmod>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	4619      	mov	r1, r3
 80014ee:	4622      	mov	r2, r4
 80014f0:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80014f4:	f142 0400 	adc.w	r4, r2, #0
 80014f8:	4a5c      	ldr	r2, [pc, #368]	; (800166c <Set_Random_Motion_Values+0x3ec>)
 80014fa:	6892      	ldr	r2, [r2, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	4b5a      	ldr	r3, [pc, #360]	; (800166c <Set_Random_Motion_Values+0x3ec>)
 8001502:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001504:	f009 fdde 	bl	800b0c4 <rand>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f04f 0400 	mov.w	r4, #0
 8001516:	fb03 f502 	mul.w	r5, r3, r2
 800151a:	fb01 f004 	mul.w	r0, r1, r4
 800151e:	4428      	add	r0, r5
 8001520:	fba1 3403 	umull	r3, r4, r1, r3
 8001524:	1902      	adds	r2, r0, r4
 8001526:	4614      	mov	r4, r2
 8001528:	461d      	mov	r5, r3
 800152a:	4626      	mov	r6, r4
 800152c:	1969      	adds	r1, r5, r5
 800152e:	eb46 0206 	adc.w	r2, r6, r6
 8001532:	460d      	mov	r5, r1
 8001534:	4616      	mov	r6, r2
 8001536:	18e8      	adds	r0, r5, r3
 8001538:	eb46 0104 	adc.w	r1, r6, r4
 800153c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f7ff fb78 	bl	8000c38 <__aeabi_uldivmod>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	4619      	mov	r1, r3
 800154e:	4622      	mov	r2, r4
 8001550:	1ccb      	adds	r3, r1, #3
 8001552:	f142 0400 	adc.w	r4, r2, #0
 8001556:	4a46      	ldr	r2, [pc, #280]	; (8001670 <Set_Random_Motion_Values+0x3f0>)
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	4413      	add	r3, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4b44      	ldr	r3, [pc, #272]	; (8001670 <Set_Random_Motion_Values+0x3f0>)
 8001560:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001562:	f009 fdaf 	bl	800b0c4 <rand>
 8001566:	4603      	mov	r3, r0
 8001568:	4619      	mov	r1, r3
 800156a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f04f 0400 	mov.w	r4, #0
 8001574:	fb03 f502 	mul.w	r5, r3, r2
 8001578:	fb01 f004 	mul.w	r0, r1, r4
 800157c:	4428      	add	r0, r5
 800157e:	fba1 3403 	umull	r3, r4, r1, r3
 8001582:	1902      	adds	r2, r0, r4
 8001584:	4614      	mov	r4, r2
 8001586:	f04f 0000 	mov.w	r0, #0
 800158a:	f04f 0100 	mov.w	r1, #0
 800158e:	00a1      	lsls	r1, r4, #2
 8001590:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001594:	0098      	lsls	r0, r3, #2
 8001596:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	f7ff fb4b 	bl	8000c38 <__aeabi_uldivmod>
 80015a2:	4603      	mov	r3, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	4619      	mov	r1, r3
 80015a8:	4622      	mov	r2, r4
 80015aa:	f06f 0302 	mvn.w	r3, #2
 80015ae:	f04f 34ff 	mov.w	r4, #4294967295
 80015b2:	1a5b      	subs	r3, r3, r1
 80015b4:	eb64 0402 	sbc.w	r4, r4, r2
 80015b8:	461d      	mov	r5, r3
 80015ba:	4626      	mov	r6, r4
 80015bc:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <Set_Random_Motion_Values+0x3f0>)
 80015be:	6852      	ldr	r2, [r2, #4]
 80015c0:	462b      	mov	r3, r5
 80015c2:	4413      	add	r3, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <Set_Random_Motion_Values+0x3f0>)
 80015c8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80015ca:	f009 fd7b 	bl	800b0c4 <rand>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	fb03 f502 	mul.w	r5, r3, r2
 80015e0:	fb01 f004 	mul.w	r0, r1, r4
 80015e4:	4428      	add	r0, r5
 80015e6:	fba1 5603 	umull	r5, r6, r1, r3
 80015ea:	1983      	adds	r3, r0, r6
 80015ec:	461e      	mov	r6, r3
 80015ee:	4629      	mov	r1, r5
 80015f0:	4632      	mov	r2, r6
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	f04f 0400 	mov.w	r4, #0
 80015fa:	0094      	lsls	r4, r2, #2
 80015fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001600:	008b      	lsls	r3, r1, #2
 8001602:	4619      	mov	r1, r3
 8001604:	4622      	mov	r2, r4
 8001606:	194b      	adds	r3, r1, r5
 8001608:	eb42 0406 	adc.w	r4, r2, r6
 800160c:	4618      	mov	r0, r3
 800160e:	4621      	mov	r1, r4
 8001610:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f7ff fb0e 	bl	8000c38 <__aeabi_uldivmod>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	4619      	mov	r1, r3
 8001622:	4622      	mov	r2, r4
 8001624:	1ccb      	adds	r3, r1, #3
 8001626:	f142 0400 	adc.w	r4, r2, #0
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <Set_Random_Motion_Values+0x3f0>)
 800162c:	6892      	ldr	r2, [r2, #8]
 800162e:	4413      	add	r3, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <Set_Random_Motion_Values+0x3f0>)
 8001634:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001636:	f009 fd45 	bl	800b0c4 <rand>
 800163a:	4603      	mov	r3, r0
 800163c:	4619      	mov	r1, r3
 800163e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	fb03 f502 	mul.w	r5, r3, r2
 800164c:	fb01 f004 	mul.w	r0, r1, r4
 8001650:	4428      	add	r0, r5
 8001652:	fba1 3403 	umull	r3, r4, r1, r3
 8001656:	1902      	adds	r2, r0, r4
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	4626      	mov	r6, r4
 800165e:	1969      	adds	r1, r5, r5
 8001660:	eb46 0206 	adc.w	r2, r6, r6
 8001664:	e006      	b.n	8001674 <Set_Random_Motion_Values+0x3f4>
 8001666:	bf00      	nop
 8001668:	200000bc 	.word	0x200000bc
 800166c:	200000c8 	.word	0x200000c8
 8001670:	200000d4 	.word	0x200000d4
 8001674:	460d      	mov	r5, r1
 8001676:	4616      	mov	r6, r2
 8001678:	18e8      	adds	r0, r5, r3
 800167a:	eb46 0104 	adc.w	r1, r6, r4
 800167e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f7ff fad7 	bl	8000c38 <__aeabi_uldivmod>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	4619      	mov	r1, r3
 8001690:	4622      	mov	r2, r4
 8001692:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8001696:	f142 0400 	adc.w	r4, r2, #0
 800169a:	4a3a      	ldr	r2, [pc, #232]	; (8001784 <Set_Random_Motion_Values+0x504>)
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <Set_Random_Motion_Values+0x504>)
 80016a4:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80016a6:	f009 fd0d 	bl	800b0c4 <rand>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4619      	mov	r1, r3
 80016ae:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f04f 0400 	mov.w	r4, #0
 80016b8:	fb03 f502 	mul.w	r5, r3, r2
 80016bc:	fb01 f004 	mul.w	r0, r1, r4
 80016c0:	4428      	add	r0, r5
 80016c2:	fba1 5603 	umull	r5, r6, r1, r3
 80016c6:	1983      	adds	r3, r0, r6
 80016c8:	461e      	mov	r6, r3
 80016ca:	4629      	mov	r1, r5
 80016cc:	4632      	mov	r2, r6
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	f04f 0400 	mov.w	r4, #0
 80016d6:	0094      	lsls	r4, r2, #2
 80016d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80016dc:	008b      	lsls	r3, r1, #2
 80016de:	4619      	mov	r1, r3
 80016e0:	4622      	mov	r2, r4
 80016e2:	194b      	adds	r3, r1, r5
 80016e4:	eb42 0406 	adc.w	r4, r2, r6
 80016e8:	4618      	mov	r0, r3
 80016ea:	4621      	mov	r1, r4
 80016ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	f7ff faa0 	bl	8000c38 <__aeabi_uldivmod>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	4619      	mov	r1, r3
 80016fe:	4622      	mov	r2, r4
 8001700:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8001704:	f142 0400 	adc.w	r4, r2, #0
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <Set_Random_Motion_Values+0x504>)
 800170a:	6852      	ldr	r2, [r2, #4]
 800170c:	4413      	add	r3, r2
 800170e:	461a      	mov	r2, r3
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <Set_Random_Motion_Values+0x504>)
 8001712:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001714:	f009 fcd6 	bl	800b0c4 <rand>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f04f 0400 	mov.w	r4, #0
 8001726:	fb03 f502 	mul.w	r5, r3, r2
 800172a:	fb01 f004 	mul.w	r0, r1, r4
 800172e:	4428      	add	r0, r5
 8001730:	fba1 5603 	umull	r5, r6, r1, r3
 8001734:	1983      	adds	r3, r0, r6
 8001736:	461e      	mov	r6, r3
 8001738:	4629      	mov	r1, r5
 800173a:	4632      	mov	r2, r6
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	00d4      	lsls	r4, r2, #3
 8001746:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800174a:	00cb      	lsls	r3, r1, #3
 800174c:	4619      	mov	r1, r3
 800174e:	4622      	mov	r2, r4
 8001750:	1b49      	subs	r1, r1, r5
 8001752:	eb62 0206 	sbc.w	r2, r2, r6
 8001756:	4608      	mov	r0, r1
 8001758:	4611      	mov	r1, r2
 800175a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	f7ff fa69 	bl	8000c38 <__aeabi_uldivmod>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	4619      	mov	r1, r3
 800176c:	4622      	mov	r2, r4
 800176e:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8001772:	f142 0400 	adc.w	r4, r2, #0
 8001776:	4a03      	ldr	r2, [pc, #12]	; (8001784 <Set_Random_Motion_Values+0x504>)
 8001778:	6892      	ldr	r2, [r2, #8]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	461a      	mov	r2, r3
 800177e:	4b01      	ldr	r3, [pc, #4]	; (8001784 <Set_Random_Motion_Values+0x504>)
 8001780:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 8001782:	e295      	b.n	8001cb0 <Set_Random_Motion_Values+0xa30>
 8001784:	200000e0 	.word	0x200000e0
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001788:	f009 fc9c 	bl	800b0c4 <rand>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f04f 0400 	mov.w	r4, #0
 800179a:	fb03 f502 	mul.w	r5, r3, r2
 800179e:	fb01 f004 	mul.w	r0, r1, r4
 80017a2:	4428      	add	r0, r5
 80017a4:	fba1 3403 	umull	r3, r4, r1, r3
 80017a8:	1902      	adds	r2, r0, r4
 80017aa:	4614      	mov	r4, r2
 80017ac:	461d      	mov	r5, r3
 80017ae:	4626      	mov	r6, r4
 80017b0:	1969      	adds	r1, r5, r5
 80017b2:	eb46 0206 	adc.w	r2, r6, r6
 80017b6:	460d      	mov	r5, r1
 80017b8:	4616      	mov	r6, r2
 80017ba:	18e8      	adds	r0, r5, r3
 80017bc:	eb46 0104 	adc.w	r1, r6, r4
 80017c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	f7ff fa36 	bl	8000c38 <__aeabi_uldivmod>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4619      	mov	r1, r3
 80017d2:	4622      	mov	r2, r4
 80017d4:	f06f 0309 	mvn.w	r3, #9
 80017d8:	f04f 34ff 	mov.w	r4, #4294967295
 80017dc:	1a5b      	subs	r3, r3, r1
 80017de:	eb64 0402 	sbc.w	r4, r4, r2
 80017e2:	461d      	mov	r5, r3
 80017e4:	4626      	mov	r6, r4
 80017e6:	4ae0      	ldr	r2, [pc, #896]	; (8001b68 <Set_Random_Motion_Values+0x8e8>)
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	462b      	mov	r3, r5
 80017ec:	4413      	add	r3, r2
 80017ee:	461a      	mov	r2, r3
 80017f0:	4bdd      	ldr	r3, [pc, #884]	; (8001b68 <Set_Random_Motion_Values+0x8e8>)
 80017f2:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80017f4:	f009 fc66 	bl	800b0c4 <rand>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4619      	mov	r1, r3
 80017fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f04f 0400 	mov.w	r4, #0
 8001806:	fb03 f502 	mul.w	r5, r3, r2
 800180a:	fb01 f004 	mul.w	r0, r1, r4
 800180e:	4428      	add	r0, r5
 8001810:	fba1 5603 	umull	r5, r6, r1, r3
 8001814:	1983      	adds	r3, r0, r6
 8001816:	461e      	mov	r6, r3
 8001818:	4629      	mov	r1, r5
 800181a:	4632      	mov	r2, r6
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	0094      	lsls	r4, r2, #2
 8001826:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800182a:	008b      	lsls	r3, r1, #2
 800182c:	4619      	mov	r1, r3
 800182e:	4622      	mov	r2, r4
 8001830:	194b      	adds	r3, r1, r5
 8001832:	eb42 0406 	adc.w	r4, r2, r6
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	f7ff f9f9 	bl	8000c38 <__aeabi_uldivmod>
 8001846:	4603      	mov	r3, r0
 8001848:	460c      	mov	r4, r1
 800184a:	4619      	mov	r1, r3
 800184c:	4622      	mov	r2, r4
 800184e:	f111 030a 	adds.w	r3, r1, #10
 8001852:	f142 0400 	adc.w	r4, r2, #0
 8001856:	4ac4      	ldr	r2, [pc, #784]	; (8001b68 <Set_Random_Motion_Values+0x8e8>)
 8001858:	6852      	ldr	r2, [r2, #4]
 800185a:	4413      	add	r3, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4bc2      	ldr	r3, [pc, #776]	; (8001b68 <Set_Random_Motion_Values+0x8e8>)
 8001860:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001862:	f009 fc2f 	bl	800b0c4 <rand>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	fb03 f502 	mul.w	r5, r3, r2
 8001878:	fb01 f004 	mul.w	r0, r1, r4
 800187c:	4428      	add	r0, r5
 800187e:	fba1 5603 	umull	r5, r6, r1, r3
 8001882:	1983      	adds	r3, r0, r6
 8001884:	461e      	mov	r6, r3
 8001886:	4629      	mov	r1, r5
 8001888:	4632      	mov	r2, r6
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f04f 0400 	mov.w	r4, #0
 8001892:	00d4      	lsls	r4, r2, #3
 8001894:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001898:	00cb      	lsls	r3, r1, #3
 800189a:	4619      	mov	r1, r3
 800189c:	4622      	mov	r2, r4
 800189e:	1b49      	subs	r1, r1, r5
 80018a0:	eb62 0206 	sbc.w	r2, r2, r6
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f7ff f9c2 	bl	8000c38 <__aeabi_uldivmod>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	4619      	mov	r1, r3
 80018ba:	4622      	mov	r2, r4
 80018bc:	f06f 0309 	mvn.w	r3, #9
 80018c0:	f04f 34ff 	mov.w	r4, #4294967295
 80018c4:	1a5b      	subs	r3, r3, r1
 80018c6:	eb64 0402 	sbc.w	r4, r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	4626      	mov	r6, r4
 80018ce:	4aa6      	ldr	r2, [pc, #664]	; (8001b68 <Set_Random_Motion_Values+0x8e8>)
 80018d0:	6892      	ldr	r2, [r2, #8]
 80018d2:	462b      	mov	r3, r5
 80018d4:	4413      	add	r3, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	4ba3      	ldr	r3, [pc, #652]	; (8001b68 <Set_Random_Motion_Values+0x8e8>)
 80018da:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80018dc:	f009 fbf2 	bl	800b0c4 <rand>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4619      	mov	r1, r3
 80018e4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f04f 0400 	mov.w	r4, #0
 80018ee:	fb03 f502 	mul.w	r5, r3, r2
 80018f2:	fb01 f004 	mul.w	r0, r1, r4
 80018f6:	4428      	add	r0, r5
 80018f8:	fba1 5603 	umull	r5, r6, r1, r3
 80018fc:	1982      	adds	r2, r0, r6
 80018fe:	4616      	mov	r6, r2
 8001900:	196b      	adds	r3, r5, r5
 8001902:	eb46 0406 	adc.w	r4, r6, r6
 8001906:	4618      	mov	r0, r3
 8001908:	4621      	mov	r1, r4
 800190a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f7ff f991 	bl	8000c38 <__aeabi_uldivmod>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4619      	mov	r1, r3
 800191c:	4622      	mov	r2, r4
 800191e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001922:	f04f 34ff 	mov.w	r4, #4294967295
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	eb64 0402 	sbc.w	r4, r4, r2
 800192c:	461d      	mov	r5, r3
 800192e:	4626      	mov	r6, r4
 8001930:	4a8e      	ldr	r2, [pc, #568]	; (8001b6c <Set_Random_Motion_Values+0x8ec>)
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	462b      	mov	r3, r5
 8001936:	4413      	add	r3, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <Set_Random_Motion_Values+0x8ec>)
 800193c:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800193e:	f009 fbc1 	bl	800b0c4 <rand>
 8001942:	4603      	mov	r3, r0
 8001944:	4619      	mov	r1, r3
 8001946:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f04f 0400 	mov.w	r4, #0
 8001950:	fb03 f502 	mul.w	r5, r3, r2
 8001954:	fb01 f004 	mul.w	r0, r1, r4
 8001958:	4428      	add	r0, r5
 800195a:	fba1 3403 	umull	r3, r4, r1, r3
 800195e:	1902      	adds	r2, r0, r4
 8001960:	4614      	mov	r4, r2
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	00a1      	lsls	r1, r4, #2
 800196c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001970:	0098      	lsls	r0, r3, #2
 8001972:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	f7ff f95d 	bl	8000c38 <__aeabi_uldivmod>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	4619      	mov	r1, r3
 8001984:	4622      	mov	r2, r4
 8001986:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 800198a:	f142 0400 	adc.w	r4, r2, #0
 800198e:	4a77      	ldr	r2, [pc, #476]	; (8001b6c <Set_Random_Motion_Values+0x8ec>)
 8001990:	6852      	ldr	r2, [r2, #4]
 8001992:	4413      	add	r3, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4b75      	ldr	r3, [pc, #468]	; (8001b6c <Set_Random_Motion_Values+0x8ec>)
 8001998:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 800199a:	f009 fb93 	bl	800b0c4 <rand>
 800199e:	4603      	mov	r3, r0
 80019a0:	4619      	mov	r1, r3
 80019a2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	fb03 f502 	mul.w	r5, r3, r2
 80019b0:	fb01 f004 	mul.w	r0, r1, r4
 80019b4:	4428      	add	r0, r5
 80019b6:	fba1 1203 	umull	r1, r2, r1, r3
 80019ba:	1883      	adds	r3, r0, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	460d      	mov	r5, r1
 80019c0:	4616      	mov	r6, r2
 80019c2:	196b      	adds	r3, r5, r5
 80019c4:	eb46 0406 	adc.w	r4, r6, r6
 80019c8:	461d      	mov	r5, r3
 80019ca:	4626      	mov	r6, r4
 80019cc:	186d      	adds	r5, r5, r1
 80019ce:	eb46 0602 	adc.w	r6, r6, r2
 80019d2:	196b      	adds	r3, r5, r5
 80019d4:	eb46 0406 	adc.w	r4, r6, r6
 80019d8:	461d      	mov	r5, r3
 80019da:	4626      	mov	r6, r4
 80019dc:	4628      	mov	r0, r5
 80019de:	4631      	mov	r1, r6
 80019e0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f7ff f926 	bl	8000c38 <__aeabi_uldivmod>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4619      	mov	r1, r3
 80019f2:	4622      	mov	r2, r4
 80019f4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80019f8:	f04f 34ff 	mov.w	r4, #4294967295
 80019fc:	1a5b      	subs	r3, r3, r1
 80019fe:	eb64 0402 	sbc.w	r4, r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	4626      	mov	r6, r4
 8001a06:	4a59      	ldr	r2, [pc, #356]	; (8001b6c <Set_Random_Motion_Values+0x8ec>)
 8001a08:	6892      	ldr	r2, [r2, #8]
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	4413      	add	r3, r2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <Set_Random_Motion_Values+0x8ec>)
 8001a12:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001a14:	f009 fb56 	bl	800b0c4 <rand>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f04f 0400 	mov.w	r4, #0
 8001a26:	fb03 f502 	mul.w	r5, r3, r2
 8001a2a:	fb01 f004 	mul.w	r0, r1, r4
 8001a2e:	4428      	add	r0, r5
 8001a30:	fba1 5603 	umull	r5, r6, r1, r3
 8001a34:	1983      	adds	r3, r0, r6
 8001a36:	461e      	mov	r6, r3
 8001a38:	4629      	mov	r1, r5
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	00d4      	lsls	r4, r2, #3
 8001a46:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a4a:	00cb      	lsls	r3, r1, #3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4622      	mov	r2, r4
 8001a50:	1b49      	subs	r1, r1, r5
 8001a52:	eb62 0206 	sbc.w	r2, r2, r6
 8001a56:	4608      	mov	r0, r1
 8001a58:	4611      	mov	r1, r2
 8001a5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	f7ff f8e9 	bl	8000c38 <__aeabi_uldivmod>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	f06f 0302 	mvn.w	r3, #2
 8001a72:	f04f 34ff 	mov.w	r4, #4294967295
 8001a76:	1a5b      	subs	r3, r3, r1
 8001a78:	eb64 0402 	sbc.w	r4, r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4626      	mov	r6, r4
 8001a80:	4a3b      	ldr	r2, [pc, #236]	; (8001b70 <Set_Random_Motion_Values+0x8f0>)
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	462b      	mov	r3, r5
 8001a86:	4413      	add	r3, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <Set_Random_Motion_Values+0x8f0>)
 8001a8c:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001a8e:	f009 fb19 	bl	800b0c4 <rand>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4619      	mov	r1, r3
 8001a96:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f04f 0400 	mov.w	r4, #0
 8001aa0:	fb03 f502 	mul.w	r5, r3, r2
 8001aa4:	fb01 f004 	mul.w	r0, r1, r4
 8001aa8:	4428      	add	r0, r5
 8001aaa:	fba1 5603 	umull	r5, r6, r1, r3
 8001aae:	1983      	adds	r3, r0, r6
 8001ab0:	461e      	mov	r6, r3
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	4632      	mov	r2, r6
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	f04f 0400 	mov.w	r4, #0
 8001abe:	00d4      	lsls	r4, r2, #3
 8001ac0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ac4:	00cb      	lsls	r3, r1, #3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	194b      	adds	r3, r1, r5
 8001acc:	eb42 0406 	adc.w	r4, r2, r6
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	f7ff f8ac 	bl	8000c38 <__aeabi_uldivmod>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	1ccb      	adds	r3, r1, #3
 8001aea:	f142 0400 	adc.w	r4, r2, #0
 8001aee:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <Set_Random_Motion_Values+0x8f0>)
 8001af0:	6852      	ldr	r2, [r2, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <Set_Random_Motion_Values+0x8f0>)
 8001af8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001afa:	f009 fae3 	bl	800b0c4 <rand>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4619      	mov	r1, r3
 8001b02:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f04f 0400 	mov.w	r4, #0
 8001b0c:	fb03 f502 	mul.w	r5, r3, r2
 8001b10:	fb01 f004 	mul.w	r0, r1, r4
 8001b14:	4428      	add	r0, r5
 8001b16:	fba1 3403 	umull	r3, r4, r1, r3
 8001b1a:	1902      	adds	r2, r0, r4
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	461d      	mov	r5, r3
 8001b20:	4626      	mov	r6, r4
 8001b22:	1969      	adds	r1, r5, r5
 8001b24:	eb46 0206 	adc.w	r2, r6, r6
 8001b28:	460d      	mov	r5, r1
 8001b2a:	4616      	mov	r6, r2
 8001b2c:	18e8      	adds	r0, r5, r3
 8001b2e:	eb46 0104 	adc.w	r1, r6, r4
 8001b32:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f7ff f87d 	bl	8000c38 <__aeabi_uldivmod>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	4619      	mov	r1, r3
 8001b44:	4622      	mov	r2, r4
 8001b46:	f06f 0302 	mvn.w	r3, #2
 8001b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8001b4e:	1a5b      	subs	r3, r3, r1
 8001b50:	eb64 0402 	sbc.w	r4, r4, r2
 8001b54:	461d      	mov	r5, r3
 8001b56:	4626      	mov	r6, r4
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <Set_Random_Motion_Values+0x8f0>)
 8001b5a:	6892      	ldr	r2, [r2, #8]
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	4413      	add	r3, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <Set_Random_Motion_Values+0x8f0>)
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	e005      	b.n	8001b74 <Set_Random_Motion_Values+0x8f4>
 8001b68:	200000bc 	.word	0x200000bc
 8001b6c:	200000c8 	.word	0x200000c8
 8001b70:	200000d4 	.word	0x200000d4
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001b74:	f009 faa6 	bl	800b0c4 <rand>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	fb03 f502 	mul.w	r5, r3, r2
 8001b8a:	fb01 f004 	mul.w	r0, r1, r4
 8001b8e:	4428      	add	r0, r5
 8001b90:	fba1 5603 	umull	r5, r6, r1, r3
 8001b94:	1983      	adds	r3, r0, r6
 8001b96:	461e      	mov	r6, r3
 8001b98:	4629      	mov	r1, r5
 8001b9a:	4632      	mov	r2, r6
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f04f 0400 	mov.w	r4, #0
 8001ba4:	00d4      	lsls	r4, r2, #3
 8001ba6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001baa:	00cb      	lsls	r3, r1, #3
 8001bac:	4619      	mov	r1, r3
 8001bae:	4622      	mov	r2, r4
 8001bb0:	1b49      	subs	r1, r1, r5
 8001bb2:	eb62 0206 	sbc.w	r2, r2, r6
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	4611      	mov	r1, r2
 8001bba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f7ff f839 	bl	8000c38 <__aeabi_uldivmod>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4622      	mov	r2, r4
 8001bce:	f111 03c8 	adds.w	r3, r1, #200	; 0xc8
 8001bd2:	f142 0400 	adc.w	r4, r2, #0
 8001bd6:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <Set_Random_Motion_Values+0xa38>)
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <Set_Random_Motion_Values+0xa38>)
 8001be0:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001be2:	f009 fa6f 	bl	800b0c4 <rand>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4619      	mov	r1, r3
 8001bea:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f04f 0400 	mov.w	r4, #0
 8001bf4:	fb03 f502 	mul.w	r5, r3, r2
 8001bf8:	fb01 f004 	mul.w	r0, r1, r4
 8001bfc:	4428      	add	r0, r5
 8001bfe:	fba1 3403 	umull	r3, r4, r1, r3
 8001c02:	1902      	adds	r2, r0, r4
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	4626      	mov	r6, r4
 8001c0a:	1969      	adds	r1, r5, r5
 8001c0c:	eb46 0206 	adc.w	r2, r6, r6
 8001c10:	460d      	mov	r5, r1
 8001c12:	4616      	mov	r6, r2
 8001c14:	18e8      	adds	r0, r5, r3
 8001c16:	eb46 0104 	adc.w	r1, r6, r4
 8001c1a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f7ff f809 	bl	8000c38 <__aeabi_uldivmod>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	f111 0396 	adds.w	r3, r1, #150	; 0x96
 8001c32:	f142 0400 	adc.w	r4, r2, #0
 8001c36:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <Set_Random_Motion_Values+0xa38>)
 8001c38:	6852      	ldr	r2, [r2, #4]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <Set_Random_Motion_Values+0xa38>)
 8001c40:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001c42:	f009 fa3f 	bl	800b0c4 <rand>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f04f 0400 	mov.w	r4, #0
 8001c54:	fb03 f502 	mul.w	r5, r3, r2
 8001c58:	fb01 f004 	mul.w	r0, r1, r4
 8001c5c:	4428      	add	r0, r5
 8001c5e:	fba1 5603 	umull	r5, r6, r1, r3
 8001c62:	1983      	adds	r3, r0, r6
 8001c64:	461e      	mov	r6, r3
 8001c66:	4629      	mov	r1, r5
 8001c68:	4632      	mov	r2, r6
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	f04f 0400 	mov.w	r4, #0
 8001c72:	0094      	lsls	r4, r2, #2
 8001c74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001c78:	008b      	lsls	r3, r1, #2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	194b      	adds	r3, r1, r5
 8001c80:	eb42 0406 	adc.w	r4, r2, r6
 8001c84:	4618      	mov	r0, r3
 8001c86:	4621      	mov	r1, r4
 8001c88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	f7fe ffd2 	bl	8000c38 <__aeabi_uldivmod>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	f111 030a 	adds.w	r3, r1, #10
 8001ca0:	f142 0400 	adc.w	r4, r2, #0
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <Set_Random_Motion_Values+0xa38>)
 8001ca6:	6892      	ldr	r2, [r2, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <Set_Random_Motion_Values+0xa38>)
 8001cae:	609a      	str	r2, [r3, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb8:	200000e0 	.word	0x200000e0

08001cbc <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001cc0:	4b6e      	ldr	r3, [pc, #440]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001cc6:	fb83 1302 	smull	r1, r3, r3, r2
 8001cca:	11d9      	asrs	r1, r3, #7
 8001ccc:	17d3      	asrs	r3, r2, #31
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <Reset_Motion_Values+0x2a>
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	e000      	b.n	8001ce8 <Reset_Motion_Values+0x2c>
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	4a64      	ldr	r2, [pc, #400]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001cea:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001cec:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001cf2:	fb83 1302 	smull	r1, r3, r3, r2
 8001cf6:	11d9      	asrs	r1, r3, #7
 8001cf8:	17d3      	asrs	r3, r2, #31
 8001cfa:	1acb      	subs	r3, r1, r3
 8001cfc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d103      	bne.n	8001d12 <Reset_Motion_Values+0x56>
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	425b      	negs	r3, r3
 8001d10:	e001      	b.n	8001d16 <Reset_Motion_Values+0x5a>
 8001d12:	f06f 0309 	mvn.w	r3, #9
 8001d16:	4a59      	ldr	r2, [pc, #356]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001d18:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001d1a:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001d20:	fb83 1302 	smull	r1, r3, r3, r2
 8001d24:	11d9      	asrs	r1, r3, #7
 8001d26:	17d3      	asrs	r3, r2, #31
 8001d28:	1acb      	subs	r3, r1, r3
 8001d2a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <Reset_Motion_Values+0x84>
 8001d38:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	e000      	b.n	8001d42 <Reset_Motion_Values+0x86>
 8001d40:	230a      	movs	r3, #10
 8001d42:	4a4e      	ldr	r2, [pc, #312]	; (8001e7c <Reset_Motion_Values+0x1c0>)
 8001d44:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001d46:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001d4c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d50:	11d9      	asrs	r1, r3, #7
 8001d52:	17d3      	asrs	r3, r2, #31
 8001d54:	1acb      	subs	r3, r1, r3
 8001d56:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d103      	bne.n	8001d6c <Reset_Motion_Values+0xb0>
 8001d64:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	425b      	negs	r3, r3
 8001d6a:	e000      	b.n	8001d6e <Reset_Motion_Values+0xb2>
 8001d6c:	2364      	movs	r3, #100	; 0x64
 8001d6e:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001d70:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001d72:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001d78:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7c:	11d9      	asrs	r1, r3, #7
 8001d7e:	17d3      	asrs	r3, r2, #31
 8001d80:	1acb      	subs	r3, r1, r3
 8001d82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d103      	bne.n	8001d98 <Reset_Motion_Values+0xdc>
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	425b      	negs	r3, r3
 8001d96:	e001      	b.n	8001d9c <Reset_Motion_Values+0xe0>
 8001d98:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001d9c:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001d9e:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001da0:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001da6:	fb83 1302 	smull	r1, r3, r3, r2
 8001daa:	11d9      	asrs	r1, r3, #7
 8001dac:	17d3      	asrs	r3, r2, #31
 8001dae:	1acb      	subs	r3, r1, r3
 8001db0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <Reset_Motion_Values+0x10a>
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	e000      	b.n	8001dc8 <Reset_Motion_Values+0x10c>
 8001dc6:	2364      	movs	r3, #100	; 0x64
 8001dc8:	4a2e      	ldr	r2, [pc, #184]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001dca:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001dd2:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd6:	11d9      	asrs	r1, r3, #7
 8001dd8:	17d3      	asrs	r3, r2, #31
 8001dda:	1acb      	subs	r3, r1, r3
 8001ddc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <Reset_Motion_Values+0x136>
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <Reset_Motion_Values+0x1cc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	425b      	negs	r3, r3
 8001df0:	e000      	b.n	8001df4 <Reset_Motion_Values+0x138>
 8001df2:	2303      	movs	r3, #3
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <Reset_Motion_Values+0x1cc>)
 8001df6:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001e02:	11d9      	asrs	r1, r3, #7
 8001e04:	17d3      	asrs	r3, r2, #31
 8001e06:	1acb      	subs	r3, r1, r3
 8001e08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <Reset_Motion_Values+0x162>
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <Reset_Motion_Values+0x1cc>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	e001      	b.n	8001e22 <Reset_Motion_Values+0x166>
 8001e1e:	f06f 0302 	mvn.w	r3, #2
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <Reset_Motion_Values+0x1cc>)
 8001e24:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <Reset_Motion_Values+0x1c8>)
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <Reset_Motion_Values+0x1c4>)
 8001e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e30:	11d9      	asrs	r1, r3, #7
 8001e32:	17d3      	asrs	r3, r2, #31
 8001e34:	1acb      	subs	r3, r1, r3
 8001e36:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <Reset_Motion_Values+0x190>
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <Reset_Motion_Values+0x1cc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	425b      	negs	r3, r3
 8001e4a:	e000      	b.n	8001e4e <Reset_Motion_Values+0x192>
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <Reset_Motion_Values+0x1cc>)
 8001e50:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <Reset_Motion_Values+0x1d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	425b      	negs	r3, r3
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <Reset_Motion_Values+0x1d0>)
 8001e5a:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <Reset_Motion_Values+0x1d0>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	425b      	negs	r3, r3
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <Reset_Motion_Values+0x1d0>)
 8001e64:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <Reset_Motion_Values+0x1d0>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <Reset_Motion_Values+0x1d0>)
 8001e6e:	6093      	str	r3, [r2, #8]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200000bc 	.word	0x200000bc
 8001e80:	10624dd3 	.word	0x10624dd3
 8001e84:	200000c8 	.word	0x200000c8
 8001e88:	200000d4 	.word	0x200000d4
 8001e8c:	200000e0 	.word	0x200000e0

08001e90 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <BSP_PB_Callback+0x1c>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200000ad 	.word	0x200000ad

08001eb0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001eb6:	231b      	movs	r3, #27
 8001eb8:	713b      	strb	r3, [r7, #4]
 8001eba:	23c5      	movs	r3, #197	; 0xc5
 8001ebc:	717b      	strb	r3, [r7, #5]
 8001ebe:	23d5      	movs	r3, #213	; 0xd5
 8001ec0:	71bb      	strb	r3, [r7, #6]
 8001ec2:	23a5      	movs	r3, #165	; 0xa5
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	723b      	strb	r3, [r7, #8]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	727b      	strb	r3, [r7, #9]
 8001ece:	23b4      	movs	r3, #180	; 0xb4
 8001ed0:	72bb      	strb	r3, [r7, #10]
 8001ed2:	239a      	movs	r3, #154	; 0x9a
 8001ed4:	72fb      	strb	r3, [r7, #11]
 8001ed6:	23e1      	movs	r3, #225	; 0xe1
 8001ed8:	733b      	strb	r3, [r7, #12]
 8001eda:	2311      	movs	r3, #17
 8001edc:	737b      	strb	r3, [r7, #13]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73bb      	strb	r3, [r7, #14]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	743b      	strb	r3, [r7, #16]
 8001eea:	2300      	movs	r3, #0
 8001eec:	747b      	strb	r3, [r7, #17]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	74bb      	strb	r3, [r7, #18]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001ef6:	4b55      	ldr	r3, [pc, #340]	; (800204c <Add_HWServW2ST_Service+0x19c>)
 8001ef8:	461d      	mov	r5, r3
 8001efa:	1d3c      	adds	r4, r7, #4
 8001efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efe:	6028      	str	r0, [r5, #0]
 8001f00:	6069      	str	r1, [r5, #4]
 8001f02:	60aa      	str	r2, [r5, #8]
 8001f04:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001f06:	4b52      	ldr	r3, [pc, #328]	; (8002050 <Add_HWServW2ST_Service+0x1a0>)
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2310      	movs	r3, #16
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	494f      	ldr	r1, [pc, #316]	; (800204c <Add_HWServW2ST_Service+0x19c>)
 8001f10:	2002      	movs	r0, #2
 8001f12:	f008 f950 	bl	800a1b6 <aci_gatt_add_serv>
 8001f16:	4603      	mov	r3, r0
 8001f18:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;
 8001f20:	2347      	movs	r3, #71	; 0x47
 8001f22:	e08e      	b.n	8002042 <Add_HWServW2ST_Service+0x192>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001f24:	231b      	movs	r3, #27
 8001f26:	713b      	strb	r3, [r7, #4]
 8001f28:	23c5      	movs	r3, #197	; 0xc5
 8001f2a:	717b      	strb	r3, [r7, #5]
 8001f2c:	23d5      	movs	r3, #213	; 0xd5
 8001f2e:	71bb      	strb	r3, [r7, #6]
 8001f30:	23a5      	movs	r3, #165	; 0xa5
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	2302      	movs	r3, #2
 8001f36:	723b      	strb	r3, [r7, #8]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	727b      	strb	r3, [r7, #9]
 8001f3c:	2336      	movs	r3, #54	; 0x36
 8001f3e:	72bb      	strb	r3, [r7, #10]
 8001f40:	23ac      	movs	r3, #172	; 0xac
 8001f42:	72fb      	strb	r3, [r7, #11]
 8001f44:	23e1      	movs	r3, #225	; 0xe1
 8001f46:	733b      	strb	r3, [r7, #12]
 8001f48:	2311      	movs	r3, #17
 8001f4a:	737b      	strb	r3, [r7, #13]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73bb      	strb	r3, [r7, #14]
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	2300      	movs	r3, #0
 8001f56:	743b      	strb	r3, [r7, #16]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	747b      	strb	r3, [r7, #17]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	74bb      	strb	r3, [r7, #18]
 8001f60:	2300      	movs	r3, #0
 8001f62:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8001f64:	7cbb      	ldrb	r3, [r7, #18]
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8001f6e:	7cbb      	ldrb	r3, [r7, #18]
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001f78:	4b36      	ldr	r3, [pc, #216]	; (8002054 <Add_HWServW2ST_Service+0x1a4>)
 8001f7a:	461d      	mov	r5, r3
 8001f7c:	1d3c      	adds	r4, r7, #4
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	6028      	str	r0, [r5, #0]
 8001f82:	6069      	str	r1, [r5, #4]
 8001f84:	60aa      	str	r2, [r5, #8]
 8001f86:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <Add_HWServW2ST_Service+0x1a0>)
 8001f8a:	8818      	ldrh	r0, [r3, #0]
 8001f8c:	4b32      	ldr	r3, [pc, #200]	; (8002058 <Add_HWServW2ST_Service+0x1a8>)
 8001f8e:	9305      	str	r3, [sp, #20]
 8001f90:	2300      	movs	r3, #0
 8001f92:	9304      	str	r3, [sp, #16]
 8001f94:	2310      	movs	r3, #16
 8001f96:	9303      	str	r3, [sp, #12]
 8001f98:	2304      	movs	r3, #4
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <Add_HWServW2ST_Service+0x1a4>)
 8001fa8:	2102      	movs	r1, #2
 8001faa:	f008 f990 	bl	800a2ce <aci_gatt_add_char>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 8001fb8:	2347      	movs	r3, #71	; 0x47
 8001fba:	e042      	b.n	8002042 <Add_HWServW2ST_Service+0x192>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001fbc:	231b      	movs	r3, #27
 8001fbe:	713b      	strb	r3, [r7, #4]
 8001fc0:	23c5      	movs	r3, #197	; 0xc5
 8001fc2:	717b      	strb	r3, [r7, #5]
 8001fc4:	23d5      	movs	r3, #213	; 0xd5
 8001fc6:	71bb      	strb	r3, [r7, #6]
 8001fc8:	23a5      	movs	r3, #165	; 0xa5
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	2302      	movs	r3, #2
 8001fce:	723b      	strb	r3, [r7, #8]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	727b      	strb	r3, [r7, #9]
 8001fd4:	2336      	movs	r3, #54	; 0x36
 8001fd6:	72bb      	strb	r3, [r7, #10]
 8001fd8:	23ac      	movs	r3, #172	; 0xac
 8001fda:	72fb      	strb	r3, [r7, #11]
 8001fdc:	23e1      	movs	r3, #225	; 0xe1
 8001fde:	733b      	strb	r3, [r7, #12]
 8001fe0:	2311      	movs	r3, #17
 8001fe2:	737b      	strb	r3, [r7, #13]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73bb      	strb	r3, [r7, #14]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	2300      	movs	r3, #0
 8001fee:	743b      	strb	r3, [r7, #16]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	747b      	strb	r3, [r7, #17]
 8001ff4:	23e0      	movs	r3, #224	; 0xe0
 8001ff6:	74bb      	strb	r3, [r7, #18]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <Add_HWServW2ST_Service+0x1a4>)
 8001ffe:	461d      	mov	r5, r3
 8002000:	1d3c      	adds	r4, r7, #4
 8002002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002004:	6028      	str	r0, [r5, #0]
 8002006:	6069      	str	r1, [r5, #4]
 8002008:	60aa      	str	r2, [r5, #8]
 800200a:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <Add_HWServW2ST_Service+0x1a0>)
 800200e:	8818      	ldrh	r0, [r3, #0]
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <Add_HWServW2ST_Service+0x1ac>)
 8002012:	9305      	str	r3, [sp, #20]
 8002014:	2300      	movs	r3, #0
 8002016:	9304      	str	r3, [sp, #16]
 8002018:	2310      	movs	r3, #16
 800201a:	9303      	str	r3, [sp, #12]
 800201c:	2304      	movs	r3, #4
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2310      	movs	r3, #16
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2314      	movs	r3, #20
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <Add_HWServW2ST_Service+0x1a4>)
 800202c:	2102      	movs	r1, #2
 800202e:	f008 f94e 	bl	800a2ce <aci_gatt_add_char>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <Add_HWServW2ST_Service+0x190>
    return BLE_STATUS_ERROR;
 800203c:	2347      	movs	r3, #71	; 0x47
 800203e:	e000      	b.n	8002042 <Add_HWServW2ST_Service+0x192>

  return BLE_STATUS_SUCCESS;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	bf00      	nop
 800204c:	20000500 	.word	0x20000500
 8002050:	200004fa 	.word	0x200004fa
 8002054:	200004e8 	.word	0x200004e8
 8002058:	200004e4 	.word	0x200004e4
 800205c:	200004fc 	.word	0x200004fc

08002060 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 8002066:	2301      	movs	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800206a:	231b      	movs	r3, #27
 800206c:	703b      	strb	r3, [r7, #0]
 800206e:	23c5      	movs	r3, #197	; 0xc5
 8002070:	707b      	strb	r3, [r7, #1]
 8002072:	23d5      	movs	r3, #213	; 0xd5
 8002074:	70bb      	strb	r3, [r7, #2]
 8002076:	23a5      	movs	r3, #165	; 0xa5
 8002078:	70fb      	strb	r3, [r7, #3]
 800207a:	2302      	movs	r3, #2
 800207c:	713b      	strb	r3, [r7, #4]
 800207e:	2300      	movs	r3, #0
 8002080:	717b      	strb	r3, [r7, #5]
 8002082:	23b4      	movs	r3, #180	; 0xb4
 8002084:	71bb      	strb	r3, [r7, #6]
 8002086:	239a      	movs	r3, #154	; 0x9a
 8002088:	71fb      	strb	r3, [r7, #7]
 800208a:	23e1      	movs	r3, #225	; 0xe1
 800208c:	723b      	strb	r3, [r7, #8]
 800208e:	2311      	movs	r3, #17
 8002090:	727b      	strb	r3, [r7, #9]
 8002092:	2302      	movs	r3, #2
 8002094:	72bb      	strb	r3, [r7, #10]
 8002096:	2300      	movs	r3, #0
 8002098:	72fb      	strb	r3, [r7, #11]
 800209a:	2300      	movs	r3, #0
 800209c:	733b      	strb	r3, [r7, #12]
 800209e:	2300      	movs	r3, #0
 80020a0:	737b      	strb	r3, [r7, #13]
 80020a2:	2300      	movs	r3, #0
 80020a4:	73bb      	strb	r3, [r7, #14]
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <Add_SWServW2ST_Service+0x118>)
 80020ac:	461d      	mov	r5, r3
 80020ae:	463c      	mov	r4, r7
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	6028      	str	r0, [r5, #0]
 80020b4:	6069      	str	r1, [r5, #4]
 80020b6:	60aa      	str	r2, [r5, #8]
 80020b8:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <Add_SWServW2ST_Service+0x11c>)
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	4613      	mov	r3, r2
 80020d0:	2201      	movs	r2, #1
 80020d2:	4929      	ldr	r1, [pc, #164]	; (8002178 <Add_SWServW2ST_Service+0x118>)
 80020d4:	2002      	movs	r0, #2
 80020d6:	f008 f86e 	bl	800a1b6 <aci_gatt_add_serv>
 80020da:	4603      	mov	r3, r0
 80020dc:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d141      	bne.n	8002168 <Add_SWServW2ST_Service+0x108>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 80020e4:	231b      	movs	r3, #27
 80020e6:	703b      	strb	r3, [r7, #0]
 80020e8:	23c5      	movs	r3, #197	; 0xc5
 80020ea:	707b      	strb	r3, [r7, #1]
 80020ec:	23d5      	movs	r3, #213	; 0xd5
 80020ee:	70bb      	strb	r3, [r7, #2]
 80020f0:	23a5      	movs	r3, #165	; 0xa5
 80020f2:	70fb      	strb	r3, [r7, #3]
 80020f4:	2302      	movs	r3, #2
 80020f6:	713b      	strb	r3, [r7, #4]
 80020f8:	2300      	movs	r3, #0
 80020fa:	717b      	strb	r3, [r7, #5]
 80020fc:	2336      	movs	r3, #54	; 0x36
 80020fe:	71bb      	strb	r3, [r7, #6]
 8002100:	23ac      	movs	r3, #172	; 0xac
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	23e1      	movs	r3, #225	; 0xe1
 8002106:	723b      	strb	r3, [r7, #8]
 8002108:	2311      	movs	r3, #17
 800210a:	727b      	strb	r3, [r7, #9]
 800210c:	2301      	movs	r3, #1
 800210e:	72bb      	strb	r3, [r7, #10]
 8002110:	2300      	movs	r3, #0
 8002112:	72fb      	strb	r3, [r7, #11]
 8002114:	2300      	movs	r3, #0
 8002116:	733b      	strb	r3, [r7, #12]
 8002118:	2301      	movs	r3, #1
 800211a:	737b      	strb	r3, [r7, #13]
 800211c:	2300      	movs	r3, #0
 800211e:	73bb      	strb	r3, [r7, #14]
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <Add_SWServW2ST_Service+0x120>)
 8002126:	461d      	mov	r5, r3
 8002128:	463c      	mov	r4, r7
 800212a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212c:	6028      	str	r0, [r5, #0]
 800212e:	6069      	str	r1, [r5, #4]
 8002130:	60aa      	str	r2, [r5, #8]
 8002132:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <Add_SWServW2ST_Service+0x11c>)
 8002136:	8818      	ldrh	r0, [r3, #0]
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <Add_SWServW2ST_Service+0x124>)
 800213a:	9305      	str	r3, [sp, #20]
 800213c:	2300      	movs	r3, #0
 800213e:	9304      	str	r3, [sp, #16]
 8002140:	2310      	movs	r3, #16
 8002142:	9303      	str	r3, [sp, #12]
 8002144:	2304      	movs	r3, #4
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	2300      	movs	r3, #0
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	2310      	movs	r3, #16
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2308      	movs	r3, #8
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <Add_SWServW2ST_Service+0x120>)
 8002154:	2102      	movs	r1, #2
 8002156:	f008 f8ba 	bl	800a2ce <aci_gatt_add_char>
 800215a:	4603      	mov	r3, r0
 800215c:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <Add_SWServW2ST_Service+0x10c>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002164:	2300      	movs	r3, #0
 8002166:	e003      	b.n	8002170 <Add_SWServW2ST_Service+0x110>
    goto fail;
 8002168:	bf00      	nop
 800216a:	e000      	b.n	800216e <Add_SWServW2ST_Service+0x10e>
    goto fail;
 800216c:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 800216e:	2347      	movs	r3, #71	; 0x47
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bdb0      	pop	{r4, r5, r7, pc}
 8002178:	20000500 	.word	0x20000500
 800217c:	200004f8 	.word	0x200004f8
 8002180:	200004e8 	.word	0x200004e8
 8002184:	200004e6 	.word	0x200004e6

08002188 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002194:	f002 f91a 	bl	80043cc <HAL_GetTick>
 8002198:	4603      	mov	r3, r0
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	743b      	strb	r3, [r7, #16]
 80021a0:	f002 f914 	bl	80043cc <HAL_GetTick>
 80021a4:	4603      	mov	r3, r0
 80021a6:	0adb      	lsrs	r3, r3, #11
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	425b      	negs	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	74bb      	strb	r3, [r7, #18]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	425b      	negs	r3, r3
 80021be:	121b      	asrs	r3, r3, #8
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	753b      	strb	r3, [r7, #20]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	121b      	asrs	r3, r3, #8
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	425b      	negs	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	75bb      	strb	r3, [r7, #22]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	425b      	negs	r3, r3
 80021e8:	121b      	asrs	r3, r3, #8
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	763b      	strb	r3, [r7, #24]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	121b      	asrs	r3, r3, #8
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	76bb      	strb	r3, [r7, #26]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	121b      	asrs	r3, r3, #8
 800220e:	b2db      	uxtb	r3, r3
 8002210:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	773b      	strb	r3, [r7, #28]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	121b      	asrs	r3, r3, #8
 8002220:	b2db      	uxtb	r3, r3
 8002222:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	77bb      	strb	r3, [r7, #30]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	121b      	asrs	r3, r3, #8
 8002232:	b2db      	uxtb	r3, r3
 8002234:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f887 3020 	strb.w	r3, [r7, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	121b      	asrs	r3, r3, #8
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	121b      	asrs	r3, r3, #8
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <Acc_Update+0x10c>)
 8002264:	8818      	ldrh	r0, [r3, #0]
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <Acc_Update+0x110>)
 8002268:	8819      	ldrh	r1, [r3, #0]
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2314      	movs	r3, #20
 8002272:	2200      	movs	r2, #0
 8002274:	f008 f8fd 	bl	800a472 <aci_gatt_update_char_value>
 8002278:	4603      	mov	r3, r0
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800227e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002286:	2347      	movs	r3, #71	; 0x47
 8002288:	e000      	b.n	800228c <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200004fa 	.word	0x200004fa
 8002298:	200004fc 	.word	0x200004fc

0800229c <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80022a4:	f002 f892 	bl	80043cc <HAL_GetTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	08db      	lsrs	r3, r3, #3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	733b      	strb	r3, [r7, #12]
 80022b0:	f002 f88c 	bl	80043cc <HAL_GetTick>
 80022b4:	4603      	mov	r3, r0
 80022b6:	0adb      	lsrs	r3, r3, #11
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	73bb      	strb	r3, [r7, #14]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	121b      	asrs	r3, r3, #8
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	743b      	strb	r3, [r7, #16]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	121b      	asrs	r3, r3, #8
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	74bb      	strb	r3, [r7, #18]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	121b      	asrs	r3, r3, #8
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <Quat_Update+0x84>)
 80022f4:	8818      	ldrh	r0, [r3, #0]
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <Quat_Update+0x88>)
 80022f8:	8819      	ldrh	r1, [r3, #0]
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2308      	movs	r3, #8
 8002302:	2200      	movs	r2, #0
 8002304:	f008 f8b5 	bl	800a472 <aci_gatt_update_char_value>
 8002308:	4603      	mov	r3, r0
 800230a:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002312:	2347      	movs	r3, #71	; 0x47
 8002314:	e000      	b.n	8002318 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200004f8 	.word	0x200004f8
 8002324:	200004e6 	.word	0x200004e6

08002328 <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002328:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <Read_Request_CB+0x15c>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	429a      	cmp	r2, r3
 800233e:	d105      	bne.n	800234c <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <Read_Request_CB+0x160>)
 8002342:	4952      	ldr	r1, [pc, #328]	; (800248c <Read_Request_CB+0x164>)
 8002344:	4852      	ldr	r0, [pc, #328]	; (8002490 <Read_Request_CB+0x168>)
 8002346:	f7ff ff1f 	bl	8002188 <Acc_Update>
 800234a:	e08b      	b.n	8002464 <Read_Request_CB+0x13c>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <Read_Request_CB+0x16c>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	429a      	cmp	r2, r3
 8002356:	f040 8085 	bne.w	8002464 <Read_Request_CB+0x13c>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 800235a:	f008 feb3 	bl	800b0c4 <rand>
 800235e:	4603      	mov	r3, r0
 8002360:	461d      	mov	r5, r3
 8002362:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002366:	4629      	mov	r1, r5
 8002368:	4632      	mov	r2, r6
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	0094      	lsls	r4, r2, #2
 8002374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002378:	008b      	lsls	r3, r1, #2
 800237a:	4619      	mov	r1, r3
 800237c:	4622      	mov	r2, r4
 800237e:	194b      	adds	r3, r1, r5
 8002380:	eb42 0406 	adc.w	r4, r2, r6
 8002384:	4618      	mov	r0, r3
 8002386:	4621      	mov	r1, r4
 8002388:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	f7fe fc52 	bl	8000c38 <__aeabi_uldivmod>
 8002394:	4603      	mov	r3, r0
 8002396:	460c      	mov	r4, r1
 8002398:	4618      	mov	r0, r3
 800239a:	4621      	mov	r1, r4
 800239c:	f7fe f8f6 	bl	800058c <__aeabi_ul2d>
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <Read_Request_CB+0x170>)
 80023a6:	f7fd ff71 	bl	800028c <__adddf3>
 80023aa:	4603      	mov	r3, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	4618      	mov	r0, r3
 80023b0:	4621      	mov	r1, r4
 80023b2:	f7fe fbf1 	bl	8000b98 <__aeabi_d2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	617b      	str	r3, [r7, #20]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80023ba:	f008 fe83 	bl	800b0c4 <rand>
 80023be:	4603      	mov	r3, r0
 80023c0:	461d      	mov	r5, r3
 80023c2:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80023c6:	46ab      	mov	fp, r5
 80023c8:	46b4      	mov	ip, r6
 80023ca:	eb1b 030b 	adds.w	r3, fp, fp
 80023ce:	eb4c 040c 	adc.w	r4, ip, ip
 80023d2:	469b      	mov	fp, r3
 80023d4:	46a4      	mov	ip, r4
 80023d6:	eb1b 0b05 	adds.w	fp, fp, r5
 80023da:	eb4c 0c06 	adc.w	ip, ip, r6
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80023ea:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80023ee:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80023f2:	eb1b 0b01 	adds.w	fp, fp, r1
 80023f6:	eb4c 0c02 	adc.w	ip, ip, r2
 80023fa:	eb1b 0005 	adds.w	r0, fp, r5
 80023fe:	eb4c 0106 	adc.w	r1, ip, r6
 8002402:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	f7fe fc15 	bl	8000c38 <__aeabi_uldivmod>
 800240e:	4603      	mov	r3, r0
 8002410:	460c      	mov	r4, r1
 8002412:	4618      	mov	r0, r3
 8002414:	4621      	mov	r1, r4
 8002416:	f7fe f8b9 	bl	800058c <__aeabi_ul2d>
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <Read_Request_CB+0x174>)
 8002420:	f7fd ff34 	bl	800028c <__adddf3>
 8002424:	4603      	mov	r3, r0
 8002426:	460c      	mov	r4, r1
 8002428:	4618      	mov	r0, r3
 800242a:	4621      	mov	r1, r4
 800242c:	f7fe fbb4 	bl	8000b98 <__aeabi_d2f>
 8002430:	4603      	mov	r3, r0
 8002432:	613b      	str	r3, [r7, #16]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002434:	edd7 7a04 	vldr	s15, [r7, #16]
 8002438:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80024a0 <Read_Request_CB+0x178>
 800243c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002440:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002444:	edd7 7a05 	vldr	s15, [r7, #20]
 8002448:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800244c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002454:	ee17 3a90 	vmov	r3, s15
 8002458:	b21b      	sxth	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	ee16 0a90 	vmov	r0, s13
 8002460:	f000 f822 	bl	80024a8 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <Read_Request_CB+0x17c>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <Read_Request_CB+0x152>
  {
    ret = aci_gatt_allow_read(connection_handle);
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <Read_Request_CB+0x17c>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f008 f891 	bl	800a598 <aci_gatt_allow_read>
 8002476:	4603      	mov	r3, r0
 8002478:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002484:	200004fc 	.word	0x200004fc
 8002488:	200000d4 	.word	0x200000d4
 800248c:	200000c8 	.word	0x200000c8
 8002490:	200000bc 	.word	0x200000bc
 8002494:	200004e4 	.word	0x200004e4
 8002498:	403b0000 	.word	0x403b0000
 800249c:	408f4000 	.word	0x408f4000
 80024a0:	42c80000 	.word	0x42c80000
 80024a4:	200000b4 	.word	0x200000b4

080024a8 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80024b4:	f001 ff8a 	bl	80043cc <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	733b      	strb	r3, [r7, #12]
 80024c0:	f001 ff84 	bl	80043cc <HAL_GetTick>
 80024c4:	4603      	mov	r3, r0
 80024c6:	0adb      	lsrs	r3, r3, #11
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	73bb      	strb	r3, [r7, #14]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	121b      	asrs	r3, r3, #8
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	141b      	asrs	r3, r3, #16
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	743b      	strb	r3, [r7, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	161b      	asrs	r3, r3, #24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	74bb      	strb	r3, [r7, #18]
 80024f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024f4:	121b      	asrs	r3, r3, #8
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <BlueMS_Environmental_Update+0x84>)
 80024fe:	8818      	ldrh	r0, [r3, #0]
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <BlueMS_Environmental_Update+0x88>)
 8002502:	8819      	ldrh	r1, [r3, #0]
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2308      	movs	r3, #8
 800250c:	2200      	movs	r2, #0
 800250e:	f007 ffb0 	bl	800a472 <aci_gatt_update_char_value>
 8002512:	4603      	mov	r3, r0
 8002514:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800251c:	2347      	movs	r3, #71	; 0x47
 800251e:	e000      	b.n	8002522 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200004fa 	.word	0x200004fa
 8002530:	200004e4 	.word	0x200004e4

08002534 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b092      	sub	sp, #72	; 0x48
 8002538:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800253a:	4a36      	ldr	r2, [pc, #216]	; (8002614 <Set_DeviceConnectable+0xe0>)
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002544:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002548:	2302      	movs	r3, #2
 800254a:	703b      	strb	r3, [r7, #0]
 800254c:	230a      	movs	r3, #10
 800254e:	707b      	strb	r3, [r7, #1]
 8002550:	2300      	movs	r3, #0
 8002552:	70bb      	strb	r3, [r7, #2]
 8002554:	2308      	movs	r3, #8
 8002556:	70fb      	strb	r3, [r7, #3]
 8002558:	2309      	movs	r3, #9
 800255a:	713b      	strb	r3, [r7, #4]
 800255c:	2342      	movs	r3, #66	; 0x42
 800255e:	717b      	strb	r3, [r7, #5]
 8002560:	236c      	movs	r3, #108	; 0x6c
 8002562:	71bb      	strb	r3, [r7, #6]
 8002564:	2375      	movs	r3, #117	; 0x75
 8002566:	71fb      	strb	r3, [r7, #7]
 8002568:	2365      	movs	r3, #101	; 0x65
 800256a:	723b      	strb	r3, [r7, #8]
 800256c:	234e      	movs	r3, #78	; 0x4e
 800256e:	727b      	strb	r3, [r7, #9]
 8002570:	2352      	movs	r3, #82	; 0x52
 8002572:	72bb      	strb	r3, [r7, #10]
 8002574:	2347      	movs	r3, #71	; 0x47
 8002576:	72fb      	strb	r3, [r7, #11]
 8002578:	230d      	movs	r3, #13
 800257a:	733b      	strb	r3, [r7, #12]
 800257c:	23ff      	movs	r3, #255	; 0xff
 800257e:	737b      	strb	r3, [r7, #13]
 8002580:	2301      	movs	r3, #1
 8002582:	73bb      	strb	r3, [r7, #14]
 8002584:	2302      	movs	r3, #2
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	2300      	movs	r3, #0
 800258a:	743b      	strb	r3, [r7, #16]
 800258c:	23f4      	movs	r3, #244	; 0xf4
 800258e:	747b      	strb	r3, [r7, #17]
 8002590:	2300      	movs	r3, #0
 8002592:	74bb      	strb	r3, [r7, #18]
 8002594:	2300      	movs	r3, #0
 8002596:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <Set_DeviceConnectable+0xe4>)
 800259a:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 800259c:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <Set_DeviceConnectable+0xe4>)
 80025a0:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80025a2:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <Set_DeviceConnectable+0xe4>)
 80025a6:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80025a8:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <Set_DeviceConnectable+0xe4>)
 80025ac:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80025ae:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <Set_DeviceConnectable+0xe4>)
 80025b2:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80025b4:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <Set_DeviceConnectable+0xe4>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80025ba:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80025bc:	7cbb      	ldrb	r3, [r7, #18]
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80025c6:	2100      	movs	r1, #0
 80025c8:	2000      	movs	r0, #0
 80025ca:	f008 f946 	bl	800a85a <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80025ce:	2300      	movs	r3, #0
 80025d0:	9306      	str	r3, [sp, #24]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9305      	str	r3, [sp, #20]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9304      	str	r3, [sp, #16]
 80025da:	2300      	movs	r3, #0
 80025dc:	9303      	str	r3, [sp, #12]
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	2308      	movs	r3, #8
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 80025f2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80025f6:	2000      	movs	r0, #0
 80025f8:	f007 fc22 	bl	8009e40 <aci_gap_set_discoverable>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002602:	463b      	mov	r3, r7
 8002604:	4619      	mov	r1, r3
 8002606:	201a      	movs	r0, #26
 8002608:	f007 fd60 	bl	800a0cc <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	0800bf68 	.word	0x0800bf68
 8002618:	200004dc 	.word	0x200004dc

0800261c <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	3301      	adds	r3, #1
 800262c:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d139      	bne.n	80026aa <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b3e      	cmp	r3, #62	; 0x3e
 800263c:	d006      	beq.n	800264c <user_notify+0x30>
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d01b      	beq.n	800267a <user_notify+0x5e>
 8002642:	2b05      	cmp	r3, #5
 8002644:	d132      	bne.n	80026ac <user_notify+0x90>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002646:	f000 f835 	bl	80026b4 <GAP_DisconnectionComplete_CB>
    }
    break;
 800264a:	e02f      	b.n	80026ac <user_notify+0x90>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	3302      	adds	r3, #2
 8002650:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d000      	beq.n	800265c <user_notify+0x40>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 800265a:	e027      	b.n	80026ac <user_notify+0x90>
          evt_le_connection_complete *cc = (void *)evt->data;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1d5a      	adds	r2, r3, #5
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800266c:	b29b      	uxth	r3, r3
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f000 f835 	bl	80026e0 <GAP_ConnectionComplete_CB>
        break;
 8002676:	bf00      	nop
    break;
 8002678:	e018      	b.n	80026ac <user_notify+0x90>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	3302      	adds	r3, #2
 800267e:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	f640 4314 	movw	r3, #3092	; 0xc14
 800268c:	429a      	cmp	r2, r3
 800268e:	d000      	beq.n	8002692 <user_notify+0x76>
        }
        break;
      }

    }
    break;
 8002690:	e00c      	b.n	80026ac <user_notify+0x90>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3302      	adds	r3, #2
 8002696:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	885b      	ldrh	r3, [r3, #2]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fe42 	bl	8002328 <Read_Request_CB>
        break;
 80026a4:	bf00      	nop
    break;
 80026a6:	bf00      	nop
 80026a8:	e000      	b.n	80026ac <user_notify+0x90>
    return;
 80026aa:	bf00      	nop
  }
}
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  connected = FALSE;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <GAP_DisconnectionComplete_CB+0x20>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <GAP_DisconnectionComplete_CB+0x24>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <GAP_DisconnectionComplete_CB+0x28>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	200000b8 	.word	0x200000b8
 80026d8:	20000001 	.word	0x20000001
 80026dc:	200000b6 	.word	0x200000b6

080026e0 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <GAP_ConnectionComplete_CB+0x38>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <GAP_ConnectionComplete_CB+0x3c>)
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 80026f8:	2305      	movs	r3, #5
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e002      	b.n	8002704 <GAP_ConnectionComplete_CB+0x24>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3b01      	subs	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200000b8 	.word	0x200000b8
 800271c:	200000b4 	.word	0x200000b4

08002720 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HCI_TL_SPI_Init+0x88>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <HCI_TL_SPI_Init+0x88>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HCI_TL_SPI_Init+0x88>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002740:	2301      	movs	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HCI_TL_SPI_Init+0x8c>)
 8002746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4619      	mov	r1, r3
 8002752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002756:	f003 f9c1 	bl	8005adc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800275a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f003 f9b1 	bl	8005adc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800277a:	2302      	movs	r3, #2
 800277c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	2301      	movs	r3, #1
 8002780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	4619      	mov	r1, r3
 8002790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002794:	f003 f9a2 	bl	8005adc <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8002798:	f001 f9ec 	bl	8003b74 <BSP_SPI1_Init>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	10110000 	.word	0x10110000

080027b0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80027b4:	2101      	movs	r1, #1
 80027b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ba:	f003 fb37 	bl	8005e2c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80027be:	2102      	movs	r1, #2
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c4:	f003 fb32 	bl	8005e2c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80027c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f003 fb2c 	bl	8005e2c <HAL_GPIO_DeInit>
  return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	bd80      	pop	{r7, pc}

080027da <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80027de:	2201      	movs	r2, #1
 80027e0:	2102      	movs	r1, #2
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e6:	f003 fc2d 	bl	8006044 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f4:	f003 fc26 	bl	8006044 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80027f8:	2005      	movs	r0, #5
 80027fa:	f001 fdf3 	bl	80043e4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80027fe:	2201      	movs	r2, #1
 8002800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002808:	f003 fc1c 	bl	8006044 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800280c:	2005      	movs	r0, #5
 800280e:	f001 fde9 	bl	80043e4 <HAL_Delay>
  return 0;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}

08002818 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002828:	23ff      	movs	r3, #255	; 0xff
 800282a:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800282c:	230b      	movs	r3, #11
 800282e:	753b      	strb	r3, [r7, #20]
 8002830:	2300      	movs	r3, #0
 8002832:	757b      	strb	r3, [r7, #21]
 8002834:	2300      	movs	r3, #0
 8002836:	75bb      	strb	r3, [r7, #22]
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]
 800283c:	2300      	movs	r3, #0
 800283e:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	2102      	movs	r1, #2
 8002844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002848:	f003 fbfc 	bl	8006044 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800284c:	f107 010c 	add.w	r1, r7, #12
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2205      	movs	r2, #5
 8002856:	4618      	mov	r0, r3
 8002858:	f001 f9bc 	bl	8003bd4 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 800285c:	7b3b      	ldrb	r3, [r7, #12]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d129      	bne.n	80028b6 <HCI_TL_SPI_Receive+0x9e>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002862:	7c3b      	ldrb	r3, [r7, #16]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	b21a      	sxth	r2, r3
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	b21b      	sxth	r3, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	b21b      	sxth	r3, r3
 8002870:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002872:	8bfb      	ldrh	r3, [r7, #30]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01e      	beq.n	80028b6 <HCI_TL_SPI_Receive+0x9e>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002878:	8bfa      	ldrh	r2, [r7, #30]
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	429a      	cmp	r2, r3
 800287e:	d901      	bls.n	8002884 <HCI_TL_SPI_Receive+0x6c>
        byte_count = size;
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002884:	2300      	movs	r3, #0
 8002886:	777b      	strb	r3, [r7, #29]
 8002888:	e010      	b.n	80028ac <HCI_TL_SPI_Receive+0x94>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800288a:	f107 011b 	add.w	r1, r7, #27
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	2201      	movs	r2, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f99d 	bl	8003bd4 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800289a:	7f7b      	ldrb	r3, [r7, #29]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	7efa      	ldrb	r2, [r7, #27]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80028a6:	7f7b      	ldrb	r3, [r7, #29]
 80028a8:	3301      	adds	r3, #1
 80028aa:	777b      	strb	r3, [r7, #29]
 80028ac:	7f7b      	ldrb	r3, [r7, #29]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	8bfa      	ldrh	r2, [r7, #30]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d8e9      	bhi.n	800288a <HCI_TL_SPI_Receive+0x72>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2102      	movs	r1, #2
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028be:	f003 fbc1 	bl	8006044 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80028c2:	7f7b      	ldrb	r3, [r7, #29]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80028d8:	230a      	movs	r3, #10
 80028da:	743b      	strb	r3, [r7, #16]
 80028dc:	2300      	movs	r3, #0
 80028de:	747b      	strb	r3, [r7, #17]
 80028e0:	2300      	movs	r3, #0
 80028e2:	74bb      	strb	r3, [r7, #18]
 80028e4:	2300      	movs	r3, #0
 80028e6:	74fb      	strb	r3, [r7, #19]
 80028e8:	2300      	movs	r3, #0
 80028ea:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f001 fd6e 	bl	80043cc <HAL_GetTick>
 80028f0:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2102      	movs	r1, #2
 80028fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fe:	f003 fba1 	bl	8006044 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002902:	f107 0108 	add.w	r1, r7, #8
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	2205      	movs	r2, #5
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f961 	bl	8003bd4 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8002912:	7a3b      	ldrb	r3, [r7, #8]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d10f      	bne.n	8002938 <HCI_TL_SPI_Send+0x6c>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002918:	7a7b      	ldrb	r3, [r7, #9]
 800291a:	b29b      	uxth	r3, r3
 800291c:	887a      	ldrh	r2, [r7, #2]
 800291e:	429a      	cmp	r2, r3
 8002920:	d806      	bhi.n	8002930 <HCI_TL_SPI_Send+0x64>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	461a      	mov	r2, r3
 8002926:	4912      	ldr	r1, [pc, #72]	; (8002970 <HCI_TL_SPI_Send+0xa4>)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 f953 	bl	8003bd4 <BSP_SPI1_SendRecv>
 800292e:	e006      	b.n	800293e <HCI_TL_SPI_Send+0x72>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002930:	f06f 0301 	mvn.w	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	e002      	b.n	800293e <HCI_TL_SPI_Send+0x72>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
 800293c:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	2102      	movs	r1, #2
 8002942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002946:	f003 fb7d 	bl	8006044 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800294a:	f001 fd3f 	bl	80043cc <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d903      	bls.n	8002960 <HCI_TL_SPI_Send+0x94>
    {
      result = -3;
 8002958:	f06f 0302 	mvn.w	r3, #2
 800295c:	61fb      	str	r3, [r7, #28]
      break;
 800295e:	e002      	b.n	8002966 <HCI_TL_SPI_Send+0x9a>
    }
  } while(result < 0);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	dbc5      	blt.n	80028f2 <HCI_TL_SPI_Send+0x26>

  return result;
 8002966:	69fb      	ldr	r3, [r7, #28]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200000ec 	.word	0x200000ec

08002974 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002978:	2101      	movs	r1, #1
 800297a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297e:	f003 fb49 	bl	8006014 <HAL_GPIO_ReadPin>
 8002982:	4603      	mov	r3, r0
 8002984:	2b01      	cmp	r3, #1
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <hci_tl_lowlevel_init+0x54>)
 800299c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <hci_tl_lowlevel_init+0x58>)
 80029a0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <hci_tl_lowlevel_init+0x5c>)
 80029a4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <hci_tl_lowlevel_init+0x60>)
 80029a8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <hci_tl_lowlevel_init+0x64>)
 80029ac:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <hci_tl_lowlevel_init+0x68>)
 80029b0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	4618      	mov	r0, r3
 80029b6:	f008 f86b 	bl	800aa90 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80029ba:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80029be:	4810      	ldr	r0, [pc, #64]	; (8002a00 <hci_tl_lowlevel_init+0x6c>)
 80029c0:	f003 f847 	bl	8005a52 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80029c4:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <hci_tl_lowlevel_init+0x70>)
 80029c6:	2100      	movs	r1, #0
 80029c8:	480d      	ldr	r0, [pc, #52]	; (8002a00 <hci_tl_lowlevel_init+0x6c>)
 80029ca:	f003 f828 	bl	8005a1e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	2006      	movs	r0, #6
 80029d4:	f002 ffed 	bl	80059b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029d8:	2006      	movs	r0, #6
 80029da:	f003 f806 	bl	80059ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80029de:	bf00      	nop
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	08002721 	.word	0x08002721
 80029ec:	080027b1 	.word	0x080027b1
 80029f0:	080028cd 	.word	0x080028cd
 80029f4:	08002819 	.word	0x08002819
 80029f8:	080027db 	.word	0x080027db
 80029fc:	08003c15 	.word	0x08003c15
 8002a00:	20000510 	.word	0x20000510
 8002a04:	08002a09 	.word	0x08002a09

08002a08 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002a0c:	e005      	b.n	8002a1a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f008 f9a0 	bl	800ad54 <hci_notify_asynch_evt>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002a1a:	f7ff ffab 	bl	8002974 <IsDataAvailable>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f4      	bne.n	8002a0e <hci_tl_lowlevel_isr+0x6>
 8002a24:	e000      	b.n	8002a28 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002a26:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a50:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <MX_ADC1_Init+0xe4>)
 8002a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a6e:	2204      	movs	r2, #4
 8002a70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aae:	4817      	ldr	r0, [pc, #92]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002ab0:	f001 fe9e 	bl	80047f0 <HAL_ADC_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002aba:	f000 fff1 	bl	8003aa0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4810      	ldr	r0, [pc, #64]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002aca:	f002 fdeb 	bl	80056a4 <HAL_ADCEx_MultiModeConfigChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002ad4:	f000 ffe4 	bl	8003aa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <MX_ADC1_Init+0xe8>)
 8002ada:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002adc:	2306      	movs	r3, #6
 8002ade:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ae4:	237f      	movs	r3, #127	; 0x7f
 8002ae6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_ADC1_Init+0xe0>)
 8002af6:	f002 f967 	bl	8004dc8 <HAL_ADC_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002b00:	f000 ffce 	bl	8003aa0 <Error_Handler>
  }

}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000057c 	.word	0x2000057c
 8002b10:	50040000 	.word	0x50040000
 8002b14:	04300002 	.word	0x04300002

08002b18 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b1e:	463b      	mov	r3, r7
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
 8002b2c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b30:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <MX_ADC2_Init+0xc0>)
 8002b32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b3a:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b4e:	2204      	movs	r2, #4
 8002b50:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002b8e:	4811      	ldr	r0, [pc, #68]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002b90:	f001 fe2e 	bl	80047f0 <HAL_ADC_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8002b9a:	f000 ff81 	bl	8003aa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <MX_ADC2_Init+0xc4>)
 8002ba0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002baa:	237f      	movs	r3, #127	; 0x7f
 8002bac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bae:	2304      	movs	r3, #4
 8002bb0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bb6:	463b      	mov	r3, r7
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4806      	ldr	r0, [pc, #24]	; (8002bd4 <MX_ADC2_Init+0xbc>)
 8002bbc:	f002 f904 	bl	8004dc8 <HAL_ADC_ConfigChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8002bc6:	f000 ff6b 	bl	8003aa0 <Error_Handler>
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000518 	.word	0x20000518
 8002bd8:	50040100 	.word	0x50040100
 8002bdc:	08600004 	.word	0x08600004

08002be0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	; 0x38
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a4b      	ldr	r2, [pc, #300]	; (8002d2c <HAL_ADC_MspInit+0x14c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d145      	bne.n	8002c8e <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002c02:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <HAL_ADC_MspInit+0x150>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a49      	ldr	r2, [pc, #292]	; (8002d30 <HAL_ADC_MspInit+0x150>)
 8002c0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002c0c:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <HAL_ADC_MspInit+0x150>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002c14:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	4a46      	ldr	r2, [pc, #280]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c20:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2c:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c38:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c44:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c48:	4a3a      	ldr	r2, [pc, #232]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c50:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c60:	230b      	movs	r3, #11
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4832      	ldr	r0, [pc, #200]	; (8002d38 <HAL_ADC_MspInit+0x158>)
 8002c70:	f002 ff34 	bl	8005adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c74:	2301      	movs	r3, #1
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c78:	230b      	movs	r3, #11
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	4619      	mov	r1, r3
 8002c86:	482d      	ldr	r0, [pc, #180]	; (8002d3c <HAL_ADC_MspInit+0x15c>)
 8002c88:	f002 ff28 	bl	8005adc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002c8c:	e04a      	b.n	8002d24 <HAL_ADC_MspInit+0x144>
  else if(adcHandle->Instance==ADC2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2b      	ldr	r2, [pc, #172]	; (8002d40 <HAL_ADC_MspInit+0x160>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d145      	bne.n	8002d24 <HAL_ADC_MspInit+0x144>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_ADC_MspInit+0x150>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4a24      	ldr	r2, [pc, #144]	; (8002d30 <HAL_ADC_MspInit+0x150>)
 8002ca0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_ADC_MspInit+0x150>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_MspInit+0xe2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_ADC_MspInit+0x154>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002cf6:	230b      	movs	r3, #11
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d02:	4619      	mov	r1, r3
 8002d04:	480c      	ldr	r0, [pc, #48]	; (8002d38 <HAL_ADC_MspInit+0x158>)
 8002d06:	f002 fee9 	bl	8005adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d0e:	230b      	movs	r3, #11
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d20:	f002 fedc 	bl	8005adc <HAL_GPIO_Init>
}
 8002d24:	bf00      	nop
 8002d26:	3738      	adds	r7, #56	; 0x38
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	50040000 	.word	0x50040000
 8002d30:	200001ec 	.word	0x200001ec
 8002d34:	40021000 	.word	0x40021000
 8002d38:	48000800 	.word	0x48000800
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	50040100 	.word	0x50040100

08002d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	4a39      	ldr	r2, [pc, #228]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d66:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	4a33      	ldr	r2, [pc, #204]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dae:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <MX_GPIO_Init+0x100>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8|GPIO_PIN_9
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f240 7122 	movw	r1, #1826	; 0x722
 8002dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc4:	f003 f93e 	bl	8006044 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <MX_GPIO_Init+0x104>)
 8002dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	4619      	mov	r1, r3
 8002ddc:	481b      	ldr	r0, [pc, #108]	; (8002e4c <MX_GPIO_Init+0x108>)
 8002dde:	f002 fe7d 	bl	8005adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002de2:	2301      	movs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002de6:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <MX_GPIO_Init+0x10c>)
 8002de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df8:	f002 fe70 	bl	8005adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8|GPIO_PIN_9
 8002dfc:	f240 7322 	movw	r3, #1826	; 0x722
 8002e00:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e18:	f002 fe60 	bl	8005adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	2006      	movs	r0, #6
 8002e22:	f002 fdc6 	bl	80059b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e26:	2006      	movs	r0, #6
 8002e28:	f002 fddf 	bl	80059ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	2028      	movs	r0, #40	; 0x28
 8002e32:	f002 fdbe 	bl	80059b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e36:	2028      	movs	r0, #40	; 0x28
 8002e38:	f002 fdd7 	bl	80059ea <HAL_NVIC_EnableIRQ>

}
 8002e3c:	bf00      	nop
 8002e3e:	3728      	adds	r7, #40	; 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	10210000 	.word	0x10210000
 8002e4c:	48000800 	.word	0x48000800
 8002e50:	10110000 	.word	0x10110000

08002e54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <MX_I2C1_Init+0x78>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <MX_I2C1_Init+0x7c>)
 8002e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e8e:	480e      	ldr	r0, [pc, #56]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002e90:	f003 f92d 	bl	80060ee <HAL_I2C_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e9a:	f000 fe01 	bl	8003aa0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4809      	ldr	r0, [pc, #36]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002ea2:	f003 fc1b 	bl	80066dc <HAL_I2CEx_ConfigAnalogFilter>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002eac:	f000 fdf8 	bl	8003aa0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <MX_I2C1_Init+0x74>)
 8002eb4:	f003 fc5d 	bl	8006772 <HAL_I2CEx_ConfigDigitalFilter>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ebe:	f000 fdef 	bl	8003aa0 <Error_Handler>
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200005e0 	.word	0x200005e0
 8002ecc:	40005400 	.word	0x40005400
 8002ed0:	10909cec 	.word	0x10909cec

08002ed4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_I2C_MspInit+0x7c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d128      	bne.n	8002f48 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <HAL_I2C_MspInit+0x80>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_I2C_MspInit+0x80>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <HAL_I2C_MspInit+0x80>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f14:	2312      	movs	r3, #18
 8002f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f20:	2304      	movs	r3, #4
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	480b      	ldr	r0, [pc, #44]	; (8002f58 <HAL_I2C_MspInit+0x84>)
 8002f2c:	f002 fdd6 	bl	8005adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_I2C_MspInit+0x80>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_I2C_MspInit+0x80>)
 8002f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_I2C_MspInit+0x80>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3728      	adds	r7, #40	; 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40005400 	.word	0x40005400
 8002f54:	40021000 	.word	0x40021000
 8002f58:	48000400 	.word	0x48000400

08002f5c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8002f72:	2308      	movs	r3, #8
 8002f74:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8002f76:	2028      	movs	r0, #40	; 0x28
 8002f78:	f001 fa34 	bl	80043e4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	2130      	movs	r1, #48	; 0x30
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f829 	bl	8002fdc <lcd_write>
	HAL_Delay(5);
 8002f8a:	2005      	movs	r0, #5
 8002f8c:	f001 fa2a 	bl	80043e4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	2130      	movs	r1, #48	; 0x30
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f81f 	bl	8002fdc <lcd_write>
	HAL_Delay(1);
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f001 fa20 	bl	80043e4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	2130      	movs	r1, #48	; 0x30
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f815 	bl	8002fdc <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f80e 	bl	8002fdc <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	210c      	movs	r1, #12
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f807 	bl	8002fdc <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f89e 	bl	8003110 <lcd_clear>

}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	71bb      	strb	r3, [r7, #6]
 8002fea:	4613      	mov	r3, r2
 8002fec:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	f023 030f 	bic.w	r3, r3, #15
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	797b      	ldrb	r3, [r7, #5]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	b2db      	uxtb	r3, r3
 8003002:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8003004:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003008:	f023 030f 	bic.w	r3, r3, #15
 800300c:	b25a      	sxtb	r2, r3
 800300e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003012:	4313      	orrs	r3, r2
 8003014:	b25b      	sxtb	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800301a:	79bb      	ldrb	r3, [r7, #6]
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	b2da      	uxtb	r2, r3
 8003020:	797b      	ldrb	r3, [r7, #5]
 8003022:	4313      	orrs	r3, r2
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	b2db      	uxtb	r3, r3
 800302c:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800302e:	79bb      	ldrb	r3, [r7, #6]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	b25a      	sxtb	r2, r3
 8003034:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003038:	4313      	orrs	r3, r2
 800303a:	b25b      	sxtb	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	b299      	uxth	r1, r3
 8003044:	f107 020c 	add.w	r2, r7, #12
 8003048:	2364      	movs	r3, #100	; 0x64
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2304      	movs	r3, #4
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <lcd_write+0x88>)
 8003050:	f003 f8dc 	bl	800620c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8003054:	2005      	movs	r0, #5
 8003056:	f001 f9c5 	bl	80043e4 <HAL_Delay>
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200005e0 	.word	0x200005e0

08003068 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	2300      	movs	r3, #0
 8003076:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8003082:	2308      	movs	r3, #8
 8003084:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f842 	bl	8003110 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ffa1 	bl	8002fdc <lcd_write>
	while(lcd->f_line[i])
 800309a:	e00f      	b.n	80030bc <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7818      	ldrb	r0, [r3, #0]
 80030a0:	7bbb      	ldrb	r3, [r7, #14]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	7859      	ldrb	r1, [r3, #1]
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	f7ff ff93 	bl	8002fdc <lcd_write>
		i++;
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80030bc:	7bbb      	ldrb	r3, [r7, #14]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e9      	bne.n	800309c <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	21c0      	movs	r1, #192	; 0xc0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff81 	bl	8002fdc <lcd_write>
	while(lcd->s_line[i])
 80030da:	e00f      	b.n	80030fc <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7818      	ldrb	r0, [r3, #0]
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	7c99      	ldrb	r1, [r3, #18]
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	f7ff ff73 	bl	8002fdc <lcd_write>
		i++;
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	3301      	adds	r3, #1
 80030fa:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80030fc:	7bbb      	ldrb	r3, [r7, #14]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	7c9b      	ldrb	r3, [r3, #18]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e9      	bne.n	80030dc <lcd_display+0x74>
	}
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8003126:	2308      	movs	r3, #8
 8003128:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff52 	bl	8002fdc <lcd_write>
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4907      	ldr	r1, [pc, #28]	; (8003178 <__NVIC_EnableIRQ+0x38>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000e100 	.word	0xe000e100
 800317c:	00000000 	.word	0x00000000

08003180 <Neopixel_setup>:
	uint8_t lastbit;
	long double period;
	uint16_t low_CCR1, low_ARR, high_CCR1, high_ARR, treset_ARR;


void Neopixel_setup(void){
 8003180:	b598      	push	{r3, r4, r7, lr}
 8003182:	af00      	add	r7, sp, #0

	//calculate all the timings.
	period = 1 / timer_freq;
 8003184:	4a7e      	ldr	r2, [pc, #504]	; (8003380 <Neopixel_setup+0x200>)
 8003186:	a478      	add	r4, pc, #480	; (adr r4, 8003368 <Neopixel_setup+0x1e8>)
 8003188:	e9d4 3400 	ldrd	r3, r4, [r4]
 800318c:	e9c2 3400 	strd	r3, r4, [r2]
	low_CCR1 = round(T0H / period);
 8003190:	4b7b      	ldr	r3, [pc, #492]	; (8003380 <Neopixel_setup+0x200>)
 8003192:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003196:	461a      	mov	r2, r3
 8003198:	4623      	mov	r3, r4
 800319a:	a175      	add	r1, pc, #468	; (adr r1, 8003370 <Neopixel_setup+0x1f0>)
 800319c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031a0:	f7fd fb54 	bl	800084c <__aeabi_ddiv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	ec44 3b17 	vmov	d7, r3, r4
 80031ac:	eeb0 0a47 	vmov.f32	s0, s14
 80031b0:	eef0 0a67 	vmov.f32	s1, s15
 80031b4:	f008 fc40 	bl	800ba38 <round>
 80031b8:	ec54 3b10 	vmov	r3, r4, d0
 80031bc:	4618      	mov	r0, r3
 80031be:	4621      	mov	r1, r4
 80031c0:	f7fd fcca 	bl	8000b58 <__aeabi_d2uiz>
 80031c4:	4603      	mov	r3, r0
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	4b6e      	ldr	r3, [pc, #440]	; (8003384 <Neopixel_setup+0x204>)
 80031ca:	801a      	strh	r2, [r3, #0]
	low_ARR = round((T0H + T0L) / period);
 80031cc:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <Neopixel_setup+0x200>)
 80031ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031d2:	461a      	mov	r2, r3
 80031d4:	4623      	mov	r3, r4
 80031d6:	f04f 0000 	mov.w	r0, #0
 80031da:	496b      	ldr	r1, [pc, #428]	; (8003388 <Neopixel_setup+0x208>)
 80031dc:	f7fd fb36 	bl	800084c <__aeabi_ddiv>
 80031e0:	4603      	mov	r3, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	ec44 3b17 	vmov	d7, r3, r4
 80031e8:	eeb0 0a47 	vmov.f32	s0, s14
 80031ec:	eef0 0a67 	vmov.f32	s1, s15
 80031f0:	f008 fc22 	bl	800ba38 <round>
 80031f4:	ec54 3b10 	vmov	r3, r4, d0
 80031f8:	4618      	mov	r0, r3
 80031fa:	4621      	mov	r1, r4
 80031fc:	f7fd fcac 	bl	8000b58 <__aeabi_d2uiz>
 8003200:	4603      	mov	r3, r0
 8003202:	b29a      	uxth	r2, r3
 8003204:	4b61      	ldr	r3, [pc, #388]	; (800338c <Neopixel_setup+0x20c>)
 8003206:	801a      	strh	r2, [r3, #0]
	high_CCR1 = round(T1H / period);
 8003208:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <Neopixel_setup+0x200>)
 800320a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800320e:	461a      	mov	r2, r3
 8003210:	4623      	mov	r3, r4
 8003212:	a159      	add	r1, pc, #356	; (adr r1, 8003378 <Neopixel_setup+0x1f8>)
 8003214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003218:	f7fd fb18 	bl	800084c <__aeabi_ddiv>
 800321c:	4603      	mov	r3, r0
 800321e:	460c      	mov	r4, r1
 8003220:	ec44 3b17 	vmov	d7, r3, r4
 8003224:	eeb0 0a47 	vmov.f32	s0, s14
 8003228:	eef0 0a67 	vmov.f32	s1, s15
 800322c:	f008 fc04 	bl	800ba38 <round>
 8003230:	ec54 3b10 	vmov	r3, r4, d0
 8003234:	4618      	mov	r0, r3
 8003236:	4621      	mov	r1, r4
 8003238:	f7fd fc8e 	bl	8000b58 <__aeabi_d2uiz>
 800323c:	4603      	mov	r3, r0
 800323e:	b29a      	uxth	r2, r3
 8003240:	4b53      	ldr	r3, [pc, #332]	; (8003390 <Neopixel_setup+0x210>)
 8003242:	801a      	strh	r2, [r3, #0]
	high_ARR = round((T1H + T1L) / period);
 8003244:	4b4e      	ldr	r3, [pc, #312]	; (8003380 <Neopixel_setup+0x200>)
 8003246:	e9d3 3400 	ldrd	r3, r4, [r3]
 800324a:	461a      	mov	r2, r3
 800324c:	4623      	mov	r3, r4
 800324e:	f04f 0000 	mov.w	r0, #0
 8003252:	494d      	ldr	r1, [pc, #308]	; (8003388 <Neopixel_setup+0x208>)
 8003254:	f7fd fafa 	bl	800084c <__aeabi_ddiv>
 8003258:	4603      	mov	r3, r0
 800325a:	460c      	mov	r4, r1
 800325c:	ec44 3b17 	vmov	d7, r3, r4
 8003260:	eeb0 0a47 	vmov.f32	s0, s14
 8003264:	eef0 0a67 	vmov.f32	s1, s15
 8003268:	f008 fbe6 	bl	800ba38 <round>
 800326c:	ec54 3b10 	vmov	r3, r4, d0
 8003270:	4618      	mov	r0, r3
 8003272:	4621      	mov	r1, r4
 8003274:	f7fd fc70 	bl	8000b58 <__aeabi_d2uiz>
 8003278:	4603      	mov	r3, r0
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b45      	ldr	r3, [pc, #276]	; (8003394 <Neopixel_setup+0x214>)
 800327e:	801a      	strh	r2, [r3, #0]
	treset_ARR = ceil(Treset / period);
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <Neopixel_setup+0x200>)
 8003282:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003286:	461a      	mov	r2, r3
 8003288:	4623      	mov	r3, r4
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	4942      	ldr	r1, [pc, #264]	; (8003398 <Neopixel_setup+0x218>)
 8003290:	f7fd fadc 	bl	800084c <__aeabi_ddiv>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	ec44 3b17 	vmov	d7, r3, r4
 800329c:	eeb0 0a47 	vmov.f32	s0, s14
 80032a0:	eef0 0a67 	vmov.f32	s1, s15
 80032a4:	f008 fb48 	bl	800b938 <ceil>
 80032a8:	ec54 3b10 	vmov	r3, r4, d0
 80032ac:	4618      	mov	r0, r3
 80032ae:	4621      	mov	r1, r4
 80032b0:	f7fd fc52 	bl	8000b58 <__aeabi_d2uiz>
 80032b4:	4603      	mov	r3, r0
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b38      	ldr	r3, [pc, #224]	; (800339c <Neopixel_setup+0x21c>)
 80032ba:	801a      	strh	r2, [r3, #0]

	RCC->AHB1ENR |= RCC_AHB2ENR_GPIODEN; //enable port D clock
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <Neopixel_setup+0x220>)
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <Neopixel_setup+0x220>)
 80032c2:	f043 0308 	orr.w	r3, r3, #8
 80032c6:	6493      	str	r3, [r2, #72]	; 0x48
	GPIOD->MODER |= GPIO_MODER_MODER12_1; //setup pin 12 on port d to AF mode
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <Neopixel_setup+0x224>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <Neopixel_setup+0x224>)
 80032ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032d2:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[1] = (GPIOD->AFR[1] & (0b1111<<(4*(12-8))) | 0b0010<<(4*(12-8))); //setup pin 12 on port D to AF timer 2-5
 80032d4:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <Neopixel_setup+0x224>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f403 2350 	and.w	r3, r3, #851968	; 0xd0000
 80032dc:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <Neopixel_setup+0x224>)
 80032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e2:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->AHB1ENR |= RCC_APB1ENR1_TIM4EN; //enable the timer4 clock
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <Neopixel_setup+0x220>)
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <Neopixel_setup+0x220>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	6493      	str	r3, [r2, #72]	; 0x48
	TIM4->PSC = 0;   //set prescale to zero as timer has to go as fast as posible
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <Neopixel_setup+0x228>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->CCMR1 = (TIM4->CCMR1 & ~(0b110<<4)) | (0b110<<4); //set PWM mode 110
 80032f6:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <Neopixel_setup+0x228>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <Neopixel_setup+0x228>)
 80032fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003300:	6193      	str	r3, [r2, #24]
	TIM4->CCR1 = 0; //set to zero so that the pin stay low until transmission
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <Neopixel_setup+0x228>)
 8003304:	2200      	movs	r2, #0
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->ARR = treset_ARR; //set to timing for reset LEDs
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <Neopixel_setup+0x21c>)
 800330a:	881a      	ldrh	r2, [r3, #0]
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <Neopixel_setup+0x228>)
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCER |= TIM_CCER_CC1E; //enable output to pin.
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <Neopixel_setup+0x228>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <Neopixel_setup+0x228>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6213      	str	r3, [r2, #32]
	TIM4->CR1 |= TIM_CR1_CEN; //Disable channel 1. This bit is used to start and stop transmission.
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <Neopixel_setup+0x228>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <Neopixel_setup+0x228>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= TIM_CR1_ARPE; //buffer ARR
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <Neopixel_setup+0x228>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <Neopixel_setup+0x228>)
 800332e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003332:	6013      	str	r3, [r2, #0]
	TIM4->CCMR1 |= TIM_CCMR1_OC1PE; //buffer CCR1
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <Neopixel_setup+0x228>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <Neopixel_setup+0x228>)
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	6193      	str	r3, [r2, #24]
	TIM4->DIER &= ~TIM_DIER_UIE; // ensure we are not enabling interrupt flag to be generated this bit is used to start/stop transmission
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <Neopixel_setup+0x228>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <Neopixel_setup+0x228>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	60d3      	str	r3, [r2, #12]
	TIM4->CR1 |= TIM_CR1_CEN; //enable channel 1.
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <Neopixel_setup+0x228>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <Neopixel_setup+0x228>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM4_IRQn); // Enable interrupt(NVIC level)
 8003358:	201e      	movs	r0, #30
 800335a:	f7ff fef1 	bl	8003140 <__NVIC_EnableIRQ>
}
 800335e:	bf00      	nop
 8003360:	bd98      	pop	{r3, r4, r7, pc}
 8003362:	bf00      	nop
 8003364:	f3af 8000 	nop.w
 8003368:	9999999a 	.word	0x9999999a
 800336c:	3f899999 	.word	0x3f899999
 8003370:	66666666 	.word	0x66666666
 8003374:	3fd66666 	.word	0x3fd66666
 8003378:	cccccccd 	.word	0xcccccccd
 800337c:	3feccccc 	.word	0x3feccccc
 8003380:	20000658 	.word	0x20000658
 8003384:	2000064c 	.word	0x2000064c
 8003388:	3ff40000 	.word	0x3ff40000
 800338c:	2000064e 	.word	0x2000064e
 8003390:	20000660 	.word	0x20000660
 8003394:	20000652 	.word	0x20000652
 8003398:	40490000 	.word	0x40490000
 800339c:	20000650 	.word	0x20000650
 80033a0:	40021000 	.word	0x40021000
 80033a4:	48000c00 	.word	0x48000c00
 80033a8:	40000800 	.word	0x40000800

080033ac <show_neopixels>:

void show_neopixels(){
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
	pos = 0; //set the interrupt to start at first byte
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <show_neopixels+0x38>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	801a      	strh	r2, [r3, #0]
	lastbit = 0;
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <show_neopixels+0x3c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
	mask = 0B10000000; //set the interrupt to start at second bit
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <show_neopixels+0x40>)
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	701a      	strb	r2, [r3, #0]

	TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <show_neopixels+0x44>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <show_neopixels+0x44>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6113      	str	r3, [r2, #16]
	TIM4->DIER |= TIM_DIER_UIE; //enable interrupt flag to be generated to start transmission
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <show_neopixels+0x44>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <show_neopixels+0x44>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	60d3      	str	r3, [r2, #12]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000632 	.word	0x20000632
 80033e8:	20000630 	.word	0x20000630
 80033ec:	20000002 	.word	0x20000002
 80033f0:	40000800 	.word	0x40000800

080033f4 <set_colour>:

void set_colour(int x, int y){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
	if(x==1){ //white
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10d      	bne.n	8003420 <set_colour+0x2c>
		for (uint8_t i = 0; i < 24; i+=1){
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e007      	b.n	800341a <set_colour+0x26>
			LED_data[i] = y;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	b2d1      	uxtb	r1, r2
 8003410:	4a61      	ldr	r2, [pc, #388]	; (8003598 <set_colour+0x1a4>)
 8003412:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 24; i+=1){
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	3301      	adds	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b17      	cmp	r3, #23
 800341e:	d9f4      	bls.n	800340a <set_colour+0x16>
		}
	}
	if(x==2){ //red
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d117      	bne.n	8003456 <set_colour+0x62>
		for (uint8_t i = 0; i < 24; i+=3){
 8003426:	2300      	movs	r3, #0
 8003428:	73bb      	strb	r3, [r7, #14]
 800342a:	e011      	b.n	8003450 <set_colour+0x5c>
			LED_data[i] = 0;
 800342c:	7bbb      	ldrb	r3, [r7, #14]
 800342e:	4a5a      	ldr	r2, [pc, #360]	; (8003598 <set_colour+0x1a4>)
 8003430:	2100      	movs	r1, #0
 8003432:	54d1      	strb	r1, [r2, r3]
			LED_data[i+1] = y;
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	3301      	adds	r3, #1
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	b2d1      	uxtb	r1, r2
 800343c:	4a56      	ldr	r2, [pc, #344]	; (8003598 <set_colour+0x1a4>)
 800343e:	54d1      	strb	r1, [r2, r3]
			LED_data[i+2] = 0;
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	3302      	adds	r3, #2
 8003444:	4a54      	ldr	r2, [pc, #336]	; (8003598 <set_colour+0x1a4>)
 8003446:	2100      	movs	r1, #0
 8003448:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 24; i+=3){
 800344a:	7bbb      	ldrb	r3, [r7, #14]
 800344c:	3303      	adds	r3, #3
 800344e:	73bb      	strb	r3, [r7, #14]
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	2b17      	cmp	r3, #23
 8003454:	d9ea      	bls.n	800342c <set_colour+0x38>
		}
	}
	if(x==3){ //yellow
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d118      	bne.n	800348e <set_colour+0x9a>
		for (uint8_t i = 0; i < 24; i+=3){
 800345c:	2300      	movs	r3, #0
 800345e:	737b      	strb	r3, [r7, #13]
 8003460:	e012      	b.n	8003488 <set_colour+0x94>
			LED_data[i] = y;
 8003462:	7b7b      	ldrb	r3, [r7, #13]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d1      	uxtb	r1, r2
 8003468:	4a4b      	ldr	r2, [pc, #300]	; (8003598 <set_colour+0x1a4>)
 800346a:	54d1      	strb	r1, [r2, r3]
			LED_data[i+1] = y;
 800346c:	7b7b      	ldrb	r3, [r7, #13]
 800346e:	3301      	adds	r3, #1
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d1      	uxtb	r1, r2
 8003474:	4a48      	ldr	r2, [pc, #288]	; (8003598 <set_colour+0x1a4>)
 8003476:	54d1      	strb	r1, [r2, r3]
			LED_data[i+2] = 0;
 8003478:	7b7b      	ldrb	r3, [r7, #13]
 800347a:	3302      	adds	r3, #2
 800347c:	4a46      	ldr	r2, [pc, #280]	; (8003598 <set_colour+0x1a4>)
 800347e:	2100      	movs	r1, #0
 8003480:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 24; i+=3){
 8003482:	7b7b      	ldrb	r3, [r7, #13]
 8003484:	3303      	adds	r3, #3
 8003486:	737b      	strb	r3, [r7, #13]
 8003488:	7b7b      	ldrb	r3, [r7, #13]
 800348a:	2b17      	cmp	r3, #23
 800348c:	d9e9      	bls.n	8003462 <set_colour+0x6e>
		}
	}
	if(x==4){ //green
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d117      	bne.n	80034c4 <set_colour+0xd0>
		for (uint8_t i = 0; i < 24; i+=3){
 8003494:	2300      	movs	r3, #0
 8003496:	733b      	strb	r3, [r7, #12]
 8003498:	e011      	b.n	80034be <set_colour+0xca>
			LED_data[i] = y;
 800349a:	7b3b      	ldrb	r3, [r7, #12]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d1      	uxtb	r1, r2
 80034a0:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <set_colour+0x1a4>)
 80034a2:	54d1      	strb	r1, [r2, r3]
			LED_data[i+1] = 0;
 80034a4:	7b3b      	ldrb	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	4a3b      	ldr	r2, [pc, #236]	; (8003598 <set_colour+0x1a4>)
 80034aa:	2100      	movs	r1, #0
 80034ac:	54d1      	strb	r1, [r2, r3]
			LED_data[i+2] = 0;
 80034ae:	7b3b      	ldrb	r3, [r7, #12]
 80034b0:	3302      	adds	r3, #2
 80034b2:	4a39      	ldr	r2, [pc, #228]	; (8003598 <set_colour+0x1a4>)
 80034b4:	2100      	movs	r1, #0
 80034b6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 24; i+=3){
 80034b8:	7b3b      	ldrb	r3, [r7, #12]
 80034ba:	3303      	adds	r3, #3
 80034bc:	733b      	strb	r3, [r7, #12]
 80034be:	7b3b      	ldrb	r3, [r7, #12]
 80034c0:	2b17      	cmp	r3, #23
 80034c2:	d9ea      	bls.n	800349a <set_colour+0xa6>
		}
	}
	if(x==5){ //turquoise
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d118      	bne.n	80034fc <set_colour+0x108>
		for (uint8_t i = 0; i < 24; i+=3){
 80034ca:	2300      	movs	r3, #0
 80034cc:	72fb      	strb	r3, [r7, #11]
 80034ce:	e012      	b.n	80034f6 <set_colour+0x102>
			LED_data[i] = y;
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	b2d1      	uxtb	r1, r2
 80034d6:	4a30      	ldr	r2, [pc, #192]	; (8003598 <set_colour+0x1a4>)
 80034d8:	54d1      	strb	r1, [r2, r3]
			LED_data[i+1] = 0;
 80034da:	7afb      	ldrb	r3, [r7, #11]
 80034dc:	3301      	adds	r3, #1
 80034de:	4a2e      	ldr	r2, [pc, #184]	; (8003598 <set_colour+0x1a4>)
 80034e0:	2100      	movs	r1, #0
 80034e2:	54d1      	strb	r1, [r2, r3]
			LED_data[i+2] = y;
 80034e4:	7afb      	ldrb	r3, [r7, #11]
 80034e6:	3302      	adds	r3, #2
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d1      	uxtb	r1, r2
 80034ec:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <set_colour+0x1a4>)
 80034ee:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 24; i+=3){
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	3303      	adds	r3, #3
 80034f4:	72fb      	strb	r3, [r7, #11]
 80034f6:	7afb      	ldrb	r3, [r7, #11]
 80034f8:	2b17      	cmp	r3, #23
 80034fa:	d9e9      	bls.n	80034d0 <set_colour+0xdc>
		}
	}
	if(x==6){ //blue
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d117      	bne.n	8003532 <set_colour+0x13e>
			for (uint8_t i = 0; i < 24; i+=3){
 8003502:	2300      	movs	r3, #0
 8003504:	72bb      	strb	r3, [r7, #10]
 8003506:	e011      	b.n	800352c <set_colour+0x138>
				LED_data[i] = 0;
 8003508:	7abb      	ldrb	r3, [r7, #10]
 800350a:	4a23      	ldr	r2, [pc, #140]	; (8003598 <set_colour+0x1a4>)
 800350c:	2100      	movs	r1, #0
 800350e:	54d1      	strb	r1, [r2, r3]
				LED_data[i+1] = 0;
 8003510:	7abb      	ldrb	r3, [r7, #10]
 8003512:	3301      	adds	r3, #1
 8003514:	4a20      	ldr	r2, [pc, #128]	; (8003598 <set_colour+0x1a4>)
 8003516:	2100      	movs	r1, #0
 8003518:	54d1      	strb	r1, [r2, r3]
				LED_data[i+2] = y;
 800351a:	7abb      	ldrb	r3, [r7, #10]
 800351c:	3302      	adds	r3, #2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	b2d1      	uxtb	r1, r2
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <set_colour+0x1a4>)
 8003524:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 24; i+=3){
 8003526:	7abb      	ldrb	r3, [r7, #10]
 8003528:	3303      	adds	r3, #3
 800352a:	72bb      	strb	r3, [r7, #10]
 800352c:	7abb      	ldrb	r3, [r7, #10]
 800352e:	2b17      	cmp	r3, #23
 8003530:	d9ea      	bls.n	8003508 <set_colour+0x114>
			}
	}
	if(x==7){ //pink
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b07      	cmp	r3, #7
 8003536:	d118      	bne.n	800356a <set_colour+0x176>
				for (uint8_t i = 0; i < 24; i+=3){
 8003538:	2300      	movs	r3, #0
 800353a:	727b      	strb	r3, [r7, #9]
 800353c:	e012      	b.n	8003564 <set_colour+0x170>
					LED_data[i] = 0;
 800353e:	7a7b      	ldrb	r3, [r7, #9]
 8003540:	4a15      	ldr	r2, [pc, #84]	; (8003598 <set_colour+0x1a4>)
 8003542:	2100      	movs	r1, #0
 8003544:	54d1      	strb	r1, [r2, r3]
					LED_data[i+1] = y;
 8003546:	7a7b      	ldrb	r3, [r7, #9]
 8003548:	3301      	adds	r3, #1
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	b2d1      	uxtb	r1, r2
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <set_colour+0x1a4>)
 8003550:	54d1      	strb	r1, [r2, r3]
					LED_data[i+2] = y;
 8003552:	7a7b      	ldrb	r3, [r7, #9]
 8003554:	3302      	adds	r3, #2
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	b2d1      	uxtb	r1, r2
 800355a:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <set_colour+0x1a4>)
 800355c:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 24; i+=3){
 800355e:	7a7b      	ldrb	r3, [r7, #9]
 8003560:	3303      	adds	r3, #3
 8003562:	727b      	strb	r3, [r7, #9]
 8003564:	7a7b      	ldrb	r3, [r7, #9]
 8003566:	2b17      	cmp	r3, #23
 8003568:	d9e9      	bls.n	800353e <set_colour+0x14a>
				}
	}
	if(x==8){ //LEDs off
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d10c      	bne.n	800358a <set_colour+0x196>
			for (uint8_t i = 0; i < 24; i+=1){
 8003570:	2300      	movs	r3, #0
 8003572:	723b      	strb	r3, [r7, #8]
 8003574:	e006      	b.n	8003584 <set_colour+0x190>
				LED_data[i] = 0;
 8003576:	7a3b      	ldrb	r3, [r7, #8]
 8003578:	4a07      	ldr	r2, [pc, #28]	; (8003598 <set_colour+0x1a4>)
 800357a:	2100      	movs	r1, #0
 800357c:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 24; i+=1){
 800357e:	7a3b      	ldrb	r3, [r7, #8]
 8003580:	3301      	adds	r3, #1
 8003582:	723b      	strb	r3, [r7, #8]
 8003584:	7a3b      	ldrb	r3, [r7, #8]
 8003586:	2b17      	cmp	r3, #23
 8003588:	d9f5      	bls.n	8003576 <set_colour+0x182>
			}
		}
	show_neopixels(); //send data to LEDs
 800358a:	f7ff ff0f 	bl	80033ac <show_neopixels>
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000634 	.word	0x20000634
 800359c:	00000000 	.word	0x00000000

080035a0 <print_measurement>:

void print_measurement(uint16_t raw, uint16_t raw2, char msg[]){ //for now prints raws
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	603a      	str	r2, [r7, #0]
 80035aa:	80fb      	strh	r3, [r7, #6]
 80035ac:	460b      	mov	r3, r1
 80035ae:	80bb      	strh	r3, [r7, #4]
	double Temp;
	uint16_t Temp0, moc;
	char msg_light[6];

	Temp = log(((10240000/raw) - 10000));
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	4a4f      	ldr	r2, [pc, #316]	; (80036f0 <print_measurement+0x150>)
 80035b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80035b8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80035bc:	3b10      	subs	r3, #16
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc ffb0 	bl	8000524 <__aeabi_i2d>
 80035c4:	4603      	mov	r3, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	ec44 3b10 	vmov	d0, r3, r4
 80035cc:	f008 fa7e 	bl	800bacc <log>
 80035d0:	ed87 0b06 	vstr	d0, [r7, #24]
	Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp ))*	Temp );
 80035d4:	a33e      	add	r3, pc, #248	; (adr r3, 80036d0 <print_measurement+0x130>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035de:	f7fd f80b 	bl	80005f8 <__aeabi_dmul>
 80035e2:	4603      	mov	r3, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	4618      	mov	r0, r3
 80035e8:	4621      	mov	r1, r4
 80035ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ee:	f7fd f803 	bl	80005f8 <__aeabi_dmul>
 80035f2:	4603      	mov	r3, r0
 80035f4:	460c      	mov	r4, r1
 80035f6:	4618      	mov	r0, r3
 80035f8:	4621      	mov	r1, r4
 80035fa:	a337      	add	r3, pc, #220	; (adr r3, 80036d8 <print_measurement+0x138>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fc fe44 	bl	800028c <__adddf3>
 8003604:	4603      	mov	r3, r0
 8003606:	460c      	mov	r4, r1
 8003608:	4618      	mov	r0, r3
 800360a:	4621      	mov	r1, r4
 800360c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003610:	f7fc fff2 	bl	80005f8 <__aeabi_dmul>
 8003614:	4603      	mov	r3, r0
 8003616:	460c      	mov	r4, r1
 8003618:	4618      	mov	r0, r3
 800361a:	4621      	mov	r1, r4
 800361c:	a330      	add	r3, pc, #192	; (adr r3, 80036e0 <print_measurement+0x140>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fc fe33 	bl	800028c <__adddf3>
 8003626:	4603      	mov	r3, r0
 8003628:	460c      	mov	r4, r1
 800362a:	461a      	mov	r2, r3
 800362c:	4623      	mov	r3, r4
 800362e:	f04f 0000 	mov.w	r0, #0
 8003632:	4930      	ldr	r1, [pc, #192]	; (80036f4 <print_measurement+0x154>)
 8003634:	f7fd f90a 	bl	800084c <__aeabi_ddiv>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	Temp = Temp - 273.15; //temperature in Celsius degrees
 8003640:	a329      	add	r3, pc, #164	; (adr r3, 80036e8 <print_measurement+0x148>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800364a:	f7fc fe1d 	bl	8000288 <__aeabi_dsub>
 800364e:	4603      	mov	r3, r0
 8003650:	460c      	mov	r4, r1
 8003652:	e9c7 3406 	strd	r3, r4, [r7, #24]
	Temp0 = Temp;
 8003656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800365a:	f7fd fa7d 	bl	8000b58 <__aeabi_d2uiz>
 800365e:	4603      	mov	r3, r0
 8003660:	82fb      	strh	r3, [r7, #22]
	moc = 5*5*1000/raw + 5*5*1000/raw2;
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8003668:	fb92 f3f3 	sdiv	r3, r2, r3
 800366c:	b29a      	uxth	r2, r3
 800366e:	88bb      	ldrh	r3, [r7, #4]
 8003670:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003674:	fb91 f3f3 	sdiv	r3, r1, r3
 8003678:	b29b      	uxth	r3, r3
 800367a:	4413      	add	r3, r2
 800367c:	82bb      	strh	r3, [r7, #20]

   if(raw2 > 1000){
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003684:	d908      	bls.n	8003698 <print_measurement+0xf8>
	   strcpy(msg_light,"dark");
 8003686:	f107 030c 	add.w	r3, r7, #12
 800368a:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <print_measurement+0x158>)
 800368c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003690:	6018      	str	r0, [r3, #0]
 8003692:	3304      	adds	r3, #4
 8003694:	7019      	strb	r1, [r3, #0]
 8003696:	e007      	b.n	80036a8 <print_measurement+0x108>
   }else{
	   strcpy(msg_light,"light");
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <print_measurement+0x15c>)
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036a2:	6018      	str	r0, [r3, #0]
 80036a4:	3304      	adds	r3, #4
 80036a6:	8019      	strh	r1, [r3, #0]
   }

	sprintf((char *)disp.f_line, "T:%huC L:%s",Temp0, msg_light);
 80036a8:	8afa      	ldrh	r2, [r7, #22]
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	4914      	ldr	r1, [pc, #80]	; (8003700 <print_measurement+0x160>)
 80036b0:	4814      	ldr	r0, [pc, #80]	; (8003704 <print_measurement+0x164>)
 80036b2:	f007 fd3b 	bl	800b12c <siprintf>
	sprintf((char *)disp.s_line, "P:%humW",moc);
 80036b6:	8abb      	ldrh	r3, [r7, #20]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4913      	ldr	r1, [pc, #76]	; (8003708 <print_measurement+0x168>)
 80036bc:	4813      	ldr	r0, [pc, #76]	; (800370c <print_measurement+0x16c>)
 80036be:	f007 fd35 	bl	800b12c <siprintf>
	lcd_display(&disp);
 80036c2:	4813      	ldr	r0, [pc, #76]	; (8003710 <print_measurement+0x170>)
 80036c4:	f7ff fcd0 	bl	8003068 <lcd_display>

//	HAL_UART_Transmit()//


}
 80036c8:	bf00      	nop
 80036ca:	3724      	adds	r7, #36	; 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}
 80036d0:	14170d19 	.word	0x14170d19
 80036d4:	3e7788eb 	.word	0x3e7788eb
 80036d8:	6fb4c3c2 	.word	0x6fb4c3c2
 80036dc:	3f2eafee 	.word	0x3f2eafee
 80036e0:	6edeb890 	.word	0x6edeb890
 80036e4:	3f527ffd 	.word	0x3f527ffd
 80036e8:	66666666 	.word	0x66666666
 80036ec:	40711266 	.word	0x40711266
 80036f0:	009c4000 	.word	0x009c4000
 80036f4:	3ff00000 	.word	0x3ff00000
 80036f8:	0800bf70 	.word	0x0800bf70
 80036fc:	0800bf78 	.word	0x0800bf78
 8003700:	0800bf80 	.word	0x0800bf80
 8003704:	20000665 	.word	0x20000665
 8003708:	0800bf8c 	.word	0x0800bf8c
 800370c:	20000676 	.word	0x20000676
 8003710:	20000664 	.word	0x20000664

08003714 <light_correctness>:

void light_correctness(uint16_t raw2, int j){
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	80fb      	strh	r3, [r7, #6]
	if(raw2>1000){
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003726:	d903      	bls.n	8003730 <light_correctness+0x1c>
			set_colour(j, 150); //party mode when it's dark
 8003728:	2196      	movs	r1, #150	; 0x96
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f7ff fe62 	bl	80033f4 <set_colour>
	}
	if(raw2<1000){
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003736:	d203      	bcs.n	8003740 <light_correctness+0x2c>
	  		 set_colour(1, 70); //white light when it's bright
 8003738:	2146      	movs	r1, #70	; 0x46
 800373a:	2001      	movs	r0, #1
 800373c:	f7ff fe5a 	bl	80033f4 <set_colour>
	}
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <measurement_light>:

uint8_t neopoxel_transmitting(){
	return (TIM4->DIER & TIM_DIER_UIE) && 1;
}

void measurement_light(void){ //red light while printing measurement
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
	for(int z=0; z<70; z++){
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	e009      	b.n	8003768 <measurement_light+0x20>
		set_colour(2,z);
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	2002      	movs	r0, #2
 8003758:	f7ff fe4c 	bl	80033f4 <set_colour>
		HAL_Delay(15);
 800375c:	200f      	movs	r0, #15
 800375e:	f000 fe41 	bl	80043e4 <HAL_Delay>
	for(int z=0; z<70; z++){
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3301      	adds	r3, #1
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b45      	cmp	r3, #69	; 0x45
 800376c:	ddf2      	ble.n	8003754 <measurement_light+0xc>
	}
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800377e:	f000 fdb5 	bl	80042ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003782:	f000 f8a1 	bl	80038c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003786:	f7ff fadd 	bl	8002d44 <MX_GPIO_Init>
  MX_ADC1_Init();
 800378a:	f7ff f94f 	bl	8002a2c <MX_ADC1_Init>
  MX_TIM4_Init();
 800378e:	f000 fb59 	bl	8003e44 <MX_TIM4_Init>
  MX_I2C1_Init();
 8003792:	f7ff fb5f 	bl	8002e54 <MX_I2C1_Init>
  MX_ADC2_Init();
 8003796:	f7ff f9bf 	bl	8002b18 <MX_ADC2_Init>
  MX_BlueNRG_MS_Init();
 800379a:	f7fd fbcd 	bl	8000f38 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  Neopixel_setup(); //start for LEDs
 800379e:	f7ff fcef 	bl	8003180 <Neopixel_setup>
  disp.addr = (0x27 << 1);
 80037a2:	4b42      	ldr	r3, [pc, #264]	; (80038ac <main+0x134>)
 80037a4:	224e      	movs	r2, #78	; 0x4e
 80037a6:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 80037a8:	4b40      	ldr	r3, [pc, #256]	; (80038ac <main+0x134>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 80037b0:	483e      	ldr	r0, [pc, #248]	; (80038ac <main+0x134>)
 80037b2:	f7ff fbd3 	bl	8002f5c <lcd_init>
  sprintf((char *)disp.f_line, "Press button to");
 80037b6:	4a3e      	ldr	r2, [pc, #248]	; (80038b0 <main+0x138>)
 80037b8:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <main+0x13c>)
 80037ba:	4614      	mov	r4, r2
 80037bc:	461d      	mov	r5, r3
 80037be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c0:	6020      	str	r0, [r4, #0]
 80037c2:	6061      	str	r1, [r4, #4]
 80037c4:	60a2      	str	r2, [r4, #8]
 80037c6:	60e3      	str	r3, [r4, #12]
  sprintf((char *)disp.s_line, "see measurements");
 80037c8:	4b38      	ldr	r3, [pc, #224]	; (80038ac <main+0x134>)
 80037ca:	4a3b      	ldr	r2, [pc, #236]	; (80038b8 <main+0x140>)
 80037cc:	f103 0512 	add.w	r5, r3, #18
 80037d0:	4614      	mov	r4, r2
 80037d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d4:	6028      	str	r0, [r5, #0]
 80037d6:	6069      	str	r1, [r5, #4]
 80037d8:	60aa      	str	r2, [r5, #8]
 80037da:	60eb      	str	r3, [r5, #12]
 80037dc:	7823      	ldrb	r3, [r4, #0]
 80037de:	742b      	strb	r3, [r5, #16]
  lcd_display(&disp);
 80037e0:	4832      	ldr	r0, [pc, #200]	; (80038ac <main+0x134>)
 80037e2:	f7ff fc41 	bl	8003068 <lcd_display>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int j=2; j<8; j++){ //loop for changing colors when it's dark
 80037e6:	2302      	movs	r3, #2
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	e058      	b.n	800389e <main+0x126>

	  // Test: set gpio pin high - start timing
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET );
 80037ec:	2201      	movs	r2, #1
 80037ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f6:	f002 fc25 	bl	8006044 <HAL_GPIO_WritePin>

	  // get adc value
	  HAL_ADC_Start(&hadc1);
 80037fa:	4830      	ldr	r0, [pc, #192]	; (80038bc <main+0x144>)
 80037fc:	f001 f94c 	bl	8004a98 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8003800:	f04f 31ff 	mov.w	r1, #4294967295
 8003804:	482d      	ldr	r0, [pc, #180]	; (80038bc <main+0x144>)
 8003806:	f001 fa01 	bl	8004c0c <HAL_ADC_PollForConversion>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <main+0xa2>
	  {
	  	  raw = HAL_ADC_GetValue(&hadc1);
 8003810:	482a      	ldr	r0, [pc, #168]	; (80038bc <main+0x144>)
 8003812:	f001 facb 	bl	8004dac <HAL_ADC_GetValue>
 8003816:	4603      	mov	r3, r0
 8003818:	84fb      	strh	r3, [r7, #38]	; 0x26

	  }
	  // test: set GPIO pin low - stop timing
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET );
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003824:	f002 fc0e 	bl	8006044 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET );//------------------
 8003828:	2201      	movs	r2, #1
 800382a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800382e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003832:	f002 fc07 	bl	8006044 <HAL_GPIO_WritePin>
	  // get adc value
	  HAL_ADC_Start(&hadc2);
 8003836:	4822      	ldr	r0, [pc, #136]	; (80038c0 <main+0x148>)
 8003838:	f001 f92e 	bl	8004a98 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 800383c:	f04f 31ff 	mov.w	r1, #4294967295
 8003840:	481f      	ldr	r0, [pc, #124]	; (80038c0 <main+0x148>)
 8003842:	f001 f9e3 	bl	8004c0c <HAL_ADC_PollForConversion>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <main+0xde>
	  {
	  	  raw2 = HAL_ADC_GetValue(&hadc2);
 800384c:	481c      	ldr	r0, [pc, #112]	; (80038c0 <main+0x148>)
 800384e:	f001 faad 	bl	8004dac <HAL_ADC_GetValue>
 8003852:	4603      	mov	r3, r0
 8003854:	84bb      	strh	r3, [r7, #36]	; 0x24
	  }
  	  light_correctness(raw2, j); //white light when it's bright and party mode when it's dark
 8003856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003858:	6a39      	ldr	r1, [r7, #32]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ff5a 	bl	8003714 <light_correctness>

	  // test: set GPIO pin low - stop timing
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8003860:	2200      	movs	r2, #0
 8003862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800386a:	f002 fbeb 	bl	8006044 <HAL_GPIO_WritePin>

	  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 800386e:	e007      	b.n	8003880 <main+0x108>
		  print_measurement(raw, raw2, msg); //prints measurements
 8003870:	463a      	mov	r2, r7
 8003872:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003874:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fe92 	bl	80035a0 <print_measurement>
		  measurement_light(); // red light
 800387c:	f7ff ff64 	bl	8003748 <measurement_light>
	  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==0){
 8003880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003884:	480f      	ldr	r0, [pc, #60]	; (80038c4 <main+0x14c>)
 8003886:	f002 fbc5 	bl	8006014 <HAL_GPIO_ReadPin>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ef      	beq.n	8003870 <main+0xf8>
	  }
	  HAL_Delay(400); //delay needed for proper change of colors in party mode
 8003890:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003894:	f000 fda6 	bl	80043e4 <HAL_Delay>
	  for(int j=2; j<8; j++){ //loop for changing colors when it's dark
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	3301      	adds	r3, #1
 800389c:	623b      	str	r3, [r7, #32]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	2b07      	cmp	r3, #7
 80038a2:	dda3      	ble.n	80037ec <main+0x74>
	  }//end for

    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80038a4:	f7fd fbf0 	bl	8001088 <MX_BlueNRG_MS_Process>
	  for(int j=2; j<8; j++){ //loop for changing colors when it's dark
 80038a8:	e79d      	b.n	80037e6 <main+0x6e>
 80038aa:	bf00      	nop
 80038ac:	20000664 	.word	0x20000664
 80038b0:	20000665 	.word	0x20000665
 80038b4:	0800bf94 	.word	0x0800bf94
 80038b8:	0800bfa4 	.word	0x0800bfa4
 80038bc:	2000057c 	.word	0x2000057c
 80038c0:	20000518 	.word	0x20000518
 80038c4:	48000800 	.word	0x48000800

080038c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b0b8      	sub	sp, #224	; 0xe0
 80038cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038d2:	2244      	movs	r2, #68	; 0x44
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f007 fbc7 	bl	800b06a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038ec:	463b      	mov	r3, r7
 80038ee:	2288      	movs	r2, #136	; 0x88
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f007 fbb9 	bl	800b06a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038f8:	2302      	movs	r3, #2
 80038fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003906:	2310      	movs	r3, #16
 8003908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800390c:	2302      	movs	r3, #2
 800390e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003912:	2302      	movs	r3, #2
 8003914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003918:	2301      	movs	r3, #1
 800391a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800391e:	230a      	movs	r3, #10
 8003920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003924:	2307      	movs	r3, #7
 8003926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800392a:	2302      	movs	r3, #2
 800392c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003930:	2302      	movs	r3, #2
 8003932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800393a:	4618      	mov	r0, r3
 800393c:	f002 ffca 	bl	80068d4 <HAL_RCC_OscConfig>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003946:	f000 f8ab 	bl	8003aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800394a:	230f      	movs	r3, #15
 800394c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003950:	2303      	movs	r3, #3
 8003952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800396c:	2104      	movs	r1, #4
 800396e:	4618      	mov	r0, r3
 8003970:	f003 fb96 	bl	80070a0 <HAL_RCC_ClockConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800397a:	f000 f891 	bl	8003aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800397e:	f244 0342 	movw	r3, #16450	; 0x4042
 8003982:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003984:	2300      	movs	r3, #0
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003988:	2300      	movs	r3, #0
 800398a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800398c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003990:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003992:	2302      	movs	r3, #2
 8003994:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800399a:	2308      	movs	r3, #8
 800399c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800399e:	2307      	movs	r3, #7
 80039a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80039a2:	2302      	movs	r3, #2
 80039a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80039a6:	2302      	movs	r3, #2
 80039a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80039aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ae:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039b0:	463b      	mov	r3, r7
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 fd78 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80039be:	f000 f86f 	bl	8003aa0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80039c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039c6:	f002 ff2f 	bl	8006828 <HAL_PWREx_ControlVoltageScaling>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80039d0:	f000 f866 	bl	8003aa0 <Error_Handler>
  }
}
 80039d4:	bf00      	nop
 80039d6:	37e0      	adds	r7, #224	; 0xe0
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <TIM4_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM4_IRQHandler(void){
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0

	TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6113      	str	r3, [r2, #16]

		if(pos<sizeof(LED_data)){
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <TIM4_IRQHandler+0xa4>)
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	2b17      	cmp	r3, #23
 80039f2:	d830      	bhi.n	8003a56 <TIM4_IRQHandler+0x7a>
			if(LED_data[pos] & mask){
 80039f4:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <TIM4_IRQHandler+0xa4>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <TIM4_IRQHandler+0xa8>)
 80039fc:	5c9a      	ldrb	r2, [r3, r2]
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <TIM4_IRQHandler+0xac>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	4013      	ands	r3, r2
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <TIM4_IRQHandler+0x40>
				TIM4->CCR1 = high_CCR1;
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <TIM4_IRQHandler+0xb0>)
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a10:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->ARR = high_ARR;
 8003a12:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <TIM4_IRQHandler+0xb4>)
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a1a:	e007      	b.n	8003a2c <TIM4_IRQHandler+0x50>
			}else{
				TIM4->CCR1 = low_CCR1;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <TIM4_IRQHandler+0xb8>)
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->ARR = low_ARR;
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <TIM4_IRQHandler+0xbc>)
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
			}
			if(mask==1){
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <TIM4_IRQHandler+0xac>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d109      	bne.n	8003a48 <TIM4_IRQHandler+0x6c>
				mask = 0B10000000;
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <TIM4_IRQHandler+0xac>)
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	701a      	strb	r2, [r3, #0]
				pos+=1;
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <TIM4_IRQHandler+0xa4>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <TIM4_IRQHandler+0xa4>)
 8003a44:	801a      	strh	r2, [r3, #0]
		}else{
			TIM4->CCR1 = 0; //set to zero so that pin stays low
			TIM4->ARR = treset_ARR; //set to timing for reset LEDs
			TIM4->DIER &= ~TIM_DIER_UIE; //disable interrupt flag to end transmission.
		}
}
 8003a46:	e013      	b.n	8003a70 <TIM4_IRQHandler+0x94>
			}else mask = mask >> 1;
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <TIM4_IRQHandler+0xac>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <TIM4_IRQHandler+0xac>)
 8003a52:	701a      	strb	r2, [r3, #0]
}
 8003a54:	e00c      	b.n	8003a70 <TIM4_IRQHandler+0x94>
			TIM4->CCR1 = 0; //set to zero so that pin stays low
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->ARR = treset_ARR; //set to timing for reset LEDs
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <TIM4_IRQHandler+0xc0>)
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->DIER &= ~TIM_DIER_UIE; //disable interrupt flag to end transmission.
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <TIM4_IRQHandler+0xa0>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	60d3      	str	r3, [r2, #12]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	20000632 	.word	0x20000632
 8003a84:	20000634 	.word	0x20000634
 8003a88:	20000002 	.word	0x20000002
 8003a8c:	20000660 	.word	0x20000660
 8003a90:	20000652 	.word	0x20000652
 8003a94:	2000064c 	.word	0x2000064c
 8003a98:	2000064e 	.word	0x2000064e
 8003a9c:	20000650 	.word	0x20000650

08003aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aa6:	e7fe      	b.n	8003aa6 <Error_Handler+0x6>

08003aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_MspInit+0x44>)
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <HAL_MspInit+0x44>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_MspInit+0x44>)
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_MspInit+0x44>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	4a08      	ldr	r2, [pc, #32]	; (8003aec <HAL_MspInit+0x44>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_MspInit+0x44>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000

08003af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <NMI_Handler+0x4>

08003af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003afa:	e7fe      	b.n	8003afa <HardFault_Handler+0x4>

08003afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <MemManage_Handler+0x4>

08003b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <BusFault_Handler+0x4>

08003b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <UsageFault_Handler+0x4>

08003b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b3c:	f000 fc32 	bl	80043a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003b48:	4802      	ldr	r0, [pc, #8]	; (8003b54 <EXTI0_IRQHandler+0x10>)
 8003b4a:	f001 ff97 	bl	8005a7c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000510 	.word	0x20000510

08003b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_12);
 8003b5c:	4804      	ldr	r0, [pc, #16]	; (8003b70 <EXTI15_10_IRQHandler+0x18>)
 8003b5e:	f001 ff8d 	bl	8005a7c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003b62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b66:	f002 fa9f 	bl	80060a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000010 	.word	0x20000010

08003b74 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <BSP_SPI1_Init+0x54>)
 8003b80:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <BSP_SPI1_Init+0x58>)
 8003b82:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <BSP_SPI1_Init+0x5c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	4911      	ldr	r1, [pc, #68]	; (8003bd0 <BSP_SPI1_Init+0x5c>)
 8003b8c:	600a      	str	r2, [r1, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d114      	bne.n	8003bbc <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003b92:	480d      	ldr	r0, [pc, #52]	; (8003bc8 <BSP_SPI1_Init+0x54>)
 8003b94:	f004 fbf8 	bl	8008388 <HAL_SPI_GetState>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10e      	bne.n	8003bbc <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8003b9e:	480a      	ldr	r0, [pc, #40]	; (8003bc8 <BSP_SPI1_Init+0x54>)
 8003ba0:	f000 f882 	bl	8003ca8 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003baa:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <BSP_SPI1_Init+0x54>)
 8003bac:	f000 f83a 	bl	8003c24 <MX_SPI1_Init>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8003bb6:	f06f 0307 	mvn.w	r3, #7
 8003bba:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000688 	.word	0x20000688
 8003bcc:	40013000 	.word	0x40013000
 8003bd0:	200001f0 	.word	0x200001f0

08003bd4 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	4806      	ldr	r0, [pc, #24]	; (8003c10 <BSP_SPI1_SendRecv+0x3c>)
 8003bf6:	f004 f9b4 	bl	8007f62 <HAL_SPI_TransmitReceive>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003c00:	f06f 0305 	mvn.w	r3, #5
 8003c04:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003c06:	697b      	ldr	r3, [r7, #20]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000688 	.word	0x20000688

08003c14 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003c18:	f000 fbd8 	bl	80043cc <HAL_GetTick>
 8003c1c:	4603      	mov	r3, r0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <MX_SPI1_Init+0x80>)
 8003c34:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c3c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c4a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c5e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2207      	movs	r2, #7
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2208      	movs	r2, #8
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f004 f8bc 	bl	8007e08 <HAL_SPI_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40013000 	.word	0x40013000

08003ca8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cb0:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	4a2b      	ldr	r2, [pc, #172]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cba:	6613      	str	r3, [r2, #96]	; 0x60
 8003cbc:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd4:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <SPI1_MspInit+0xbc>)
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003cf8:	2340      	movs	r3, #64	; 0x40
 8003cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d04:	2303      	movs	r3, #3
 8003d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003d08:	2305      	movs	r3, #5
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4619      	mov	r1, r3
 8003d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d16:	f001 fee1 	bl	8005adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d26:	2303      	movs	r3, #3
 8003d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003d2e:	f107 0314 	add.w	r3, r7, #20
 8003d32:	4619      	mov	r1, r3
 8003d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d38:	f001 fed0 	bl	8005adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	2302      	movs	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	4619      	mov	r1, r3
 8003d56:	4804      	ldr	r0, [pc, #16]	; (8003d68 <SPI1_MspInit+0xc0>)
 8003d58:	f001 fec0 	bl	8005adc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	48000400 	.word	0x48000400

08003d6c <_sbrk>:
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <_sbrk+0x5c>)
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <_sbrk+0x60>)
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <_sbrk+0x64>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <_sbrk+0x22>
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <_sbrk+0x64>)
 8003d8a:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <_sbrk+0x68>)
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <_sbrk+0x64>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d207      	bcs.n	8003dac <_sbrk+0x40>
 8003d9c:	f007 f930 	bl	800b000 <__errno>
 8003da0:	4602      	mov	r2, r0
 8003da2:	230c      	movs	r3, #12
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e009      	b.n	8003dc0 <_sbrk+0x54>
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <_sbrk+0x64>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <_sbrk+0x64>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20018000 	.word	0x20018000
 8003dcc:	00000400 	.word	0x00000400
 8003dd0:	200001f4 	.word	0x200001f4
 8003dd4:	200007d0 	.word	0x200007d0

08003dd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <SystemInit+0x64>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <SystemInit+0x64>)
 8003de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <SystemInit+0x68>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <SystemInit+0x68>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <SystemInit+0x68>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <SystemInit+0x68>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <SystemInit+0x68>)
 8003e04:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003e08:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <SystemInit+0x68>)
 8003e10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e14:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <SystemInit+0x68>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <SystemInit+0x68>)
 8003e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <SystemInit+0x68>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <SystemInit+0x64>)
 8003e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e2e:	609a      	str	r2, [r3, #8]
#endif
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000ed00 	.word	0xe000ed00
 8003e40:	40021000 	.word	0x40021000

08003e44 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08e      	sub	sp, #56	; 0x38
 8003e48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e64:	463b      	mov	r3, r7
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	615a      	str	r2, [r3, #20]
 8003e74:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8003e76:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003e78:	4a2d      	ldr	r2, [pc, #180]	; (8003f30 <MX_TIM4_Init+0xec>)
 8003e7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e96:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e9c:	4823      	ldr	r0, [pc, #140]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003e9e:	f004 fbdd 	bl	800865c <HAL_TIM_Base_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003ea8:	f7ff fdfa 	bl	8003aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	481c      	ldr	r0, [pc, #112]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003eba:	f004 fd97 	bl	80089ec <HAL_TIM_ConfigClockSource>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003ec4:	f7ff fdec 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ec8:	4818      	ldr	r0, [pc, #96]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003eca:	f004 fc1e 	bl	800870a <HAL_TIM_PWM_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ed4:	f7ff fde4 	bl	8003aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4811      	ldr	r0, [pc, #68]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003ee8:	f005 fa44 	bl	8009374 <HAL_TIMEx_MasterConfigSynchronization>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003ef2:	f7ff fdd5 	bl	8003aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ef6:	2360      	movs	r3, #96	; 0x60
 8003ef8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f06:	463b      	mov	r3, r7
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4807      	ldr	r0, [pc, #28]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003f0e:	f004 fc5d 	bl	80087cc <HAL_TIM_PWM_ConfigChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003f18:	f7ff fdc2 	bl	8003aa0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8003f1c:	4803      	ldr	r0, [pc, #12]	; (8003f2c <MX_TIM4_Init+0xe8>)
 8003f1e:	f000 f829 	bl	8003f74 <HAL_TIM_MspPostInit>

}
 8003f22:	bf00      	nop
 8003f24:	3738      	adds	r7, #56	; 0x38
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200006ec 	.word	0x200006ec
 8003f30:	40000800 	.word	0x40000800

08003f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <HAL_TIM_Base_MspInit+0x38>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10b      	bne.n	8003f5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_TIM_Base_MspInit+0x3c>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_TIM_Base_MspInit+0x3c>)
 8003f4c:	f043 0304 	orr.w	r3, r3, #4
 8003f50:	6593      	str	r3, [r2, #88]	; 0x58
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HAL_TIM_Base_MspInit+0x3c>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	60da      	str	r2, [r3, #12]
 8003f8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_TIM_MspPostInit+0x64>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d11b      	bne.n	8003fce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_TIM_MspPostInit+0x68>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_TIM_MspPostInit+0x68>)
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_TIM_MspPostInit+0x68>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fae:	2340      	movs	r3, #64	; 0x40
 8003fb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc2:	f107 030c 	add.w	r3, r7, #12
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <HAL_TIM_MspPostInit+0x6c>)
 8003fca:	f001 fd87 	bl	8005adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003fce:	bf00      	nop
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	48000400 	.word	0x48000400

08003fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800401c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fe8:	f7ff fef6 	bl	8003dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fee:	e003      	b.n	8003ff8 <LoopCopyDataInit>

08003ff0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ff2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ff4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ff6:	3104      	adds	r1, #4

08003ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ff8:	480a      	ldr	r0, [pc, #40]	; (8004024 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ffc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ffe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004000:	d3f6      	bcc.n	8003ff0 <CopyDataInit>
	ldr	r2, =_sbss
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004004:	e002      	b.n	800400c <LoopFillZerobss>

08004006 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004006:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004008:	f842 3b04 	str.w	r3, [r2], #4

0800400c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <LoopForever+0x16>)
	cmp	r2, r3
 800400e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004010:	d3f9      	bcc.n	8004006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004012:	f006 fffb 	bl	800b00c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004016:	f7ff fbaf 	bl	8003778 <main>

0800401a <LoopForever>:

LoopForever:
    b LoopForever
 800401a:	e7fe      	b.n	800401a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800401c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004020:	0800c05c 	.word	0x0800c05c
	ldr	r0, =_sdata
 8004024:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004028:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 800402c:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8004030:	200007d0 	.word	0x200007d0

08004034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004034:	e7fe      	b.n	8004034 <ADC1_2_IRQHandler>
	...

08004038 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <BSP_LED_Init+0x20>)
 8004046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	0800c000 	.word	0x0800c000

0800405c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <BSP_LED_Toggle+0x28>)
 800406a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fffd 	bl	8006074 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000008 	.word	0x20000008

08004088 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	460a      	mov	r2, r1
 80040a2:	71fb      	strb	r3, [r7, #7]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4a1f      	ldr	r2, [pc, #124]	; (800412c <BSP_PB_Init+0x94>)
 80040b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b4:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80040b6:	79bb      	ldrb	r3, [r7, #6]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d131      	bne.n	8004120 <BSP_PB_Init+0x88>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <BSP_PB_Init+0x98>)
 80040c2:	1898      	adds	r0, r3, r2
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <BSP_PB_Init+0x9c>)
 80040c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f001 fcc0 	bl	8005a52 <HAL_EXTI_GetHandle>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <BSP_PB_Init+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80040d8:	f06f 0303 	mvn.w	r3, #3
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e01f      	b.n	8004120 <BSP_PB_Init+0x88>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4a12      	ldr	r2, [pc, #72]	; (8004130 <BSP_PB_Init+0x98>)
 80040e6:	1898      	adds	r0, r3, r2
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <BSP_PB_Init+0xa0>)
 80040ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f0:	461a      	mov	r2, r3
 80040f2:	2100      	movs	r1, #0
 80040f4:	f001 fc93 	bl	8005a1e <HAL_EXTI_RegisterCallback>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <BSP_PB_Init+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80040fe:	f06f 0303 	mvn.w	r3, #3
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e00c      	b.n	8004120 <BSP_PB_Init+0x88>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004106:	2028      	movs	r0, #40	; 0x28
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <BSP_PB_Init+0xa4>)
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	2200      	movs	r2, #0
 8004112:	4619      	mov	r1, r3
 8004114:	f001 fc4d 	bl	80059b2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004118:	2328      	movs	r3, #40	; 0x28
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fc65 	bl	80059ea <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	0800c004 	.word	0x0800c004
 8004130:	20000010 	.word	0x20000010
 8004134:	0800c008 	.word	0x0800c008
 8004138:	0800c00c 	.word	0x0800c00c
 800413c:	0800c010 	.word	0x0800c010

08004140 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4a09      	ldr	r2, [pc, #36]	; (8004174 <BSP_PB_GetState+0x34>)
 800414e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004152:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f001 ff5b 	bl	8006014 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	2000000c 	.word	0x2000000c

08004178 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800417c:	2000      	movs	r0, #0
 800417e:	f7fd fe87 	bl	8001e90 <BSP_PB_Callback>
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}

08004186 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d903      	bls.n	80041b0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80041a8:	f06f 0301 	mvn.w	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e01c      	b.n	80041ea <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80041b0:	79fa      	ldrb	r2, [r7, #7]
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	490f      	ldr	r1, [pc, #60]	; (80041f4 <BSP_COM_Init+0x60>)
 80041b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80041ba:	490f      	ldr	r1, [pc, #60]	; (80041f8 <BSP_COM_Init+0x64>)
 80041bc:	01db      	lsls	r3, r3, #7
 80041be:	440b      	add	r3, r1
 80041c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	01db      	lsls	r3, r3, #7
 80041c6:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <BSP_COM_Init+0x64>)
 80041c8:	4413      	add	r3, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f84a 	bl	8004264 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <BSP_COM_Init+0x64>)
 80041d6:	4413      	add	r3, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f80f 	bl	80041fc <MX_USART2_UART_Init>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80041e4:	f06f 0303 	mvn.w	r3, #3
 80041e8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000018 	.word	0x20000018
 80041f8:	20000738 	.word	0x20000738

080041fc <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <MX_USART2_UART_Init+0x64>)
 800420c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004214:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	220c      	movs	r2, #12
 800422c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f005 f91c 	bl	8009484 <HAL_UART_Init>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40004400 	.word	0x40004400

08004264 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800426c:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <USART2_MspInit+0x84>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <USART2_MspInit+0x84>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <USART2_MspInit+0x84>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <USART2_MspInit+0x84>)
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <USART2_MspInit+0x84>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004290:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <USART2_MspInit+0x84>)
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800429c:	2304      	movs	r3, #4
 800429e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a8:	2303      	movs	r3, #3
 80042aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80042ac:	2307      	movs	r3, #7
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ba:	f001 fc0f 	bl	8005adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80042be:	2308      	movs	r3, #8
 80042c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c2:	2302      	movs	r3, #2
 80042c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ca:	2303      	movs	r3, #3
 80042cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80042ce:	2307      	movs	r3, #7
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	4619      	mov	r1, r3
 80042d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042dc:	f001 fbfe 	bl	8005adc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80042e0:	bf00      	nop
 80042e2:	3728      	adds	r7, #40	; 0x28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000

080042ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_Init+0x3c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <HAL_Init+0x3c>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004302:	2003      	movs	r0, #3
 8004304:	f001 fb4a 	bl	800599c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004308:	2000      	movs	r0, #0
 800430a:	f000 f80f 	bl	800432c <HAL_InitTick>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	71fb      	strb	r3, [r7, #7]
 8004318:	e001      	b.n	800431e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800431a:	f7ff fbc5 	bl	8003aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800431e:	79fb      	ldrb	r3, [r7, #7]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40022000 	.word	0x40022000

0800432c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_InitTick+0x6c>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d023      	beq.n	8004388 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004340:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_InitTick+0x70>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_InitTick+0x6c>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4619      	mov	r1, r3
 800434a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800434e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	4618      	mov	r0, r3
 8004358:	f001 fb55 	bl	8005a06 <HAL_SYSTICK_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b0f      	cmp	r3, #15
 8004366:	d809      	bhi.n	800437c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004368:	2200      	movs	r2, #0
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	f001 fb1f 	bl	80059b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004374:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <HAL_InitTick+0x74>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e007      	b.n	800438c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e004      	b.n	800438c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	e001      	b.n	800438c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000020 	.word	0x20000020
 800439c:	20000004 	.word	0x20000004
 80043a0:	2000001c 	.word	0x2000001c

080043a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_IncTick+0x20>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_IncTick+0x24>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4413      	add	r3, r2
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <HAL_IncTick+0x24>)
 80043b6:	6013      	str	r3, [r2, #0]
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000020 	.word	0x20000020
 80043c8:	200007b8 	.word	0x200007b8

080043cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return uwTick;
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_GetTick+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	200007b8 	.word	0x200007b8

080043e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043ec:	f7ff ffee 	bl	80043cc <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d005      	beq.n	800440a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_Delay+0x40>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800440a:	bf00      	nop
 800440c:	f7ff ffde 	bl	80043cc <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	429a      	cmp	r2, r3
 800441a:	d8f7      	bhi.n	800440c <HAL_Delay+0x28>
  {
  }
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000020 	.word	0x20000020

08004428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3360      	adds	r3, #96	; 0x60
 80044a2:	461a      	mov	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <LL_ADC_SetOffset+0x44>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	4313      	orrs	r3, r2
 80044c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	03fff000 	.word	0x03fff000

080044d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3360      	adds	r3, #96	; 0x60
 80044e6:	461a      	mov	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3360      	adds	r3, #96	; 0x60
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	431a      	orrs	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3330      	adds	r3, #48	; 0x30
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	4413      	add	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	211f      	movs	r1, #31
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	0e9b      	lsrs	r3, r3, #26
 8004598:	f003 011f 	and.w	r1, r3, #31
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	431a      	orrs	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045ac:	bf00      	nop
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3314      	adds	r3, #20
 80045c8:	461a      	mov	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	0e5b      	lsrs	r3, r3, #25
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	0d1b      	lsrs	r3, r3, #20
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2107      	movs	r1, #7
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	401a      	ands	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	0d1b      	lsrs	r3, r3, #20
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	431a      	orrs	r2, r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0318 	and.w	r3, r3, #24
 8004632:	4908      	ldr	r1, [pc, #32]	; (8004654 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004634:	40d9      	lsrs	r1, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	400b      	ands	r3, r1
 800463a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463e:	431a      	orrs	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	0007ffff 	.word	0x0007ffff

08004658 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 031f 	and.w	r3, r3, #31
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80046a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6093      	str	r3, [r2, #8]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c8:	d101      	bne.n	80046ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80046ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004718:	d101      	bne.n	800471e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800473c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004740:	f043 0201 	orr.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <LL_ADC_IsEnabled+0x18>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <LL_ADC_IsEnabled+0x1a>
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800478a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800478e:	f043 0204 	orr.w	r2, r3, #4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d101      	bne.n	80047ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d101      	bne.n	80047e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e134      	b.n	8004a74 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fe f9e1 	bl	8002be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff3f 	bl	80046b4 <LL_ADC_IsDeepPowerDownEnabled>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff25 	bl	8004690 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff ff5a 	bl	8004704 <LL_ADC_IsInternalRegulatorEnabled>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d113      	bne.n	800487e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff3e 	bl	80046dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004860:	4b86      	ldr	r3, [pc, #536]	; (8004a7c <HAL_ADC_Init+0x28c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	4a86      	ldr	r2, [pc, #536]	; (8004a80 <HAL_ADC_Init+0x290>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004870:	e002      	b.n	8004878 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	3b01      	subs	r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f9      	bne.n	8004872 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ff3e 	bl	8004704 <LL_ADC_IsInternalRegulatorEnabled>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f043 0210 	orr.w	r2, r3, #16
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff ff77 	bl	80047a2 <LL_ADC_REG_IsConversionOngoing>
 80048b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 80cf 	bne.w	8004a62 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 80cb 	bne.w	8004a62 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048d4:	f043 0202 	orr.w	r2, r3, #2
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff37 	bl	8004754 <LL_ADC_IsEnabled>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d115      	bne.n	8004918 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048ec:	4865      	ldr	r0, [pc, #404]	; (8004a84 <HAL_ADC_Init+0x294>)
 80048ee:	f7ff ff31 	bl	8004754 <LL_ADC_IsEnabled>
 80048f2:	4604      	mov	r4, r0
 80048f4:	4864      	ldr	r0, [pc, #400]	; (8004a88 <HAL_ADC_Init+0x298>)
 80048f6:	f7ff ff2d 	bl	8004754 <LL_ADC_IsEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	431c      	orrs	r4, r3
 80048fe:	4863      	ldr	r0, [pc, #396]	; (8004a8c <HAL_ADC_Init+0x29c>)
 8004900:	f7ff ff28 	bl	8004754 <LL_ADC_IsEnabled>
 8004904:	4603      	mov	r3, r0
 8004906:	4323      	orrs	r3, r4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4619      	mov	r1, r3
 8004912:	485f      	ldr	r0, [pc, #380]	; (8004a90 <HAL_ADC_Init+0x2a0>)
 8004914:	f7ff fd88 	bl	8004428 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	7e5b      	ldrb	r3, [r3, #25]
 800491c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004922:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004928:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800492e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004936:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d106      	bne.n	8004954 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	3b01      	subs	r3, #1
 800494c:	045b      	lsls	r3, r3, #17
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4313      	orrs	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_ADC_Init+0x2a4>)
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	430b      	orrs	r3, r1
 8004982:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ff0a 	bl	80047a2 <LL_ADC_REG_IsConversionOngoing>
 800498e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ff17 	bl	80047c8 <LL_ADC_INJ_IsConversionOngoing>
 800499a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d13d      	bne.n	8004a1e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d13a      	bne.n	8004a1e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80049ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c4:	f023 0302 	bic.w	r3, r3, #2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	430b      	orrs	r3, r1
 80049d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d118      	bne.n	8004a0e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049e6:	f023 0304 	bic.w	r3, r3, #4
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049f8:	4311      	orrs	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049fe:	430a      	orrs	r2, r1
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	611a      	str	r2, [r3, #16]
 8004a0c:	e007      	b.n	8004a1e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10c      	bne.n	8004a40 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f023 010f 	bic.w	r1, r3, #15
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a3e:	e007      	b.n	8004a50 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 020f 	bic.w	r2, r2, #15
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f023 0303 	bic.w	r3, r3, #3
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
 8004a60:	e007      	b.n	8004a72 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f043 0210 	orr.w	r2, r3, #16
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3724      	adds	r7, #36	; 0x24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd90      	pop	{r4, r7, pc}
 8004a7c:	20000004 	.word	0x20000004
 8004a80:	053e2d63 	.word	0x053e2d63
 8004a84:	50040000 	.word	0x50040000
 8004a88:	50040100 	.word	0x50040100
 8004a8c:	50040200 	.word	0x50040200
 8004a90:	50040300 	.word	0x50040300
 8004a94:	fff0c007 	.word	0xfff0c007

08004a98 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aa0:	4857      	ldr	r0, [pc, #348]	; (8004c00 <HAL_ADC_Start+0x168>)
 8004aa2:	f7ff fdd9 	bl	8004658 <LL_ADC_GetMultimode>
 8004aa6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fe78 	bl	80047a2 <LL_ADC_REG_IsConversionOngoing>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 809c 	bne.w	8004bf2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_Start+0x30>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e097      	b.n	8004bf8 <HAL_ADC_Start+0x160>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fd67 	bl	80055a4 <ADC_Enable>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 8083 	bne.w	8004be8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a42      	ldr	r2, [pc, #264]	; (8004c04 <HAL_ADC_Start+0x16c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d002      	beq.n	8004b06 <HAL_ADC_Start+0x6e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	e000      	b.n	8004b08 <HAL_ADC_Start+0x70>
 8004b06:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <HAL_ADC_Start+0x170>)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d002      	beq.n	8004b16 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d106      	bne.n	8004b3e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f023 0206 	bic.w	r2, r3, #6
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	659a      	str	r2, [r3, #88]	; 0x58
 8004b3c:	e002      	b.n	8004b44 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	221c      	movs	r2, #28
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2a      	ldr	r2, [pc, #168]	; (8004c04 <HAL_ADC_Start+0x16c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d002      	beq.n	8004b64 <HAL_ADC_Start+0xcc>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	e000      	b.n	8004b66 <HAL_ADC_Start+0xce>
 8004b64:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_ADC_Start+0x170>)
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d008      	beq.n	8004b80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b05      	cmp	r3, #5
 8004b78:	d002      	beq.n	8004b80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b09      	cmp	r3, #9
 8004b7e:	d114      	bne.n	8004baa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fde9 	bl	800477a <LL_ADC_REG_StartConversion>
 8004ba8:	e025      	b.n	8004bf6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <HAL_ADC_Start+0x16c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d002      	beq.n	8004bc6 <HAL_ADC_Start+0x12e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	e000      	b.n	8004bc8 <HAL_ADC_Start+0x130>
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_ADC_Start+0x170>)
 8004bc8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00f      	beq.n	8004bf6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
 8004be6:	e006      	b.n	8004bf6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004bf0:	e001      	b.n	8004bf6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	50040300 	.word	0x50040300
 8004c04:	50040100 	.word	0x50040100
 8004c08:	50040000 	.word	0x50040000

08004c0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c16:	4862      	ldr	r0, [pc, #392]	; (8004da0 <HAL_ADC_PollForConversion+0x194>)
 8004c18:	f7ff fd1e 	bl	8004658 <LL_ADC_GetMultimode>
 8004c1c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d102      	bne.n	8004c2c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004c26:	2308      	movs	r3, #8
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e02a      	b.n	8004c82 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d002      	beq.n	8004c3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b09      	cmp	r3, #9
 8004c3c:	d111      	bne.n	8004c62 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c50:	f043 0220 	orr.w	r2, r3, #32
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e09d      	b.n	8004d98 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004c60:	e00f      	b.n	8004c82 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c62:	484f      	ldr	r0, [pc, #316]	; (8004da0 <HAL_ADC_PollForConversion+0x194>)
 8004c64:	f7ff fd06 	bl	8004674 <LL_ADC_GetMultiDMATransfer>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e08c      	b.n	8004d98 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004c7e:	2304      	movs	r3, #4
 8004c80:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004c82:	f7ff fba3 	bl	80043cc <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004c88:	e01a      	b.n	8004cc0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d016      	beq.n	8004cc0 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004c92:	f7ff fb9b 	bl	80043cc <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <HAL_ADC_PollForConversion+0x9c>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	f043 0204 	orr.w	r2, r3, #4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e06b      	b.n	8004d98 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0dd      	beq.n	8004c8a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fc2b 	bl	800453a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01c      	beq.n	8004d24 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	7e5b      	ldrb	r3, [r3, #25]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d111      	bne.n	8004d24 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <HAL_ADC_PollForConversion+0x198>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d002      	beq.n	8004d34 <HAL_ADC_PollForConversion+0x128>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	e000      	b.n	8004d36 <HAL_ADC_PollForConversion+0x12a>
 8004d34:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <HAL_ADC_PollForConversion+0x19c>)
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d008      	beq.n	8004d50 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b05      	cmp	r3, #5
 8004d48:	d002      	beq.n	8004d50 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d104      	bne.n	8004d5a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e00c      	b.n	8004d74 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <HAL_ADC_PollForConversion+0x198>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d002      	beq.n	8004d6a <HAL_ADC_PollForConversion+0x15e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	e000      	b.n	8004d6c <HAL_ADC_PollForConversion+0x160>
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <HAL_ADC_PollForConversion+0x19c>)
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d104      	bne.n	8004d84 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2208      	movs	r2, #8
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e008      	b.n	8004d96 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	220c      	movs	r2, #12
 8004d94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	50040300 	.word	0x50040300
 8004da4:	50040100 	.word	0x50040100
 8004da8:	50040000 	.word	0x50040000

08004dac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b0b6      	sub	sp, #216	; 0xd8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x22>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e3c6      	b.n	8005578 <HAL_ADC_ConfigChannel+0x7b0>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fcd3 	bl	80047a2 <LL_ADC_REG_IsConversionOngoing>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 83a7 	bne.w	8005552 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	d824      	bhi.n	8004e56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	3b02      	subs	r3, #2
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d81b      	bhi.n	8004e4e <HAL_ADC_ConfigChannel+0x86>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_ADC_ConfigChannel+0x54>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e35 	.word	0x08004e35
 8004e24:	08004e3d 	.word	0x08004e3d
 8004e28:	08004e45 	.word	0x08004e45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	220c      	movs	r2, #12
 8004e30:	605a      	str	r2, [r3, #4]
          break;
 8004e32:	e011      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2212      	movs	r2, #18
 8004e38:	605a      	str	r2, [r3, #4]
          break;
 8004e3a:	e00d      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2218      	movs	r2, #24
 8004e40:	605a      	str	r2, [r3, #4]
          break;
 8004e42:	e009      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e4a:	605a      	str	r2, [r3, #4]
          break;
 8004e4c:	e004      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2206      	movs	r2, #6
 8004e52:	605a      	str	r2, [r3, #4]
          break;
 8004e54:	e000      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004e56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6859      	ldr	r1, [r3, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f7ff fb7b 	bl	8004560 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fc97 	bl	80047a2 <LL_ADC_REG_IsConversionOngoing>
 8004e74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fca3 	bl	80047c8 <LL_ADC_INJ_IsConversionOngoing>
 8004e82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f040 81a6 	bne.w	80051dc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f040 81a1 	bne.w	80051dc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f7ff fb86 	bl	80045b8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	08db      	lsrs	r3, r3, #3
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6919      	ldr	r1, [r3, #16]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ede:	f7ff fad7 	bl	8004490 <LL_ADC_SetOffset>
 8004ee2:	e17b      	b.n	80051dc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff faf4 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x148>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fae9 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004f06:	4603      	mov	r3, r0
 8004f08:	0e9b      	lsrs	r3, r3, #26
 8004f0a:	f003 021f 	and.w	r2, r3, #31
 8004f0e:	e01e      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x186>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fade 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f26:	fa93 f3a3 	rbit	r3, r3
 8004f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004f3e:	2320      	movs	r3, #32
 8004f40:	e004      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f46:	fab3 f383 	clz	r3, r3
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x19e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	0e9b      	lsrs	r3, r3, #26
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	e018      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x1d0>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004f8a:	2320      	movs	r3, #32
 8004f8c:	e004      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d106      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff faad 	bl	8004504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2101      	movs	r1, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fa91 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x20e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fa86 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	0e9b      	lsrs	r3, r3, #26
 8004fd0:	f003 021f 	and.w	r2, r3, #31
 8004fd4:	e01e      	b.n	8005014 <HAL_ADC_ConfigChannel+0x24c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2101      	movs	r1, #1
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fa7b 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fec:	fa93 f3a3 	rbit	r3, r3
 8004ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004ff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005004:	2320      	movs	r3, #32
 8005006:	e004      	b.n	8005012 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800500c:	fab3 f383 	clz	r3, r3
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_ADC_ConfigChannel+0x264>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0e9b      	lsrs	r3, r3, #26
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	e018      	b.n	800505e <HAL_ADC_ConfigChannel+0x296>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005050:	2320      	movs	r3, #32
 8005052:	e004      	b.n	800505e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005058:	fab3 f383 	clz	r3, r3
 800505c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800505e:	429a      	cmp	r2, r3
 8005060:	d106      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	2101      	movs	r1, #1
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fa4a 	bl	8004504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2102      	movs	r1, #2
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fa2e 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 800507c:	4603      	mov	r3, r0
 800507e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <HAL_ADC_ConfigChannel+0x2d4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2102      	movs	r1, #2
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fa23 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8005092:	4603      	mov	r3, r0
 8005094:	0e9b      	lsrs	r3, r3, #26
 8005096:	f003 021f 	and.w	r2, r3, #31
 800509a:	e01e      	b.n	80050da <HAL_ADC_ConfigChannel+0x312>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fa18 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050b2:	fa93 f3a3 	rbit	r3, r3
 80050b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80050ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80050c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80050ca:	2320      	movs	r3, #32
 80050cc:	e004      	b.n	80050d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80050ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d105      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x32a>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	0e9b      	lsrs	r3, r3, #26
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	e016      	b.n	8005120 <HAL_ADC_ConfigChannel+0x358>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050fe:	fa93 f3a3 	rbit	r3, r3
 8005102:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005106:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800510a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005112:	2320      	movs	r3, #32
 8005114:	e004      	b.n	8005120 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800511a:	fab3 f383 	clz	r3, r3
 800511e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005120:	429a      	cmp	r2, r3
 8005122:	d106      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2200      	movs	r2, #0
 800512a:	2102      	movs	r1, #2
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff f9e9 	bl	8004504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2103      	movs	r1, #3
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff f9cd 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 800513e:	4603      	mov	r3, r0
 8005140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <HAL_ADC_ConfigChannel+0x396>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2103      	movs	r1, #3
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f9c2 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 8005154:	4603      	mov	r3, r0
 8005156:	0e9b      	lsrs	r3, r3, #26
 8005158:	f003 021f 	and.w	r2, r3, #31
 800515c:	e017      	b.n	800518e <HAL_ADC_ConfigChannel+0x3c6>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2103      	movs	r1, #3
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f9b7 	bl	80044d8 <LL_ADC_GetOffsetChannel>
 800516a:	4603      	mov	r3, r0
 800516c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	fa93 f3a3 	rbit	r3, r3
 8005174:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005178:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800517a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005180:	2320      	movs	r3, #32
 8005182:	e003      	b.n	800518c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x3de>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	0e9b      	lsrs	r3, r3, #26
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	e011      	b.n	80051ca <HAL_ADC_ConfigChannel+0x402>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ae:	fa93 f3a3 	rbit	r3, r3
 80051b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80051b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80051b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80051be:	2320      	movs	r3, #32
 80051c0:	e003      	b.n	80051ca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80051c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c4:	fab3 f383 	clz	r3, r3
 80051c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d106      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	2103      	movs	r1, #3
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff f994 	bl	8004504 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff fab7 	bl	8004754 <LL_ADC_IsEnabled>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 813f 	bne.w	800546c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7ff fa08 	bl	8004610 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a8e      	ldr	r2, [pc, #568]	; (8005440 <HAL_ADC_ConfigChannel+0x678>)
 8005206:	4293      	cmp	r3, r2
 8005208:	f040 8130 	bne.w	800546c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x46c>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	0e9b      	lsrs	r3, r3, #26
 8005222:	3301      	adds	r3, #1
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2b09      	cmp	r3, #9
 800522a:	bf94      	ite	ls
 800522c:	2301      	movls	r3, #1
 800522e:	2300      	movhi	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	e019      	b.n	8005268 <HAL_ADC_ConfigChannel+0x4a0>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523c:	fa93 f3a3 	rbit	r3, r3
 8005240:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005244:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800524c:	2320      	movs	r3, #32
 800524e:	e003      	b.n	8005258 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005252:	fab3 f383 	clz	r3, r3
 8005256:	b2db      	uxtb	r3, r3
 8005258:	3301      	adds	r3, #1
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b09      	cmp	r3, #9
 8005260:	bf94      	ite	ls
 8005262:	2301      	movls	r3, #1
 8005264:	2300      	movhi	r3, #0
 8005266:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005268:	2b00      	cmp	r3, #0
 800526a:	d079      	beq.n	8005360 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x4c0>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	0e9b      	lsrs	r3, r3, #26
 800527e:	3301      	adds	r3, #1
 8005280:	069b      	lsls	r3, r3, #26
 8005282:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005286:	e015      	b.n	80052b4 <HAL_ADC_ConfigChannel+0x4ec>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	fa93 f3a3 	rbit	r3, r3
 8005294:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005298:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800529a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80052a0:	2320      	movs	r3, #32
 80052a2:	e003      	b.n	80052ac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	3301      	adds	r3, #1
 80052ae:	069b      	lsls	r3, r3, #26
 80052b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x50c>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	0e9b      	lsrs	r3, r3, #26
 80052c6:	3301      	adds	r3, #1
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2101      	movs	r1, #1
 80052ce:	fa01 f303 	lsl.w	r3, r1, r3
 80052d2:	e017      	b.n	8005304 <HAL_ADC_ConfigChannel+0x53c>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052dc:	fa93 f3a3 	rbit	r3, r3
 80052e0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80052e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80052ec:	2320      	movs	r3, #32
 80052ee:	e003      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80052f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f2:	fab3 f383 	clz	r3, r3
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	3301      	adds	r3, #1
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2101      	movs	r1, #1
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	ea42 0103 	orr.w	r1, r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <HAL_ADC_ConfigChannel+0x562>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	0e9b      	lsrs	r3, r3, #26
 800531a:	3301      	adds	r3, #1
 800531c:	f003 021f 	and.w	r2, r3, #31
 8005320:	4613      	mov	r3, r2
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	4413      	add	r3, r2
 8005326:	051b      	lsls	r3, r3, #20
 8005328:	e018      	b.n	800535c <HAL_ADC_ConfigChannel+0x594>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800533c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005342:	2320      	movs	r3, #32
 8005344:	e003      	b.n	800534e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	fab3 f383 	clz	r3, r3
 800534c:	b2db      	uxtb	r3, r3
 800534e:	3301      	adds	r3, #1
 8005350:	f003 021f 	and.w	r2, r3, #31
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800535c:	430b      	orrs	r3, r1
 800535e:	e080      	b.n	8005462 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <HAL_ADC_ConfigChannel+0x5b4>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	0e9b      	lsrs	r3, r3, #26
 8005372:	3301      	adds	r3, #1
 8005374:	069b      	lsls	r3, r3, #26
 8005376:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800537a:	e015      	b.n	80053a8 <HAL_ADC_ConfigChannel+0x5e0>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	fa93 f3a3 	rbit	r3, r3
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005394:	2320      	movs	r3, #32
 8005396:	e003      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	fab3 f383 	clz	r3, r3
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	069b      	lsls	r3, r3, #26
 80053a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x600>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	0e9b      	lsrs	r3, r3, #26
 80053ba:	3301      	adds	r3, #1
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2101      	movs	r1, #1
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	e017      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x630>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	fa93 f3a3 	rbit	r3, r3
 80053d4:	61fb      	str	r3, [r7, #28]
  return result;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80053e0:	2320      	movs	r3, #32
 80053e2:	e003      	b.n	80053ec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	fab3 f383 	clz	r3, r3
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	3301      	adds	r3, #1
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2101      	movs	r1, #1
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	ea42 0103 	orr.w	r1, r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x65c>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	0e9b      	lsrs	r3, r3, #26
 800540e:	3301      	adds	r3, #1
 8005410:	f003 021f 	and.w	r2, r3, #31
 8005414:	4613      	mov	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4413      	add	r3, r2
 800541a:	3b1e      	subs	r3, #30
 800541c:	051b      	lsls	r3, r3, #20
 800541e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005422:	e01d      	b.n	8005460 <HAL_ADC_ConfigChannel+0x698>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	fa93 f3a3 	rbit	r3, r3
 8005430:	613b      	str	r3, [r7, #16]
  return result;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800543c:	2320      	movs	r3, #32
 800543e:	e005      	b.n	800544c <HAL_ADC_ConfigChannel+0x684>
 8005440:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	fab3 f383 	clz	r3, r3
 800544a:	b2db      	uxtb	r3, r3
 800544c:	3301      	adds	r3, #1
 800544e:	f003 021f 	and.w	r2, r3, #31
 8005452:	4613      	mov	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4413      	add	r3, r2
 8005458:	3b1e      	subs	r3, #30
 800545a:	051b      	lsls	r3, r3, #20
 800545c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005460:	430b      	orrs	r3, r1
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	6892      	ldr	r2, [r2, #8]
 8005466:	4619      	mov	r1, r3
 8005468:	f7ff f8a6 	bl	80045b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b43      	ldr	r3, [pc, #268]	; (8005580 <HAL_ADC_ConfigChannel+0x7b8>)
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d079      	beq.n	800556c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005478:	4842      	ldr	r0, [pc, #264]	; (8005584 <HAL_ADC_ConfigChannel+0x7bc>)
 800547a:	f7fe fffb 	bl	8004474 <LL_ADC_GetCommonPathInternalCh>
 800547e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a40      	ldr	r2, [pc, #256]	; (8005588 <HAL_ADC_ConfigChannel+0x7c0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d12b      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800548c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d125      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a3b      	ldr	r2, [pc, #236]	; (800558c <HAL_ADC_ConfigChannel+0x7c4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_ADC_ConfigChannel+0x6e4>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a3a      	ldr	r2, [pc, #232]	; (8005590 <HAL_ADC_ConfigChannel+0x7c8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d15c      	bne.n	8005566 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054b4:	4619      	mov	r1, r3
 80054b6:	4833      	ldr	r0, [pc, #204]	; (8005584 <HAL_ADC_ConfigChannel+0x7bc>)
 80054b8:	f7fe ffc9 	bl	800444e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80054bc:	4b35      	ldr	r3, [pc, #212]	; (8005594 <HAL_ADC_ConfigChannel+0x7cc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	4a35      	ldr	r2, [pc, #212]	; (8005598 <HAL_ADC_ConfigChannel+0x7d0>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	099a      	lsrs	r2, r3, #6
 80054ca:	4613      	mov	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054d4:	e002      	b.n	80054dc <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b01      	subs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f9      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054e2:	e040      	b.n	8005566 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2c      	ldr	r2, [pc, #176]	; (800559c <HAL_ADC_ConfigChannel+0x7d4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d118      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x758>
 80054ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d112      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a23      	ldr	r2, [pc, #140]	; (800558c <HAL_ADC_ConfigChannel+0x7c4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_ADC_ConfigChannel+0x746>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a21      	ldr	r2, [pc, #132]	; (8005590 <HAL_ADC_ConfigChannel+0x7c8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d12d      	bne.n	800556a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800550e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005516:	4619      	mov	r1, r3
 8005518:	481a      	ldr	r0, [pc, #104]	; (8005584 <HAL_ADC_ConfigChannel+0x7bc>)
 800551a:	f7fe ff98 	bl	800444e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800551e:	e024      	b.n	800556a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_ADC_ConfigChannel+0x7d8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d120      	bne.n	800556c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800552a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11a      	bne.n	800556c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a14      	ldr	r2, [pc, #80]	; (800558c <HAL_ADC_ConfigChannel+0x7c4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d115      	bne.n	800556c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005548:	4619      	mov	r1, r3
 800554a:	480e      	ldr	r0, [pc, #56]	; (8005584 <HAL_ADC_ConfigChannel+0x7bc>)
 800554c:	f7fe ff7f 	bl	800444e <LL_ADC_SetCommonPathInternalCh>
 8005550:	e00c      	b.n	800556c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005564:	e002      	b.n	800556c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800556a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005574:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005578:	4618      	mov	r0, r3
 800557a:	37d8      	adds	r7, #216	; 0xd8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	80080000 	.word	0x80080000
 8005584:	50040300 	.word	0x50040300
 8005588:	c7520000 	.word	0xc7520000
 800558c:	50040000 	.word	0x50040000
 8005590:	50040200 	.word	0x50040200
 8005594:	20000004 	.word	0x20000004
 8005598:	053e2d63 	.word	0x053e2d63
 800559c:	cb840000 	.word	0xcb840000
 80055a0:	80000001 	.word	0x80000001

080055a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff f8cf 	bl	8004754 <LL_ADC_IsEnabled>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d146      	bne.n	800564a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	4b24      	ldr	r3, [pc, #144]	; (8005654 <ADC_Enable+0xb0>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f043 0210 	orr.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	f043 0201 	orr.w	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e032      	b.n	800564c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f89e 	bl	800472c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80055f0:	f7fe feec 	bl	80043cc <HAL_GetTick>
 80055f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055f6:	e021      	b.n	800563c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff f8a9 	bl	8004754 <LL_ADC_IsEnabled>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff f88d 	bl	800472c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005612:	f7fe fedb 	bl	80043cc <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d90d      	bls.n	800563c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	f043 0210 	orr.w	r2, r3, #16
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	f043 0201 	orr.w	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e007      	b.n	800564c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d1d6      	bne.n	80055f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	8000003f 	.word	0x8000003f

08005658 <LL_ADC_IsEnabled>:
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <LL_ADC_IsEnabled+0x18>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <LL_ADC_IsEnabled+0x1a>
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <LL_ADC_REG_IsConversionOngoing>:
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d101      	bne.n	8005696 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b09f      	sub	sp, #124	; 0x7c
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80056be:	2302      	movs	r3, #2
 80056c0:	e08f      	b.n	80057e2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a47      	ldr	r2, [pc, #284]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d102      	bne.n	80056da <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80056d4:	4b46      	ldr	r3, [pc, #280]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	e001      	b.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e072      	b.n	80057e2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ffbd 	bl	800567e <LL_ADC_REG_IsConversionOngoing>
 8005704:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ffb7 	bl	800567e <LL_ADC_REG_IsConversionOngoing>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d154      	bne.n	80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005718:	2b00      	cmp	r3, #0
 800571a:	d151      	bne.n	80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800571c:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800571e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d02c      	beq.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6859      	ldr	r1, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800573a:	035b      	lsls	r3, r3, #13
 800573c:	430b      	orrs	r3, r1
 800573e:	431a      	orrs	r2, r3
 8005740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005742:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005744:	4829      	ldr	r0, [pc, #164]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005746:	f7ff ff87 	bl	8005658 <LL_ADC_IsEnabled>
 800574a:	4604      	mov	r4, r0
 800574c:	4828      	ldr	r0, [pc, #160]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800574e:	f7ff ff83 	bl	8005658 <LL_ADC_IsEnabled>
 8005752:	4603      	mov	r3, r0
 8005754:	431c      	orrs	r4, r3
 8005756:	4828      	ldr	r0, [pc, #160]	; (80057f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005758:	f7ff ff7e 	bl	8005658 <LL_ADC_IsEnabled>
 800575c:	4603      	mov	r3, r0
 800575e:	4323      	orrs	r3, r4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d137      	bne.n	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800576c:	f023 030f 	bic.w	r3, r3, #15
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	6811      	ldr	r1, [r2, #0]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	6892      	ldr	r2, [r2, #8]
 8005778:	430a      	orrs	r2, r1
 800577a:	431a      	orrs	r2, r3
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005780:	e028      	b.n	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800578a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800578e:	4817      	ldr	r0, [pc, #92]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005790:	f7ff ff62 	bl	8005658 <LL_ADC_IsEnabled>
 8005794:	4604      	mov	r4, r0
 8005796:	4816      	ldr	r0, [pc, #88]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005798:	f7ff ff5e 	bl	8005658 <LL_ADC_IsEnabled>
 800579c:	4603      	mov	r3, r0
 800579e:	431c      	orrs	r4, r3
 80057a0:	4815      	ldr	r0, [pc, #84]	; (80057f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80057a2:	f7ff ff59 	bl	8005658 <LL_ADC_IsEnabled>
 80057a6:	4603      	mov	r3, r0
 80057a8:	4323      	orrs	r3, r4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d112      	bne.n	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80057b6:	f023 030f 	bic.w	r3, r3, #15
 80057ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057be:	e009      	b.n	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80057d2:	e000      	b.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	377c      	adds	r7, #124	; 0x7c
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}
 80057ea:	bf00      	nop
 80057ec:	50040000 	.word	0x50040000
 80057f0:	50040100 	.word	0x50040100
 80057f4:	50040300 	.word	0x50040300
 80057f8:	50040200 	.word	0x50040200

080057fc <__NVIC_SetPriorityGrouping>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <__NVIC_SetPriorityGrouping+0x44>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005818:	4013      	ands	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800582e:	4a04      	ldr	r2, [pc, #16]	; (8005840 <__NVIC_SetPriorityGrouping+0x44>)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	60d3      	str	r3, [r2, #12]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <__NVIC_GetPriorityGrouping>:
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <__NVIC_GetPriorityGrouping+0x18>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	f003 0307 	and.w	r3, r3, #7
}
 8005852:	4618      	mov	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00

08005860 <__NVIC_EnableIRQ>:
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	db0b      	blt.n	800588a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	f003 021f 	and.w	r2, r3, #31
 8005878:	4907      	ldr	r1, [pc, #28]	; (8005898 <__NVIC_EnableIRQ+0x38>)
 800587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	2001      	movs	r0, #1
 8005882:	fa00 f202 	lsl.w	r2, r0, r2
 8005886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000e100 	.word	0xe000e100

0800589c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	6039      	str	r1, [r7, #0]
 80058a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	db0a      	blt.n	80058c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	490c      	ldr	r1, [pc, #48]	; (80058e8 <__NVIC_SetPriority+0x4c>)
 80058b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ba:	0112      	lsls	r2, r2, #4
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	440b      	add	r3, r1
 80058c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058c4:	e00a      	b.n	80058dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4908      	ldr	r1, [pc, #32]	; (80058ec <__NVIC_SetPriority+0x50>)
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	3b04      	subs	r3, #4
 80058d4:	0112      	lsls	r2, r2, #4
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	440b      	add	r3, r1
 80058da:	761a      	strb	r2, [r3, #24]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	e000e100 	.word	0xe000e100
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b089      	sub	sp, #36	; 0x24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f1c3 0307 	rsb	r3, r3, #7
 800590a:	2b04      	cmp	r3, #4
 800590c:	bf28      	it	cs
 800590e:	2304      	movcs	r3, #4
 8005910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3304      	adds	r3, #4
 8005916:	2b06      	cmp	r3, #6
 8005918:	d902      	bls.n	8005920 <NVIC_EncodePriority+0x30>
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3b03      	subs	r3, #3
 800591e:	e000      	b.n	8005922 <NVIC_EncodePriority+0x32>
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43da      	mvns	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	401a      	ands	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005938:	f04f 31ff 	mov.w	r1, #4294967295
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	43d9      	mvns	r1, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005948:	4313      	orrs	r3, r2
         );
}
 800594a:	4618      	mov	r0, r3
 800594c:	3724      	adds	r7, #36	; 0x24
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3b01      	subs	r3, #1
 8005964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005968:	d301      	bcc.n	800596e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800596a:	2301      	movs	r3, #1
 800596c:	e00f      	b.n	800598e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800596e:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <SysTick_Config+0x40>)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3b01      	subs	r3, #1
 8005974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005976:	210f      	movs	r1, #15
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	f7ff ff8e 	bl	800589c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <SysTick_Config+0x40>)
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005986:	4b04      	ldr	r3, [pc, #16]	; (8005998 <SysTick_Config+0x40>)
 8005988:	2207      	movs	r2, #7
 800598a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	e000e010 	.word	0xe000e010

0800599c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff ff29 	bl	80057fc <__NVIC_SetPriorityGrouping>
}
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b086      	sub	sp, #24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	4603      	mov	r3, r0
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059c4:	f7ff ff3e 	bl	8005844 <__NVIC_GetPriorityGrouping>
 80059c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	6978      	ldr	r0, [r7, #20]
 80059d0:	f7ff ff8e 	bl	80058f0 <NVIC_EncodePriority>
 80059d4:	4602      	mov	r2, r0
 80059d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ff5d 	bl	800589c <__NVIC_SetPriority>
}
 80059e2:	bf00      	nop
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	4603      	mov	r3, r0
 80059f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff31 	bl	8005860 <__NVIC_EnableIRQ>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ffa2 	bl	8005958 <SysTick_Config>
 8005a14:	4603      	mov	r3, r0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b087      	sub	sp, #28
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	460b      	mov	r3, r1
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d103      	bne.n	8005a3e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	605a      	str	r2, [r3, #4]
      break;
 8005a3c:	e002      	b.n	8005a44 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	75fb      	strb	r3, [r7, #23]
      break;
 8005a42:	bf00      	nop
  }

  return status;
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e003      	b.n	8005a6e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	0c1b      	lsrs	r3, r3, #16
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2201      	movs	r2, #1
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <HAL_EXTI_IRQHandler+0x5c>)
 8005aa6:	4413      	add	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4798      	blx	r3
    }
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40010414 	.word	0x40010414

08005adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005aea:	e17f      	b.n	8005dec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2101      	movs	r1, #1
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8171 	beq.w	8005de6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d00b      	beq.n	8005b24 <HAL_GPIO_Init+0x48>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d007      	beq.n	8005b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b18:	2b11      	cmp	r3, #17
 8005b1a:	d003      	beq.n	8005b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b12      	cmp	r3, #18
 8005b22:	d130      	bne.n	8005b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	2203      	movs	r2, #3
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	43db      	mvns	r3, r3
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4013      	ands	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	f003 0201 	and.w	r2, r3, #1
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d118      	bne.n	8005bc4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005b98:	2201      	movs	r2, #1
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	f003 0201 	and.w	r2, r3, #1
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	2203      	movs	r2, #3
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d003      	beq.n	8005c04 <HAL_GPIO_Init+0x128>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b12      	cmp	r3, #18
 8005c02:	d123      	bne.n	8005c4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	08da      	lsrs	r2, r3, #3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3208      	adds	r2, #8
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	43db      	mvns	r3, r3
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4013      	ands	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	08da      	lsrs	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3208      	adds	r2, #8
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	2203      	movs	r2, #3
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 0203 	and.w	r2, r3, #3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80ac 	beq.w	8005de6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c8e:	4b5e      	ldr	r3, [pc, #376]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c92:	4a5d      	ldr	r2, [pc, #372]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6613      	str	r3, [r2, #96]	; 0x60
 8005c9a:	4b5b      	ldr	r3, [pc, #364]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ca6:	4a59      	ldr	r2, [pc, #356]	; (8005e0c <HAL_GPIO_Init+0x330>)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	3302      	adds	r3, #2
 8005cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	220f      	movs	r2, #15
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cd0:	d025      	beq.n	8005d1e <HAL_GPIO_Init+0x242>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a4e      	ldr	r2, [pc, #312]	; (8005e10 <HAL_GPIO_Init+0x334>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01f      	beq.n	8005d1a <HAL_GPIO_Init+0x23e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a4d      	ldr	r2, [pc, #308]	; (8005e14 <HAL_GPIO_Init+0x338>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d019      	beq.n	8005d16 <HAL_GPIO_Init+0x23a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a4c      	ldr	r2, [pc, #304]	; (8005e18 <HAL_GPIO_Init+0x33c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <HAL_GPIO_Init+0x236>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a4b      	ldr	r2, [pc, #300]	; (8005e1c <HAL_GPIO_Init+0x340>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00d      	beq.n	8005d0e <HAL_GPIO_Init+0x232>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a4a      	ldr	r2, [pc, #296]	; (8005e20 <HAL_GPIO_Init+0x344>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <HAL_GPIO_Init+0x22e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a49      	ldr	r2, [pc, #292]	; (8005e24 <HAL_GPIO_Init+0x348>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d101      	bne.n	8005d06 <HAL_GPIO_Init+0x22a>
 8005d02:	2306      	movs	r3, #6
 8005d04:	e00c      	b.n	8005d20 <HAL_GPIO_Init+0x244>
 8005d06:	2307      	movs	r3, #7
 8005d08:	e00a      	b.n	8005d20 <HAL_GPIO_Init+0x244>
 8005d0a:	2305      	movs	r3, #5
 8005d0c:	e008      	b.n	8005d20 <HAL_GPIO_Init+0x244>
 8005d0e:	2304      	movs	r3, #4
 8005d10:	e006      	b.n	8005d20 <HAL_GPIO_Init+0x244>
 8005d12:	2303      	movs	r3, #3
 8005d14:	e004      	b.n	8005d20 <HAL_GPIO_Init+0x244>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e002      	b.n	8005d20 <HAL_GPIO_Init+0x244>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <HAL_GPIO_Init+0x244>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	f002 0203 	and.w	r2, r2, #3
 8005d26:	0092      	lsls	r2, r2, #2
 8005d28:	4093      	lsls	r3, r2
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d30:	4936      	ldr	r1, [pc, #216]	; (8005e0c <HAL_GPIO_Init+0x330>)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	3302      	adds	r3, #2
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d3e:	4b3a      	ldr	r3, [pc, #232]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d62:	4a31      	ldr	r2, [pc, #196]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005d68:	4b2f      	ldr	r3, [pc, #188]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4013      	ands	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d8c:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d92:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005db6:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <HAL_GPIO_Init+0x34c>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	3301      	adds	r3, #1
 8005dea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	fa22 f303 	lsr.w	r3, r2, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f47f ae78 	bne.w	8005aec <HAL_GPIO_Init+0x10>
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	48000400 	.word	0x48000400
 8005e14:	48000800 	.word	0x48000800
 8005e18:	48000c00 	.word	0x48000c00
 8005e1c:	48001000 	.word	0x48001000
 8005e20:	48001400 	.word	0x48001400
 8005e24:	48001800 	.word	0x48001800
 8005e28:	40010400 	.word	0x40010400

08005e2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005e3a:	e0cd      	b.n	8005fd8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	4013      	ands	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80c0 	beq.w	8005fd2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005e52:	4a68      	ldr	r2, [pc, #416]	; (8005ff4 <HAL_GPIO_DeInit+0x1c8>)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	3302      	adds	r3, #2
 8005e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	220f      	movs	r2, #15
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e7a:	d025      	beq.n	8005ec8 <HAL_GPIO_DeInit+0x9c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a5e      	ldr	r2, [pc, #376]	; (8005ff8 <HAL_GPIO_DeInit+0x1cc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d01f      	beq.n	8005ec4 <HAL_GPIO_DeInit+0x98>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a5d      	ldr	r2, [pc, #372]	; (8005ffc <HAL_GPIO_DeInit+0x1d0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d019      	beq.n	8005ec0 <HAL_GPIO_DeInit+0x94>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a5c      	ldr	r2, [pc, #368]	; (8006000 <HAL_GPIO_DeInit+0x1d4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_GPIO_DeInit+0x90>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a5b      	ldr	r2, [pc, #364]	; (8006004 <HAL_GPIO_DeInit+0x1d8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_GPIO_DeInit+0x8c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a5a      	ldr	r2, [pc, #360]	; (8006008 <HAL_GPIO_DeInit+0x1dc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <HAL_GPIO_DeInit+0x88>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a59      	ldr	r2, [pc, #356]	; (800600c <HAL_GPIO_DeInit+0x1e0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d101      	bne.n	8005eb0 <HAL_GPIO_DeInit+0x84>
 8005eac:	2306      	movs	r3, #6
 8005eae:	e00c      	b.n	8005eca <HAL_GPIO_DeInit+0x9e>
 8005eb0:	2307      	movs	r3, #7
 8005eb2:	e00a      	b.n	8005eca <HAL_GPIO_DeInit+0x9e>
 8005eb4:	2305      	movs	r3, #5
 8005eb6:	e008      	b.n	8005eca <HAL_GPIO_DeInit+0x9e>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	e006      	b.n	8005eca <HAL_GPIO_DeInit+0x9e>
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e004      	b.n	8005eca <HAL_GPIO_DeInit+0x9e>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e002      	b.n	8005eca <HAL_GPIO_DeInit+0x9e>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_GPIO_DeInit+0x9e>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	f002 0203 	and.w	r2, r2, #3
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	4093      	lsls	r3, r2
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d132      	bne.n	8005f40 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005eda:	4b4d      	ldr	r3, [pc, #308]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	494b      	ldr	r1, [pc, #300]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005ee8:	4b49      	ldr	r3, [pc, #292]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	4947      	ldr	r1, [pc, #284]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005ef6:	4b46      	ldr	r3, [pc, #280]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	4944      	ldr	r1, [pc, #272]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005f04:	4b42      	ldr	r3, [pc, #264]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	4940      	ldr	r1, [pc, #256]	; (8006010 <HAL_GPIO_DeInit+0x1e4>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	220f      	movs	r2, #15
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005f22:	4a34      	ldr	r2, [pc, #208]	; (8005ff4 <HAL_GPIO_DeInit+0x1c8>)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	3302      	adds	r3, #2
 8005f2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	43da      	mvns	r2, r3
 8005f32:	4830      	ldr	r0, [pc, #192]	; (8005ff4 <HAL_GPIO_DeInit+0x1c8>)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	400a      	ands	r2, r1
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	2103      	movs	r1, #3
 8005f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	08da      	lsrs	r2, r3, #3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3208      	adds	r2, #8
 8005f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	220f      	movs	r2, #15
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	08d2      	lsrs	r2, r2, #3
 8005f74:	4019      	ands	r1, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3208      	adds	r2, #8
 8005f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	2103      	movs	r1, #3
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	401a      	ands	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	2101      	movs	r1, #1
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	401a      	ands	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	2103      	movs	r1, #3
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	401a      	ands	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	401a      	ands	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f47f af2b 	bne.w	8005e3c <HAL_GPIO_DeInit+0x10>
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	48000400 	.word	0x48000400
 8005ffc:	48000800 	.word	0x48000800
 8006000:	48000c00 	.word	0x48000c00
 8006004:	48001000 	.word	0x48001000
 8006008:	48001400 	.word	0x48001400
 800600c:	48001800 	.word	0x48001800
 8006010:	40010400 	.word	0x40010400

08006014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	887b      	ldrh	r3, [r7, #2]
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	e001      	b.n	8006036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	807b      	strh	r3, [r7, #2]
 8006050:	4613      	mov	r3, r2
 8006052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006054:	787b      	ldrb	r3, [r7, #1]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800605a:	887a      	ldrh	r2, [r7, #2]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006060:	e002      	b.n	8006068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006062:	887a      	ldrh	r2, [r7, #2]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4013      	ands	r3, r2
 800608c:	041a      	lsls	r2, r3, #16
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	43d9      	mvns	r1, r3
 8006092:	887b      	ldrh	r3, [r7, #2]
 8006094:	400b      	ands	r3, r1
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	619a      	str	r2, [r3, #24]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d006      	beq.n	80060cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060be:	4a05      	ldr	r2, [pc, #20]	; (80060d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 f806 	bl	80060d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40010400 	.word	0x40010400

080060d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e081      	b.n	8006204 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fc fedd 	bl	8002ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2224      	movs	r2, #36	; 0x24
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800613e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800614e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d107      	bne.n	8006168 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006164:	609a      	str	r2, [r3, #8]
 8006166:	e006      	b.n	8006176 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006174:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d104      	bne.n	8006188 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006186:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	ea42 0103 	orr.w	r1, r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	021a      	lsls	r2, r3, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69d9      	ldr	r1, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	461a      	mov	r2, r3
 8006218:	460b      	mov	r3, r1
 800621a:	817b      	strh	r3, [r7, #10]
 800621c:	4613      	mov	r3, r2
 800621e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b20      	cmp	r3, #32
 800622a:	f040 80da 	bne.w	80063e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_I2C_Master_Transmit+0x30>
 8006238:	2302      	movs	r3, #2
 800623a:	e0d3      	b.n	80063e4 <HAL_I2C_Master_Transmit+0x1d8>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006244:	f7fe f8c2 	bl	80043cc <HAL_GetTick>
 8006248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	2319      	movs	r3, #25
 8006250:	2201      	movs	r2, #1
 8006252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f8f0 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0be      	b.n	80063e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2221      	movs	r2, #33	; 0x21
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2210      	movs	r2, #16
 8006272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	893a      	ldrh	r2, [r7, #8]
 8006286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	2bff      	cmp	r3, #255	; 0xff
 8006296:	d90e      	bls.n	80062b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	22ff      	movs	r2, #255	; 0xff
 800629c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	8979      	ldrh	r1, [r7, #10]
 80062a6:	4b51      	ldr	r3, [pc, #324]	; (80063ec <HAL_I2C_Master_Transmit+0x1e0>)
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f9e6 	bl	8006680 <I2C_TransferConfig>
 80062b4:	e06c      	b.n	8006390 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	8979      	ldrh	r1, [r7, #10]
 80062c8:	4b48      	ldr	r3, [pc, #288]	; (80063ec <HAL_I2C_Master_Transmit+0x1e0>)
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f9d5 	bl	8006680 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80062d6:	e05b      	b.n	8006390 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	6a39      	ldr	r1, [r7, #32]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f8ed 	bl	80064bc <I2C_WaitOnTXISFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e07b      	b.n	80063e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d034      	beq.n	8006390 <HAL_I2C_Master_Transmit+0x184>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d130      	bne.n	8006390 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	2200      	movs	r2, #0
 8006336:	2180      	movs	r1, #128	; 0x80
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f87f 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e04d      	b.n	80063e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2bff      	cmp	r3, #255	; 0xff
 8006350:	d90e      	bls.n	8006370 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635c:	b2da      	uxtb	r2, r3
 800635e:	8979      	ldrh	r1, [r7, #10]
 8006360:	2300      	movs	r3, #0
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f989 	bl	8006680 <I2C_TransferConfig>
 800636e:	e00f      	b.n	8006390 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637e:	b2da      	uxtb	r2, r3
 8006380:	8979      	ldrh	r1, [r7, #10]
 8006382:	2300      	movs	r3, #0
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f978 	bl	8006680 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d19e      	bne.n	80062d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	6a39      	ldr	r1, [r7, #32]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f8cc 	bl	800653c <I2C_WaitOnSTOPFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e01a      	b.n	80063e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2220      	movs	r2, #32
 80063b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6859      	ldr	r1, [r3, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80063c2:	400b      	ands	r3, r1
 80063c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e000      	b.n	80063e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	80002000 	.word	0x80002000
 80063f0:	fe00e800 	.word	0xfe00e800

080063f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d103      	bne.n	8006412 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2200      	movs	r2, #0
 8006410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d007      	beq.n	8006430 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	619a      	str	r2, [r3, #24]
  }
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800644c:	e022      	b.n	8006494 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d01e      	beq.n	8006494 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006456:	f7fd ffb9 	bl	80043cc <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d302      	bcc.n	800646c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d113      	bne.n	8006494 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e00f      	b.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4013      	ands	r3, r2
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d0cd      	beq.n	800644e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064c8:	e02c      	b.n	8006524 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f870 	bl	80065b4 <I2C_IsAcknowledgeFailed>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e02a      	b.n	8006534 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d01e      	beq.n	8006524 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e6:	f7fd ff71 	bl	80043cc <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d302      	bcc.n	80064fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d113      	bne.n	8006524 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006500:	f043 0220 	orr.w	r2, r3, #32
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e007      	b.n	8006534 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b02      	cmp	r3, #2
 8006530:	d1cb      	bne.n	80064ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006548:	e028      	b.n	800659c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f830 	bl	80065b4 <I2C_IsAcknowledgeFailed>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e026      	b.n	80065ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fd ff35 	bl	80043cc <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d113      	bne.n	800659c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	f043 0220 	orr.w	r2, r3, #32
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e007      	b.n	80065ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d1cf      	bne.n	800654a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d151      	bne.n	8006672 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ce:	e022      	b.n	8006616 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d6:	d01e      	beq.n	8006616 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d8:	f7fd fef8 	bl	80043cc <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <I2C_IsAcknowledgeFailed+0x3a>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d113      	bne.n	8006616 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e02e      	b.n	8006674 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b20      	cmp	r3, #32
 8006622:	d1d5      	bne.n	80065d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2210      	movs	r2, #16
 800662a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2220      	movs	r2, #32
 8006632:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff fedd 	bl	80063f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6859      	ldr	r1, [r3, #4]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b0d      	ldr	r3, [pc, #52]	; (800667c <I2C_IsAcknowledgeFailed+0xc8>)
 8006646:	400b      	ands	r3, r1
 8006648:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	f043 0204 	orr.w	r2, r3, #4
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	fe00e800 	.word	0xfe00e800

08006680 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	607b      	str	r3, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	817b      	strh	r3, [r7, #10]
 800668e:	4613      	mov	r3, r2
 8006690:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	0d5b      	lsrs	r3, r3, #21
 800669c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80066a0:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <I2C_TransferConfig+0x58>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	43db      	mvns	r3, r3
 80066a6:	ea02 0103 	and.w	r1, r2, r3
 80066aa:	897b      	ldrh	r3, [r7, #10]
 80066ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80066b0:	7a7b      	ldrb	r3, [r7, #9]
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	431a      	orrs	r2, r3
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	03ff63ff 	.word	0x03ff63ff

080066dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d138      	bne.n	8006764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e032      	b.n	8006766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2224      	movs	r2, #36	; 0x24
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800672e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6819      	ldr	r1, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e000      	b.n	8006766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
  }
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b20      	cmp	r3, #32
 8006786:	d139      	bne.n	80067fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006792:	2302      	movs	r3, #2
 8006794:	e033      	b.n	80067fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2224      	movs	r2, #36	; 0x24
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e000      	b.n	80067fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <HAL_PWREx_GetVoltageRange+0x18>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006818:	4618      	mov	r0, r3
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40007000 	.word	0x40007000

08006828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006836:	d130      	bne.n	800689a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006838:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006844:	d038      	beq.n	80068b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006846:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800684e:	4a1e      	ldr	r2, [pc, #120]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006854:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006856:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2232      	movs	r2, #50	; 0x32
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	4a1b      	ldr	r2, [pc, #108]	; (80068d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	0c9b      	lsrs	r3, r3, #18
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800686c:	e002      	b.n	8006874 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3b01      	subs	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006874:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d102      	bne.n	8006888 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f2      	bne.n	800686e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006894:	d110      	bne.n	80068b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e00f      	b.n	80068ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a6:	d007      	beq.n	80068b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068a8:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40007000 	.word	0x40007000
 80068cc:	20000004 	.word	0x20000004
 80068d0:	431bde83 	.word	0x431bde83

080068d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e3d4      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e6:	4ba1      	ldr	r3, [pc, #644]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f0:	4b9e      	ldr	r3, [pc, #632]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80e4 	beq.w	8006ad0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <HAL_RCC_OscConfig+0x4a>
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	2b0c      	cmp	r3, #12
 8006912:	f040 808b 	bne.w	8006a2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b01      	cmp	r3, #1
 800691a:	f040 8087 	bne.w	8006a2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800691e:	4b93      	ldr	r3, [pc, #588]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_RCC_OscConfig+0x62>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e3ac      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	4b8c      	ldr	r3, [pc, #560]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d004      	beq.n	8006950 <HAL_RCC_OscConfig+0x7c>
 8006946:	4b89      	ldr	r3, [pc, #548]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800694e:	e005      	b.n	800695c <HAL_RCC_OscConfig+0x88>
 8006950:	4b86      	ldr	r3, [pc, #536]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006956:	091b      	lsrs	r3, r3, #4
 8006958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800695c:	4293      	cmp	r3, r2
 800695e:	d223      	bcs.n	80069a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fd3f 	bl	80073e8 <RCC_SetFlashLatencyFromMSIRange>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e38d      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006974:	4b7d      	ldr	r3, [pc, #500]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a7c      	ldr	r2, [pc, #496]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 800697a:	f043 0308 	orr.w	r3, r3, #8
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b7a      	ldr	r3, [pc, #488]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	4977      	ldr	r1, [pc, #476]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006992:	4b76      	ldr	r3, [pc, #472]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	4972      	ldr	r1, [pc, #456]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
 80069a6:	e025      	b.n	80069f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069a8:	4b70      	ldr	r3, [pc, #448]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a6f      	ldr	r2, [pc, #444]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069ae:	f043 0308 	orr.w	r3, r3, #8
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	4b6d      	ldr	r3, [pc, #436]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	496a      	ldr	r1, [pc, #424]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069c6:	4b69      	ldr	r3, [pc, #420]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	4965      	ldr	r1, [pc, #404]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fcff 	bl	80073e8 <RCC_SetFlashLatencyFromMSIRange>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e34d      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069f4:	f000 fc36 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 80069f8:	4601      	mov	r1, r0
 80069fa:	4b5c      	ldr	r3, [pc, #368]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	4a5a      	ldr	r2, [pc, #360]	; (8006b70 <HAL_RCC_OscConfig+0x29c>)
 8006a06:	5cd3      	ldrb	r3, [r2, r3]
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	fa21 f303 	lsr.w	r3, r1, r3
 8006a10:	4a58      	ldr	r2, [pc, #352]	; (8006b74 <HAL_RCC_OscConfig+0x2a0>)
 8006a12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006a14:	4b58      	ldr	r3, [pc, #352]	; (8006b78 <HAL_RCC_OscConfig+0x2a4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd fc87 	bl	800432c <HAL_InitTick>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d052      	beq.n	8006ace <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	e331      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d032      	beq.n	8006a9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006a34:	4b4d      	ldr	r3, [pc, #308]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a4c      	ldr	r2, [pc, #304]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a40:	f7fd fcc4 	bl	80043cc <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a48:	f7fd fcc0 	bl	80043cc <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e31a      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a5a:	4b44      	ldr	r3, [pc, #272]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a66:	4b41      	ldr	r3, [pc, #260]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a40      	ldr	r2, [pc, #256]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a6c:	f043 0308 	orr.w	r3, r3, #8
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	4b3e      	ldr	r3, [pc, #248]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	493b      	ldr	r1, [pc, #236]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a84:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	4936      	ldr	r1, [pc, #216]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	604b      	str	r3, [r1, #4]
 8006a98:	e01a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a9a:	4b34      	ldr	r3, [pc, #208]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a33      	ldr	r2, [pc, #204]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006aa6:	f7fd fc91 	bl	80043cc <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006aae:	f7fd fc8d 	bl	80043cc <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e2e7      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006ac0:	4b2a      	ldr	r3, [pc, #168]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <HAL_RCC_OscConfig+0x1da>
 8006acc:	e000      	b.n	8006ad0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ace:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d074      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d005      	beq.n	8006aee <HAL_RCC_OscConfig+0x21a>
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b0c      	cmp	r3, #12
 8006ae6:	d10e      	bne.n	8006b06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d10b      	bne.n	8006b06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aee:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d064      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x2f0>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d160      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e2c4      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCC_OscConfig+0x24a>
 8006b10:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e01d      	b.n	8006b5a <HAL_RCC_OscConfig+0x286>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b26:	d10c      	bne.n	8006b42 <HAL_RCC_OscConfig+0x26e>
 8006b28:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a0f      	ldr	r2, [pc, #60]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a0c      	ldr	r2, [pc, #48]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	e00b      	b.n	8006b5a <HAL_RCC_OscConfig+0x286>
 8006b42:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a09      	ldr	r2, [pc, #36]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a06      	ldr	r2, [pc, #24]	; (8006b6c <HAL_RCC_OscConfig+0x298>)
 8006b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01c      	beq.n	8006b9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b62:	f7fd fc33 	bl	80043cc <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b68:	e011      	b.n	8006b8e <HAL_RCC_OscConfig+0x2ba>
 8006b6a:	bf00      	nop
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	0800bfb8 	.word	0x0800bfb8
 8006b74:	20000004 	.word	0x20000004
 8006b78:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b7c:	f7fd fc26 	bl	80043cc <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b64      	cmp	r3, #100	; 0x64
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e280      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b8e:	4baf      	ldr	r3, [pc, #700]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x2a8>
 8006b9a:	e014      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9c:	f7fd fc16 	bl	80043cc <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba4:	f7fd fc12 	bl	80043cc <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e26c      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bb6:	4ba5      	ldr	r3, [pc, #660]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f0      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x2d0>
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d060      	beq.n	8006c94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCC_OscConfig+0x310>
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b0c      	cmp	r3, #12
 8006bdc:	d119      	bne.n	8006c12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d116      	bne.n	8006c12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be4:	4b99      	ldr	r3, [pc, #612]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <HAL_RCC_OscConfig+0x328>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e249      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfc:	4b93      	ldr	r3, [pc, #588]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	061b      	lsls	r3, r3, #24
 8006c0a:	4990      	ldr	r1, [pc, #576]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c10:	e040      	b.n	8006c94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d023      	beq.n	8006c62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c1a:	4b8c      	ldr	r3, [pc, #560]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a8b      	ldr	r2, [pc, #556]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c26:	f7fd fbd1 	bl	80043cc <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c2e:	f7fd fbcd 	bl	80043cc <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e227      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c40:	4b82      	ldr	r3, [pc, #520]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0f0      	beq.n	8006c2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4c:	4b7f      	ldr	r3, [pc, #508]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	061b      	lsls	r3, r3, #24
 8006c5a:	497c      	ldr	r1, [pc, #496]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	604b      	str	r3, [r1, #4]
 8006c60:	e018      	b.n	8006c94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c62:	4b7a      	ldr	r3, [pc, #488]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a79      	ldr	r2, [pc, #484]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6e:	f7fd fbad 	bl	80043cc <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c76:	f7fd fba9 	bl	80043cc <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e203      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c88:	4b70      	ldr	r3, [pc, #448]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f0      	bne.n	8006c76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d03c      	beq.n	8006d1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01c      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ca8:	4b68      	ldr	r3, [pc, #416]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cae:	4a67      	ldr	r2, [pc, #412]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fd fb88 	bl	80043cc <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc0:	f7fd fb84 	bl	80043cc <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e1de      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cd2:	4b5e      	ldr	r3, [pc, #376]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ef      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x3ec>
 8006ce0:	e01b      	b.n	8006d1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ce2:	4b5a      	ldr	r3, [pc, #360]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ce8:	4a58      	ldr	r2, [pc, #352]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf2:	f7fd fb6b 	bl	80043cc <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfa:	f7fd fb67 	bl	80043cc <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e1c1      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d0c:	4b4f      	ldr	r3, [pc, #316]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1ef      	bne.n	8006cfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80a6 	beq.w	8006e74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006d2c:	4b47      	ldr	r3, [pc, #284]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10d      	bne.n	8006d54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d38:	4b44      	ldr	r3, [pc, #272]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3c:	4a43      	ldr	r2, [pc, #268]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d42:	6593      	str	r3, [r2, #88]	; 0x58
 8006d44:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d50:	2301      	movs	r3, #1
 8006d52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d54:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <HAL_RCC_OscConfig+0x57c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d118      	bne.n	8006d92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d60:	4b3b      	ldr	r3, [pc, #236]	; (8006e50 <HAL_RCC_OscConfig+0x57c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a3a      	ldr	r2, [pc, #232]	; (8006e50 <HAL_RCC_OscConfig+0x57c>)
 8006d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d6c:	f7fd fb2e 	bl	80043cc <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d74:	f7fd fb2a 	bl	80043cc <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e184      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d86:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <HAL_RCC_OscConfig+0x57c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d108      	bne.n	8006dac <HAL_RCC_OscConfig+0x4d8>
 8006d9a:	4b2c      	ldr	r3, [pc, #176]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da0:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006daa:	e024      	b.n	8006df6 <HAL_RCC_OscConfig+0x522>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d110      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x502>
 8006db4:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dba:	4a24      	ldr	r2, [pc, #144]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006dbc:	f043 0304 	orr.w	r3, r3, #4
 8006dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dc4:	4b21      	ldr	r3, [pc, #132]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dca:	4a20      	ldr	r2, [pc, #128]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dd4:	e00f      	b.n	8006df6 <HAL_RCC_OscConfig+0x522>
 8006dd6:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006de6:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dec:	4a17      	ldr	r2, [pc, #92]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006dee:	f023 0304 	bic.w	r3, r3, #4
 8006df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfe:	f7fd fae5 	bl	80043cc <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e06:	f7fd fae1 	bl	80043cc <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e139      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_RCC_OscConfig+0x578>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0ed      	beq.n	8006e06 <HAL_RCC_OscConfig+0x532>
 8006e2a:	e01a      	b.n	8006e62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7fd face 	bl	80043cc <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e32:	e00f      	b.n	8006e54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e34:	f7fd faca 	bl	80043cc <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d906      	bls.n	8006e54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e122      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
 8006e4a:	bf00      	nop
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e54:	4b90      	ldr	r3, [pc, #576]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e8      	bne.n	8006e34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e62:	7ffb      	ldrb	r3, [r7, #31]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d105      	bne.n	8006e74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e68:	4b8b      	ldr	r3, [pc, #556]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6c:	4a8a      	ldr	r2, [pc, #552]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8108 	beq.w	800708e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	f040 80d0 	bne.w	8007028 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e88:	4b83      	ldr	r3, [pc, #524]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f003 0203 	and.w	r2, r3, #3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d130      	bne.n	8006efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d127      	bne.n	8006efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d11f      	bne.n	8006efe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ec8:	2a07      	cmp	r2, #7
 8006eca:	bf14      	ite	ne
 8006ecc:	2201      	movne	r2, #1
 8006ece:	2200      	moveq	r2, #0
 8006ed0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d113      	bne.n	8006efe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d109      	bne.n	8006efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d06e      	beq.n	8006fdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b0c      	cmp	r3, #12
 8006f02:	d069      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006f04:	4b64      	ldr	r3, [pc, #400]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006f10:	4b61      	ldr	r3, [pc, #388]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e0b7      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006f20:	4b5d      	ldr	r3, [pc, #372]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a5c      	ldr	r2, [pc, #368]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f2c:	f7fd fa4e 	bl	80043cc <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f34:	f7fd fa4a 	bl	80043cc <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e0a4      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f46:	4b54      	ldr	r3, [pc, #336]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f52:	4b51      	ldr	r3, [pc, #324]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	4b51      	ldr	r3, [pc, #324]	; (800709c <HAL_RCC_OscConfig+0x7c8>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f62:	3a01      	subs	r2, #1
 8006f64:	0112      	lsls	r2, r2, #4
 8006f66:	4311      	orrs	r1, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f6c:	0212      	lsls	r2, r2, #8
 8006f6e:	4311      	orrs	r1, r2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f74:	0852      	lsrs	r2, r2, #1
 8006f76:	3a01      	subs	r2, #1
 8006f78:	0552      	lsls	r2, r2, #21
 8006f7a:	4311      	orrs	r1, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f80:	0852      	lsrs	r2, r2, #1
 8006f82:	3a01      	subs	r2, #1
 8006f84:	0652      	lsls	r2, r2, #25
 8006f86:	4311      	orrs	r1, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f8c:	0912      	lsrs	r2, r2, #4
 8006f8e:	0452      	lsls	r2, r2, #17
 8006f90:	430a      	orrs	r2, r1
 8006f92:	4941      	ldr	r1, [pc, #260]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f98:	4b3f      	ldr	r3, [pc, #252]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a3e      	ldr	r2, [pc, #248]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fa4:	4b3c      	ldr	r3, [pc, #240]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	4a3b      	ldr	r2, [pc, #236]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006fb0:	f7fd fa0c 	bl	80043cc <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb8:	f7fd fa08 	bl	80043cc <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e062      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fca:	4b33      	ldr	r3, [pc, #204]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fd6:	e05a      	b.n	800708e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e059      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fdc:	4b2e      	ldr	r3, [pc, #184]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d152      	bne.n	800708e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2a      	ldr	r2, [pc, #168]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ff4:	4b28      	ldr	r3, [pc, #160]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	4a27      	ldr	r2, [pc, #156]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8006ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007000:	f7fd f9e4 	bl	80043cc <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007006:	e008      	b.n	800701a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007008:	f7fd f9e0 	bl	80043cc <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b02      	cmp	r3, #2
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e03a      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800701a:	4b1f      	ldr	r3, [pc, #124]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f0      	beq.n	8007008 <HAL_RCC_OscConfig+0x734>
 8007026:	e032      	b.n	800708e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b0c      	cmp	r3, #12
 800702c:	d02d      	beq.n	800708a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800702e:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a19      	ldr	r2, [pc, #100]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8007034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007038:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800703a:	4b17      	ldr	r3, [pc, #92]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d105      	bne.n	8007052 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	4a13      	ldr	r2, [pc, #76]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 800704c:	f023 0303 	bic.w	r3, r3, #3
 8007050:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007052:	4b11      	ldr	r3, [pc, #68]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	4a10      	ldr	r2, [pc, #64]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 8007058:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800705c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007060:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007062:	f7fd f9b3 	bl	80043cc <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800706a:	f7fd f9af 	bl	80043cc <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e009      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <HAL_RCC_OscConfig+0x7c4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f0      	bne.n	800706a <HAL_RCC_OscConfig+0x796>
 8007088:	e001      	b.n	800708e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3720      	adds	r7, #32
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40021000 	.word	0x40021000
 800709c:	f99d808c 	.word	0xf99d808c

080070a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0c8      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070b4:	4b66      	ldr	r3, [pc, #408]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d910      	bls.n	80070e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c2:	4b63      	ldr	r3, [pc, #396]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f023 0207 	bic.w	r2, r3, #7
 80070ca:	4961      	ldr	r1, [pc, #388]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070d2:	4b5f      	ldr	r3, [pc, #380]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d001      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e0b0      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d04c      	beq.n	800718a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d107      	bne.n	8007108 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070f8:	4b56      	ldr	r3, [pc, #344]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d121      	bne.n	8007148 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e09e      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d107      	bne.n	8007120 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007110:	4b50      	ldr	r3, [pc, #320]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d115      	bne.n	8007148 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e092      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007128:	4b4a      	ldr	r3, [pc, #296]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d109      	bne.n	8007148 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e086      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007138:	4b46      	ldr	r3, [pc, #280]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e07e      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007148:	4b42      	ldr	r3, [pc, #264]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f023 0203 	bic.w	r2, r3, #3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	493f      	ldr	r1, [pc, #252]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 8007156:	4313      	orrs	r3, r2
 8007158:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800715a:	f7fd f937 	bl	80043cc <HAL_GetTick>
 800715e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007160:	e00a      	b.n	8007178 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007162:	f7fd f933 	bl	80043cc <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e066      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007178:	4b36      	ldr	r3, [pc, #216]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 020c 	and.w	r2, r3, #12
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	429a      	cmp	r2, r3
 8007188:	d1eb      	bne.n	8007162 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007196:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	492c      	ldr	r1, [pc, #176]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071a8:	4b29      	ldr	r3, [pc, #164]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d210      	bcs.n	80071d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b6:	4b26      	ldr	r3, [pc, #152]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f023 0207 	bic.w	r2, r3, #7
 80071be:	4924      	ldr	r1, [pc, #144]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b22      	ldr	r3, [pc, #136]	; (8007250 <HAL_RCC_ClockConfig+0x1b0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e036      	b.n	8007246 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e4:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4918      	ldr	r1, [pc, #96]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007202:	4b14      	ldr	r3, [pc, #80]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4910      	ldr	r1, [pc, #64]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007216:	f000 f825 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 800721a:	4601      	mov	r1, r0
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <HAL_RCC_ClockConfig+0x1b4>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	4a0c      	ldr	r2, [pc, #48]	; (8007258 <HAL_RCC_ClockConfig+0x1b8>)
 8007228:	5cd3      	ldrb	r3, [r2, r3]
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	fa21 f303 	lsr.w	r3, r1, r3
 8007232:	4a0a      	ldr	r2, [pc, #40]	; (800725c <HAL_RCC_ClockConfig+0x1bc>)
 8007234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <HAL_RCC_ClockConfig+0x1c0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f7fd f876 	bl	800432c <HAL_InitTick>
 8007240:	4603      	mov	r3, r0
 8007242:	72fb      	strb	r3, [r7, #11]

  return status;
 8007244:	7afb      	ldrb	r3, [r7, #11]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40022000 	.word	0x40022000
 8007254:	40021000 	.word	0x40021000
 8007258:	0800bfb8 	.word	0x0800bfb8
 800725c:	20000004 	.word	0x20000004
 8007260:	2000001c 	.word	0x2000001c

08007264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007272:	4b3d      	ldr	r3, [pc, #244]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 030c 	and.w	r3, r3, #12
 800727a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800727c:	4b3a      	ldr	r3, [pc, #232]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCC_GetSysClockFreq+0x34>
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d121      	bne.n	80072d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d11e      	bne.n	80072d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007298:	4b33      	ldr	r3, [pc, #204]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d107      	bne.n	80072b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80072a4:	4b30      	ldr	r3, [pc, #192]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 80072a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	e005      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80072b4:	4b2c      	ldr	r3, [pc, #176]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072c0:	4a2a      	ldr	r2, [pc, #168]	; (800736c <HAL_RCC_GetSysClockFreq+0x108>)
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10d      	bne.n	80072ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072d4:	e00a      	b.n	80072ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d102      	bne.n	80072e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072dc:	4b24      	ldr	r3, [pc, #144]	; (8007370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	e004      	b.n	80072ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d101      	bne.n	80072ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072e8:	4b22      	ldr	r3, [pc, #136]	; (8007374 <HAL_RCC_GetSysClockFreq+0x110>)
 80072ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b0c      	cmp	r3, #12
 80072f0:	d133      	bne.n	800735a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072f2:	4b1d      	ldr	r3, [pc, #116]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d002      	beq.n	8007308 <HAL_RCC_GetSysClockFreq+0xa4>
 8007302:	2b03      	cmp	r3, #3
 8007304:	d003      	beq.n	800730e <HAL_RCC_GetSysClockFreq+0xaa>
 8007306:	e005      	b.n	8007314 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007308:	4b19      	ldr	r3, [pc, #100]	; (8007370 <HAL_RCC_GetSysClockFreq+0x10c>)
 800730a:	617b      	str	r3, [r7, #20]
      break;
 800730c:	e005      	b.n	800731a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800730e:	4b19      	ldr	r3, [pc, #100]	; (8007374 <HAL_RCC_GetSysClockFreq+0x110>)
 8007310:	617b      	str	r3, [r7, #20]
      break;
 8007312:	e002      	b.n	800731a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	617b      	str	r3, [r7, #20]
      break;
 8007318:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800731a:	4b13      	ldr	r3, [pc, #76]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	091b      	lsrs	r3, r3, #4
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	3301      	adds	r3, #1
 8007326:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007328:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	fb02 f203 	mul.w	r2, r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007340:	4b09      	ldr	r3, [pc, #36]	; (8007368 <HAL_RCC_GetSysClockFreq+0x104>)
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	0e5b      	lsrs	r3, r3, #25
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	3301      	adds	r3, #1
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	fbb2 f3f3 	udiv	r3, r2, r3
 8007358:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800735a:	69bb      	ldr	r3, [r7, #24]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3724      	adds	r7, #36	; 0x24
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40021000 	.word	0x40021000
 800736c:	0800bfd0 	.word	0x0800bfd0
 8007370:	00f42400 	.word	0x00f42400
 8007374:	007a1200 	.word	0x007a1200

08007378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800737c:	4b03      	ldr	r3, [pc, #12]	; (800738c <HAL_RCC_GetHCLKFreq+0x14>)
 800737e:	681b      	ldr	r3, [r3, #0]
}
 8007380:	4618      	mov	r0, r3
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000004 	.word	0x20000004

08007390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007394:	f7ff fff0 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 8007398:	4601      	mov	r1, r0
 800739a:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	4a04      	ldr	r2, [pc, #16]	; (80073b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073a6:	5cd3      	ldrb	r3, [r2, r3]
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	40021000 	.word	0x40021000
 80073b8:	0800bfc8 	.word	0x0800bfc8

080073bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073c0:	f7ff ffda 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 80073c4:	4601      	mov	r1, r0
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	0adb      	lsrs	r3, r3, #11
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	4a04      	ldr	r2, [pc, #16]	; (80073e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073d2:	5cd3      	ldrb	r3, [r2, r3]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073dc:	4618      	mov	r0, r3
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40021000 	.word	0x40021000
 80073e4:	0800bfc8 	.word	0x0800bfc8

080073e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073f4:	4b2a      	ldr	r3, [pc, #168]	; (80074a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007400:	f7ff fa04 	bl	800680c <HAL_PWREx_GetVoltageRange>
 8007404:	6178      	str	r0, [r7, #20]
 8007406:	e014      	b.n	8007432 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007408:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	4a24      	ldr	r2, [pc, #144]	; (80074a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800740e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007412:	6593      	str	r3, [r2, #88]	; 0x58
 8007414:	4b22      	ldr	r3, [pc, #136]	; (80074a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007420:	f7ff f9f4 	bl	800680c <HAL_PWREx_GetVoltageRange>
 8007424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742a:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800742c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007430:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007438:	d10b      	bne.n	8007452 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b80      	cmp	r3, #128	; 0x80
 800743e:	d919      	bls.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2ba0      	cmp	r3, #160	; 0xa0
 8007444:	d902      	bls.n	800744c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007446:	2302      	movs	r3, #2
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e013      	b.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800744c:	2301      	movs	r3, #1
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	e010      	b.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d902      	bls.n	800745e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007458:	2303      	movs	r3, #3
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	e00a      	b.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d102      	bne.n	800746a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007464:	2302      	movs	r3, #2
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	e004      	b.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b70      	cmp	r3, #112	; 0x70
 800746e:	d101      	bne.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007470:	2301      	movs	r3, #1
 8007472:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007474:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f023 0207 	bic.w	r2, r3, #7
 800747c:	4909      	ldr	r1, [pc, #36]	; (80074a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007484:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	d001      	beq.n	8007496 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40022000 	.word	0x40022000

080074a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074b0:	2300      	movs	r3, #0
 80074b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074b4:	2300      	movs	r3, #0
 80074b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d03f      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074cc:	d01c      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80074ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074d2:	d802      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80074d8:	e01f      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80074da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074de:	d003      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80074e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074e4:	d01c      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80074e6:	e018      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074e8:	4b85      	ldr	r3, [pc, #532]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4a84      	ldr	r2, [pc, #528]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80074ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074f4:	e015      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2100      	movs	r1, #0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fab9 	bl	8007a74 <RCCEx_PLLSAI1_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007506:	e00c      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3320      	adds	r3, #32
 800750c:	2100      	movs	r1, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fba0 	bl	8007c54 <RCCEx_PLLSAI2_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007518:	e003      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	74fb      	strb	r3, [r7, #19]
      break;
 800751e:	e000      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007522:	7cfb      	ldrb	r3, [r7, #19]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007528:	4b75      	ldr	r3, [pc, #468]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007536:	4972      	ldr	r1, [pc, #456]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800753e:	e001      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007540:	7cfb      	ldrb	r3, [r7, #19]
 8007542:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d03f      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007558:	d01c      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800755a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800755e:	d802      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00e      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8007564:	e01f      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800756a:	d003      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800756c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007570:	d01c      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007572:	e018      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007574:	4b62      	ldr	r3, [pc, #392]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	4a61      	ldr	r2, [pc, #388]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800757a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800757e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007580:	e015      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3304      	adds	r3, #4
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fa73 	bl	8007a74 <RCCEx_PLLSAI1_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007592:	e00c      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3320      	adds	r3, #32
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fb5a 	bl	8007c54 <RCCEx_PLLSAI2_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80075a4:	e003      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	74fb      	strb	r3, [r7, #19]
      break;
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80075ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ae:	7cfb      	ldrb	r3, [r7, #19]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10b      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80075b4:	4b52      	ldr	r3, [pc, #328]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c2:	494f      	ldr	r1, [pc, #316]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80075ca:	e001      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80a0 	beq.w	800771e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075de:	2300      	movs	r3, #0
 80075e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80075e2:	4b47      	ldr	r3, [pc, #284]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00d      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075f8:	4b41      	ldr	r3, [pc, #260]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fc:	4a40      	ldr	r2, [pc, #256]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80075fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007602:	6593      	str	r3, [r2, #88]	; 0x58
 8007604:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007610:	2301      	movs	r3, #1
 8007612:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007614:	4b3b      	ldr	r3, [pc, #236]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a3a      	ldr	r2, [pc, #232]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800761a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800761e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007620:	f7fc fed4 	bl	80043cc <HAL_GetTick>
 8007624:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007626:	e009      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007628:	f7fc fed0 	bl	80043cc <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d902      	bls.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	74fb      	strb	r3, [r7, #19]
        break;
 800763a:	e005      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800763c:	4b31      	ldr	r3, [pc, #196]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0ef      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8007648:	7cfb      	ldrb	r3, [r7, #19]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d15c      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800764e:	4b2c      	ldr	r3, [pc, #176]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007658:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01f      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	429a      	cmp	r2, r3
 800766a:	d019      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800766c:	4b24      	ldr	r3, [pc, #144]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007676:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800767a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767e:	4a20      	ldr	r2, [pc, #128]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007688:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	4a1c      	ldr	r2, [pc, #112]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d016      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fc fe8f 	bl	80043cc <HAL_GetTick>
 80076ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076b0:	e00b      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b2:	f7fc fe8b 	bl	80043cc <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d902      	bls.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	74fb      	strb	r3, [r7, #19]
            break;
 80076c8:	e006      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ca:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0ec      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80076d8:	7cfb      	ldrb	r3, [r7, #19]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10c      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076de:	4b08      	ldr	r3, [pc, #32]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ee:	4904      	ldr	r1, [pc, #16]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80076f6:	e009      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076f8:	7cfb      	ldrb	r3, [r7, #19]
 80076fa:	74bb      	strb	r3, [r7, #18]
 80076fc:	e006      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x264>
 80076fe:	bf00      	nop
 8007700:	40021000 	.word	0x40021000
 8007704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	7cfb      	ldrb	r3, [r7, #19]
 800770a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800770c:	7c7b      	ldrb	r3, [r7, #17]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d105      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007712:	4b9e      	ldr	r3, [pc, #632]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007716:	4a9d      	ldr	r2, [pc, #628]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800771c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800772a:	4b98      	ldr	r3, [pc, #608]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007730:	f023 0203 	bic.w	r2, r3, #3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	4994      	ldr	r1, [pc, #592]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800774c:	4b8f      	ldr	r3, [pc, #572]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007752:	f023 020c 	bic.w	r2, r3, #12
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775a:	498c      	ldr	r1, [pc, #560]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800776e:	4b87      	ldr	r3, [pc, #540]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	4983      	ldr	r1, [pc, #524]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007790:	4b7e      	ldr	r3, [pc, #504]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	497b      	ldr	r1, [pc, #492]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80077b2:	4b76      	ldr	r3, [pc, #472]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c0:	4972      	ldr	r1, [pc, #456]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077d4:	4b6d      	ldr	r3, [pc, #436]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	496a      	ldr	r1, [pc, #424]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077f6:	4b65      	ldr	r3, [pc, #404]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80077f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007804:	4961      	ldr	r1, [pc, #388]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007806:	4313      	orrs	r3, r2
 8007808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007818:	4b5c      	ldr	r3, [pc, #368]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007826:	4959      	ldr	r1, [pc, #356]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800783a:	4b54      	ldr	r3, [pc, #336]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800783c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007840:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	4950      	ldr	r1, [pc, #320]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800785c:	4b4b      	ldr	r3, [pc, #300]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800785e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007862:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	4948      	ldr	r1, [pc, #288]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800787e:	4b43      	ldr	r3, [pc, #268]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788c:	493f      	ldr	r1, [pc, #252]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d028      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078a0:	4b3a      	ldr	r3, [pc, #232]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	4937      	ldr	r1, [pc, #220]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078be:	d106      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078c0:	4b32      	ldr	r3, [pc, #200]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	4a31      	ldr	r2, [pc, #196]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ca:	60d3      	str	r3, [r2, #12]
 80078cc:	e011      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078d6:	d10c      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	2101      	movs	r1, #1
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f8c8 	bl	8007a74 <RCCEx_PLLSAI1_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80078e8:	7cfb      	ldrb	r3, [r7, #19]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80078ee:	7cfb      	ldrb	r3, [r7, #19]
 80078f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d028      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80078fe:	4b23      	ldr	r3, [pc, #140]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007904:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790c:	491f      	ldr	r1, [pc, #124]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800790e:	4313      	orrs	r3, r2
 8007910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800791c:	d106      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800791e:	4b1b      	ldr	r3, [pc, #108]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	4a1a      	ldr	r2, [pc, #104]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007928:	60d3      	str	r3, [r2, #12]
 800792a:	e011      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007934:	d10c      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	2101      	movs	r1, #1
 800793c:	4618      	mov	r0, r3
 800793e:	f000 f899 	bl	8007a74 <RCCEx_PLLSAI1_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007946:	7cfb      	ldrb	r3, [r7, #19]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800794c:	7cfb      	ldrb	r3, [r7, #19]
 800794e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02b      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800795e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796a:	4908      	ldr	r1, [pc, #32]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800797a:	d109      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	4a02      	ldr	r2, [pc, #8]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007986:	60d3      	str	r3, [r2, #12]
 8007988:	e014      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800798a:	bf00      	nop
 800798c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007998:	d10c      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	2101      	movs	r1, #1
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 f867 	bl	8007a74 <RCCEx_PLLSAI1_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079aa:	7cfb      	ldrb	r3, [r7, #19]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80079b0:	7cfb      	ldrb	r3, [r7, #19]
 80079b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d02f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079c0:	4b2b      	ldr	r3, [pc, #172]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ce:	4928      	ldr	r1, [pc, #160]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079de:	d10d      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3304      	adds	r3, #4
 80079e4:	2102      	movs	r1, #2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f844 	bl	8007a74 <RCCEx_PLLSAI1_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079f0:	7cfb      	ldrb	r3, [r7, #19]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d014      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80079f6:	7cfb      	ldrb	r3, [r7, #19]
 80079f8:	74bb      	strb	r3, [r7, #18]
 80079fa:	e011      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a04:	d10c      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3320      	adds	r3, #32
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f921 	bl	8007c54 <RCCEx_PLLSAI2_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a16:	7cfb      	ldrb	r3, [r7, #19]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007a1c:	7cfb      	ldrb	r3, [r7, #19]
 8007a1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a3a:	490d      	ldr	r1, [pc, #52]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a4e:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5e:	4904      	ldr	r1, [pc, #16]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a66:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40021000 	.word	0x40021000

08007a74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a82:	4b73      	ldr	r3, [pc, #460]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d018      	beq.n	8007ac0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a8e:	4b70      	ldr	r3, [pc, #448]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f003 0203 	and.w	r2, r3, #3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d10d      	bne.n	8007aba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007aa6:	4b6a      	ldr	r3, [pc, #424]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	091b      	lsrs	r3, r3, #4
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d044      	beq.n	8007b44 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
 8007abe:	e041      	b.n	8007b44 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d00c      	beq.n	8007ae2 <RCCEx_PLLSAI1_Config+0x6e>
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d013      	beq.n	8007af4 <RCCEx_PLLSAI1_Config+0x80>
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d120      	bne.n	8007b12 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ad0:	4b5f      	ldr	r3, [pc, #380]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d11d      	bne.n	8007b18 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ae0:	e01a      	b.n	8007b18 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ae2:	4b5b      	ldr	r3, [pc, #364]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d116      	bne.n	8007b1c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007af2:	e013      	b.n	8007b1c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007af4:	4b56      	ldr	r3, [pc, #344]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10f      	bne.n	8007b20 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b00:	4b53      	ldr	r3, [pc, #332]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d109      	bne.n	8007b20 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b10:	e006      	b.n	8007b20 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	73fb      	strb	r3, [r7, #15]
      break;
 8007b16:	e004      	b.n	8007b22 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e002      	b.n	8007b22 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007b20:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10d      	bne.n	8007b44 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b28:	4b49      	ldr	r3, [pc, #292]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6819      	ldr	r1, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	4944      	ldr	r1, [pc, #272]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d17d      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b4a:	4b41      	ldr	r3, [pc, #260]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a40      	ldr	r2, [pc, #256]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b56:	f7fc fc39 	bl	80043cc <HAL_GetTick>
 8007b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b5c:	e009      	b.n	8007b72 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b5e:	f7fc fc35 	bl	80043cc <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d902      	bls.n	8007b72 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8007b70:	e005      	b.n	8007b7e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b72:	4b37      	ldr	r3, [pc, #220]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1ef      	bne.n	8007b5e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d160      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d111      	bne.n	8007bae <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b8a:	4b31      	ldr	r3, [pc, #196]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6892      	ldr	r2, [r2, #8]
 8007b9a:	0211      	lsls	r1, r2, #8
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68d2      	ldr	r2, [r2, #12]
 8007ba0:	0912      	lsrs	r2, r2, #4
 8007ba2:	0452      	lsls	r2, r2, #17
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	492a      	ldr	r1, [pc, #168]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	610b      	str	r3, [r1, #16]
 8007bac:	e027      	b.n	8007bfe <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d112      	bne.n	8007bda <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bb4:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6892      	ldr	r2, [r2, #8]
 8007bc4:	0211      	lsls	r1, r2, #8
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6912      	ldr	r2, [r2, #16]
 8007bca:	0852      	lsrs	r2, r2, #1
 8007bcc:	3a01      	subs	r2, #1
 8007bce:	0552      	lsls	r2, r2, #21
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	491f      	ldr	r1, [pc, #124]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	610b      	str	r3, [r1, #16]
 8007bd8:	e011      	b.n	8007bfe <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bda:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007be2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6892      	ldr	r2, [r2, #8]
 8007bea:	0211      	lsls	r1, r2, #8
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6952      	ldr	r2, [r2, #20]
 8007bf0:	0852      	lsrs	r2, r2, #1
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	0652      	lsls	r2, r2, #25
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	4915      	ldr	r1, [pc, #84]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007bfe:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0a:	f7fc fbdf 	bl	80043cc <HAL_GetTick>
 8007c0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c10:	e009      	b.n	8007c26 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c12:	f7fc fbdb 	bl	80043cc <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d902      	bls.n	8007c26 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	73fb      	strb	r3, [r7, #15]
          break;
 8007c24:	e005      	b.n	8007c32 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0ef      	beq.n	8007c12 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	4903      	ldr	r1, [pc, #12]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	40021000 	.word	0x40021000

08007c54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c62:	4b68      	ldr	r3, [pc, #416]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d018      	beq.n	8007ca0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c6e:	4b65      	ldr	r3, [pc, #404]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0203 	and.w	r2, r3, #3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d10d      	bne.n	8007c9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
       ||
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007c86:	4b5f      	ldr	r3, [pc, #380]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	091b      	lsrs	r3, r3, #4
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
       ||
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d044      	beq.n	8007d24 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	73fb      	strb	r3, [r7, #15]
 8007c9e:	e041      	b.n	8007d24 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d00c      	beq.n	8007cc2 <RCCEx_PLLSAI2_Config+0x6e>
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d013      	beq.n	8007cd4 <RCCEx_PLLSAI2_Config+0x80>
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d120      	bne.n	8007cf2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007cb0:	4b54      	ldr	r3, [pc, #336]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11d      	bne.n	8007cf8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cc0:	e01a      	b.n	8007cf8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007cc2:	4b50      	ldr	r3, [pc, #320]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d116      	bne.n	8007cfc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cd2:	e013      	b.n	8007cfc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007cd4:	4b4b      	ldr	r3, [pc, #300]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10f      	bne.n	8007d00 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ce0:	4b48      	ldr	r3, [pc, #288]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cf0:	e006      	b.n	8007d00 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	e004      	b.n	8007d02 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e002      	b.n	8007d02 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007d00:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10d      	bne.n	8007d24 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d08:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	4939      	ldr	r1, [pc, #228]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d167      	bne.n	8007dfa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007d2a:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a35      	ldr	r2, [pc, #212]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d36:	f7fc fb49 	bl	80043cc <HAL_GetTick>
 8007d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d3c:	e009      	b.n	8007d52 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d3e:	f7fc fb45 	bl	80043cc <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d902      	bls.n	8007d52 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	73fb      	strb	r3, [r7, #15]
        break;
 8007d50:	e005      	b.n	8007d5e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d52:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1ef      	bne.n	8007d3e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d14a      	bne.n	8007dfa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d111      	bne.n	8007d8e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d6a:	4b26      	ldr	r3, [pc, #152]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6892      	ldr	r2, [r2, #8]
 8007d7a:	0211      	lsls	r1, r2, #8
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68d2      	ldr	r2, [r2, #12]
 8007d80:	0912      	lsrs	r2, r2, #4
 8007d82:	0452      	lsls	r2, r2, #17
 8007d84:	430a      	orrs	r2, r1
 8007d86:	491f      	ldr	r1, [pc, #124]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	614b      	str	r3, [r1, #20]
 8007d8c:	e011      	b.n	8007db2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d8e:	4b1d      	ldr	r3, [pc, #116]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6892      	ldr	r2, [r2, #8]
 8007d9e:	0211      	lsls	r1, r2, #8
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6912      	ldr	r2, [r2, #16]
 8007da4:	0852      	lsrs	r2, r2, #1
 8007da6:	3a01      	subs	r2, #1
 8007da8:	0652      	lsls	r2, r2, #25
 8007daa:	430a      	orrs	r2, r1
 8007dac:	4915      	ldr	r1, [pc, #84]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007db2:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbe:	f7fc fb05 	bl	80043cc <HAL_GetTick>
 8007dc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007dc4:	e009      	b.n	8007dda <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007dc6:	f7fc fb01 	bl	80043cc <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d902      	bls.n	8007dda <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	73fb      	strb	r3, [r7, #15]
          break;
 8007dd8:	e005      	b.n	8007de6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007dda:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0ef      	beq.n	8007dc6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d106      	bne.n	8007dfa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007dee:	695a      	ldr	r2, [r3, #20]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	4903      	ldr	r1, [pc, #12]	; (8007e04 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40021000 	.word	0x40021000

08007e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e095      	b.n	8007f46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d108      	bne.n	8007e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e2a:	d009      	beq.n	8007e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	61da      	str	r2, [r3, #28]
 8007e32:	e005      	b.n	8007e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f877 	bl	8007f4e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e80:	d902      	bls.n	8007e88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	e002      	b.n	8007e8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007e96:	d007      	beq.n	8007ea8 <HAL_SPI_Init+0xa0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ea0:	d002      	beq.n	8007ea8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eea:	ea42 0103 	orr.w	r1, r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	0c1b      	lsrs	r3, r3, #16
 8007f04:	f003 0204 	and.w	r2, r3, #4
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	431a      	orrs	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f24:	ea42 0103 	orr.w	r1, r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b08a      	sub	sp, #40	; 0x28
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f70:	2301      	movs	r3, #1
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d101      	bne.n	8007f88 <HAL_SPI_TransmitReceive+0x26>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e1fb      	b.n	8008380 <HAL_SPI_TransmitReceive+0x41e>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f90:	f7fc fa1c 	bl	80043cc <HAL_GetTick>
 8007f94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007fa4:	887b      	ldrh	r3, [r7, #2]
 8007fa6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007fa8:	887b      	ldrh	r3, [r7, #2]
 8007faa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fac:	7efb      	ldrb	r3, [r7, #27]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_SPI_TransmitReceive+0x6e>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fb8:	d106      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x66>
 8007fc2:	7efb      	ldrb	r3, [r7, #27]
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d003      	beq.n	8007fd0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007fce:	e1cd      	b.n	800836c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <HAL_SPI_TransmitReceive+0x80>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <HAL_SPI_TransmitReceive+0x80>
 8007fdc:	887b      	ldrh	r3, [r7, #2]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007fe8:	e1c0      	b.n	800836c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d003      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	887a      	ldrh	r2, [r7, #2]
 800800e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	887a      	ldrh	r2, [r7, #2]
 8008016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	887a      	ldrh	r2, [r7, #2]
 8008024:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	887a      	ldrh	r2, [r7, #2]
 800802a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008040:	d802      	bhi.n	8008048 <HAL_SPI_TransmitReceive+0xe6>
 8008042:	8a3b      	ldrh	r3, [r7, #16]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d908      	bls.n	800805a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008056:	605a      	str	r2, [r3, #4]
 8008058:	e007      	b.n	800806a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008068:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d007      	beq.n	8008088 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008090:	d97c      	bls.n	800818c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x13e>
 800809a:	8a7b      	ldrh	r3, [r7, #18]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d169      	bne.n	8008174 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	881a      	ldrh	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	1c9a      	adds	r2, r3, #2
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080c4:	e056      	b.n	8008174 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d11b      	bne.n	800810c <HAL_SPI_TransmitReceive+0x1aa>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d016      	beq.n	800810c <HAL_SPI_TransmitReceive+0x1aa>
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d113      	bne.n	800810c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	881a      	ldrh	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	1c9a      	adds	r2, r3, #2
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b01      	cmp	r3, #1
 8008118:	d11c      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x1f2>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d016      	beq.n	8008154 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	b292      	uxth	r2, r2
 8008132:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008138:	1c9a      	adds	r2, r3, #2
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008150:	2301      	movs	r3, #1
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008154:	f7fc f93a 	bl	80043cc <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008160:	429a      	cmp	r2, r3
 8008162:	d807      	bhi.n	8008174 <HAL_SPI_TransmitReceive+0x212>
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d003      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008172:	e0fb      	b.n	800836c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1a3      	bne.n	80080c6 <HAL_SPI_TransmitReceive+0x164>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d19d      	bne.n	80080c6 <HAL_SPI_TransmitReceive+0x164>
 800818a:	e0df      	b.n	800834c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_SPI_TransmitReceive+0x23a>
 8008194:	8a7b      	ldrh	r3, [r7, #18]
 8008196:	2b01      	cmp	r3, #1
 8008198:	f040 80cb 	bne.w	8008332 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d912      	bls.n	80081cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	1c9a      	adds	r2, r3, #2
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	3b02      	subs	r3, #2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081ca:	e0b2      	b.n	8008332 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081f2:	e09e      	b.n	8008332 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d134      	bne.n	800826c <HAL_SPI_TransmitReceive+0x30a>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02f      	beq.n	800826c <HAL_SPI_TransmitReceive+0x30a>
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	2b01      	cmp	r3, #1
 8008210:	d12c      	bne.n	800826c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008216:	b29b      	uxth	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d912      	bls.n	8008242 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	881a      	ldrh	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008236:	b29b      	uxth	r3, r3
 8008238:	3b02      	subs	r3, #2
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008240:	e012      	b.n	8008268 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	330c      	adds	r3, #12
 800824c:	7812      	ldrb	r2, [r2, #0]
 800824e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b01      	cmp	r3, #1
 8008278:	d148      	bne.n	800830c <HAL_SPI_TransmitReceive+0x3aa>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d042      	beq.n	800830c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800828c:	b29b      	uxth	r3, r3
 800828e:	2b01      	cmp	r3, #1
 8008290:	d923      	bls.n	80082da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	b292      	uxth	r2, r2
 800829e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b02      	subs	r3, #2
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d81f      	bhi.n	8008308 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082d6:	605a      	str	r2, [r3, #4]
 80082d8:	e016      	b.n	8008308 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f103 020c 	add.w	r2, r3, #12
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	b2d2      	uxtb	r2, r2
 80082ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008308:	2301      	movs	r3, #1
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800830c:	f7fc f85e 	bl	80043cc <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008318:	429a      	cmp	r2, r3
 800831a:	d803      	bhi.n	8008324 <HAL_SPI_TransmitReceive+0x3c2>
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d102      	bne.n	800832a <HAL_SPI_TransmitReceive+0x3c8>
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	2b00      	cmp	r3, #0
 8008328:	d103      	bne.n	8008332 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008330:	e01c      	b.n	800836c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	f47f af5b 	bne.w	80081f4 <HAL_SPI_TransmitReceive+0x292>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	f47f af54 	bne.w	80081f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800834c:	69fa      	ldr	r2, [r7, #28]
 800834e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f93d 	bl	80085d0 <SPI_EndRxTxTransaction>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d006      	beq.n	800836a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2220      	movs	r2, #32
 8008366:	661a      	str	r2, [r3, #96]	; 0x60
 8008368:	e000      	b.n	800836c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800836a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800837c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008380:	4618      	mov	r0, r3
 8008382:	3728      	adds	r7, #40	; 0x28
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008396:	b2db      	uxtb	r3, r3
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	4613      	mov	r3, r2
 80083b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083b4:	f7fc f80a 	bl	80043cc <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4413      	add	r3, r2
 80083c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083c4:	f7fc f802 	bl	80043cc <HAL_GetTick>
 80083c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083ca:	4b39      	ldr	r3, [pc, #228]	; (80084b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	015b      	lsls	r3, r3, #5
 80083d0:	0d1b      	lsrs	r3, r3, #20
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	fb02 f303 	mul.w	r3, r2, r3
 80083d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083da:	e054      	b.n	8008486 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d050      	beq.n	8008486 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083e4:	f7fb fff2 	bl	80043cc <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d902      	bls.n	80083fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d13d      	bne.n	8008476 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008408:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008412:	d111      	bne.n	8008438 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800841c:	d004      	beq.n	8008428 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008426:	d107      	bne.n	8008438 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008436:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008440:	d10f      	bne.n	8008462 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008460:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e017      	b.n	80084a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	3b01      	subs	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4013      	ands	r3, r2
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	bf0c      	ite	eq
 8008496:	2301      	moveq	r3, #1
 8008498:	2300      	movne	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	461a      	mov	r2, r3
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d19b      	bne.n	80083dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000004 	.word	0x20000004

080084b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084c2:	f7fb ff83 	bl	80043cc <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	4413      	add	r3, r2
 80084d0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084d2:	f7fb ff7b 	bl	80043cc <HAL_GetTick>
 80084d6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084d8:	4b3c      	ldr	r3, [pc, #240]	; (80085cc <SPI_WaitFifoStateUntilTimeout+0x118>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	00da      	lsls	r2, r3, #3
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	0d1b      	lsrs	r3, r3, #20
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
 80084ee:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80084f0:	e05f      	b.n	80085b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084f8:	d106      	bne.n	8008508 <SPI_WaitFifoStateUntilTimeout+0x54>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	330c      	adds	r3, #12
 8008506:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d050      	beq.n	80085b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008510:	f7fb ff5c 	bl	80043cc <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	429a      	cmp	r2, r3
 800851e:	d902      	bls.n	8008526 <SPI_WaitFifoStateUntilTimeout+0x72>
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d13d      	bne.n	80085a2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800853e:	d111      	bne.n	8008564 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008548:	d004      	beq.n	8008554 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008552:	d107      	bne.n	8008564 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800856c:	d10f      	bne.n	800858e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800858c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e010      	b.n	80085c4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4013      	ands	r3, r2
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d197      	bne.n	80084f2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000004 	.word	0x20000004

080085d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff ff63 	bl	80084b4 <SPI_WaitFifoStateUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d007      	beq.n	8008604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f8:	f043 0220 	orr.w	r2, r3, #32
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e027      	b.n	8008654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2200      	movs	r2, #0
 800860c:	2180      	movs	r1, #128	; 0x80
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff fec8 	bl	80083a4 <SPI_WaitFlagStateUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861e:	f043 0220 	orr.w	r2, r3, #32
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e014      	b.n	8008654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2200      	movs	r2, #0
 8008632:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7ff ff3c 	bl	80084b4 <SPI_WaitFifoStateUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008646:	f043 0220 	orr.w	r2, r3, #32
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e000      	b.n	8008654 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e049      	b.n	8008702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fb fc56 	bl	8003f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3304      	adds	r3, #4
 8008698:	4619      	mov	r1, r3
 800869a:	4610      	mov	r0, r2
 800869c:	f000 fa60 	bl	8008b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e049      	b.n	80087b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d106      	bne.n	8008736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f841 	bl	80087b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f000 fa09 	bl	8008b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e0fd      	b.n	80089e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b14      	cmp	r3, #20
 80087f2:	f200 80f0 	bhi.w	80089d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008851 	.word	0x08008851
 8008800:	080089d7 	.word	0x080089d7
 8008804:	080089d7 	.word	0x080089d7
 8008808:	080089d7 	.word	0x080089d7
 800880c:	08008891 	.word	0x08008891
 8008810:	080089d7 	.word	0x080089d7
 8008814:	080089d7 	.word	0x080089d7
 8008818:	080089d7 	.word	0x080089d7
 800881c:	080088d3 	.word	0x080088d3
 8008820:	080089d7 	.word	0x080089d7
 8008824:	080089d7 	.word	0x080089d7
 8008828:	080089d7 	.word	0x080089d7
 800882c:	08008913 	.word	0x08008913
 8008830:	080089d7 	.word	0x080089d7
 8008834:	080089d7 	.word	0x080089d7
 8008838:	080089d7 	.word	0x080089d7
 800883c:	08008955 	.word	0x08008955
 8008840:	080089d7 	.word	0x080089d7
 8008844:	080089d7 	.word	0x080089d7
 8008848:	080089d7 	.word	0x080089d7
 800884c:	08008995 	.word	0x08008995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fa1c 	bl	8008c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0208 	orr.w	r2, r2, #8
 800886a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0204 	bic.w	r2, r2, #4
 800887a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6999      	ldr	r1, [r3, #24]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	619a      	str	r2, [r3, #24]
      break;
 800888e:	e0a3      	b.n	80089d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fa8c 	bl	8008db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6999      	ldr	r1, [r3, #24]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	021a      	lsls	r2, r3, #8
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	619a      	str	r2, [r3, #24]
      break;
 80088d0:	e082      	b.n	80089d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 faf5 	bl	8008ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0208 	orr.w	r2, r2, #8
 80088ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0204 	bic.w	r2, r2, #4
 80088fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69d9      	ldr	r1, [r3, #28]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	61da      	str	r2, [r3, #28]
      break;
 8008910:	e062      	b.n	80089d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fb5d 	bl	8008fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800892c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69da      	ldr	r2, [r3, #28]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800893c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69d9      	ldr	r1, [r3, #28]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	021a      	lsls	r2, r3, #8
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	61da      	str	r2, [r3, #28]
      break;
 8008952:	e041      	b.n	80089d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fba6 	bl	80090ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0208 	orr.w	r2, r2, #8
 800896e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0204 	bic.w	r2, r2, #4
 800897e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	691a      	ldr	r2, [r3, #16]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008992:	e021      	b.n	80089d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68b9      	ldr	r1, [r7, #8]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fbea 	bl	8009174 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	021a      	lsls	r2, r3, #8
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089d4:	e000      	b.n	80089d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80089d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop

080089ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d101      	bne.n	8008a04 <HAL_TIM_ConfigClockSource+0x18>
 8008a00:	2302      	movs	r3, #2
 8008a02:	e0a8      	b.n	8008b56 <HAL_TIM_ConfigClockSource+0x16a>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b40      	cmp	r3, #64	; 0x40
 8008a3e:	d067      	beq.n	8008b10 <HAL_TIM_ConfigClockSource+0x124>
 8008a40:	2b40      	cmp	r3, #64	; 0x40
 8008a42:	d80b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x70>
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	d073      	beq.n	8008b30 <HAL_TIM_ConfigClockSource+0x144>
 8008a48:	2b10      	cmp	r3, #16
 8008a4a:	d802      	bhi.n	8008a52 <HAL_TIM_ConfigClockSource+0x66>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d06f      	beq.n	8008b30 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008a50:	e078      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d06c      	beq.n	8008b30 <HAL_TIM_ConfigClockSource+0x144>
 8008a56:	2b30      	cmp	r3, #48	; 0x30
 8008a58:	d06a      	beq.n	8008b30 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008a5a:	e073      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008a5c:	2b70      	cmp	r3, #112	; 0x70
 8008a5e:	d00d      	beq.n	8008a7c <HAL_TIM_ConfigClockSource+0x90>
 8008a60:	2b70      	cmp	r3, #112	; 0x70
 8008a62:	d804      	bhi.n	8008a6e <HAL_TIM_ConfigClockSource+0x82>
 8008a64:	2b50      	cmp	r3, #80	; 0x50
 8008a66:	d033      	beq.n	8008ad0 <HAL_TIM_ConfigClockSource+0xe4>
 8008a68:	2b60      	cmp	r3, #96	; 0x60
 8008a6a:	d041      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008a6c:	e06a      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a72:	d066      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x156>
 8008a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a78:	d017      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008a7a:	e063      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	6899      	ldr	r1, [r3, #8]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f000 fc52 	bl	8009334 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	609a      	str	r2, [r3, #8]
      break;
 8008aa8:	e04c      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6899      	ldr	r1, [r3, #8]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f000 fc3b 	bl	8009334 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008acc:	609a      	str	r2, [r3, #8]
      break;
 8008ace:	e039      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	6859      	ldr	r1, [r3, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	461a      	mov	r2, r3
 8008ade:	f000 fbaf 	bl	8009240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2150      	movs	r1, #80	; 0x50
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fc08 	bl	80092fe <TIM_ITRx_SetConfig>
      break;
 8008aee:	e029      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	6859      	ldr	r1, [r3, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	461a      	mov	r2, r3
 8008afe:	f000 fbce 	bl	800929e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2160      	movs	r1, #96	; 0x60
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 fbf8 	bl	80092fe <TIM_ITRx_SetConfig>
      break;
 8008b0e:	e019      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	6859      	ldr	r1, [r3, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f000 fb8f 	bl	8009240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2140      	movs	r1, #64	; 0x40
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fbe8 	bl	80092fe <TIM_ITRx_SetConfig>
      break;
 8008b2e:	e009      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f000 fbdf 	bl	80092fe <TIM_ITRx_SetConfig>
        break;
 8008b40:	e000      	b.n	8008b44 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a40      	ldr	r2, [pc, #256]	; (8008c74 <TIM_Base_SetConfig+0x114>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d013      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7e:	d00f      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a3d      	ldr	r2, [pc, #244]	; (8008c78 <TIM_Base_SetConfig+0x118>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00b      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a3c      	ldr	r2, [pc, #240]	; (8008c7c <TIM_Base_SetConfig+0x11c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d007      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a3b      	ldr	r2, [pc, #236]	; (8008c80 <TIM_Base_SetConfig+0x120>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_Base_SetConfig+0x40>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a3a      	ldr	r2, [pc, #232]	; (8008c84 <TIM_Base_SetConfig+0x124>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d108      	bne.n	8008bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a2f      	ldr	r2, [pc, #188]	; (8008c74 <TIM_Base_SetConfig+0x114>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d01f      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc0:	d01b      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2c      	ldr	r2, [pc, #176]	; (8008c78 <TIM_Base_SetConfig+0x118>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d017      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a2b      	ldr	r2, [pc, #172]	; (8008c7c <TIM_Base_SetConfig+0x11c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a2a      	ldr	r2, [pc, #168]	; (8008c80 <TIM_Base_SetConfig+0x120>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00f      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a29      	ldr	r2, [pc, #164]	; (8008c84 <TIM_Base_SetConfig+0x124>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00b      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a28      	ldr	r2, [pc, #160]	; (8008c88 <TIM_Base_SetConfig+0x128>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <TIM_Base_SetConfig+0x12c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d003      	beq.n	8008bfa <TIM_Base_SetConfig+0x9a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a26      	ldr	r2, [pc, #152]	; (8008c90 <TIM_Base_SetConfig+0x130>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d108      	bne.n	8008c0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a10      	ldr	r2, [pc, #64]	; (8008c74 <TIM_Base_SetConfig+0x114>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00f      	beq.n	8008c58 <TIM_Base_SetConfig+0xf8>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a12      	ldr	r2, [pc, #72]	; (8008c84 <TIM_Base_SetConfig+0x124>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00b      	beq.n	8008c58 <TIM_Base_SetConfig+0xf8>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a11      	ldr	r2, [pc, #68]	; (8008c88 <TIM_Base_SetConfig+0x128>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d007      	beq.n	8008c58 <TIM_Base_SetConfig+0xf8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a10      	ldr	r2, [pc, #64]	; (8008c8c <TIM_Base_SetConfig+0x12c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d003      	beq.n	8008c58 <TIM_Base_SetConfig+0xf8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a0f      	ldr	r2, [pc, #60]	; (8008c90 <TIM_Base_SetConfig+0x130>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d103      	bne.n	8008c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	691a      	ldr	r2, [r3, #16]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	615a      	str	r2, [r3, #20]
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	40012c00 	.word	0x40012c00
 8008c78:	40000400 	.word	0x40000400
 8008c7c:	40000800 	.word	0x40000800
 8008c80:	40000c00 	.word	0x40000c00
 8008c84:	40013400 	.word	0x40013400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800

08008c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	f023 0201 	bic.w	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f023 0302 	bic.w	r3, r3, #2
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a2c      	ldr	r2, [pc, #176]	; (8008da0 <TIM_OC1_SetConfig+0x10c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00f      	beq.n	8008d14 <TIM_OC1_SetConfig+0x80>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a2b      	ldr	r2, [pc, #172]	; (8008da4 <TIM_OC1_SetConfig+0x110>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00b      	beq.n	8008d14 <TIM_OC1_SetConfig+0x80>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a2a      	ldr	r2, [pc, #168]	; (8008da8 <TIM_OC1_SetConfig+0x114>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <TIM_OC1_SetConfig+0x80>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a29      	ldr	r2, [pc, #164]	; (8008dac <TIM_OC1_SetConfig+0x118>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC1_SetConfig+0x80>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a28      	ldr	r2, [pc, #160]	; (8008db0 <TIM_OC1_SetConfig+0x11c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d10c      	bne.n	8008d2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f023 0308 	bic.w	r3, r3, #8
 8008d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f023 0304 	bic.w	r3, r3, #4
 8008d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a1b      	ldr	r2, [pc, #108]	; (8008da0 <TIM_OC1_SetConfig+0x10c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00f      	beq.n	8008d56 <TIM_OC1_SetConfig+0xc2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a1a      	ldr	r2, [pc, #104]	; (8008da4 <TIM_OC1_SetConfig+0x110>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00b      	beq.n	8008d56 <TIM_OC1_SetConfig+0xc2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a19      	ldr	r2, [pc, #100]	; (8008da8 <TIM_OC1_SetConfig+0x114>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <TIM_OC1_SetConfig+0xc2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a18      	ldr	r2, [pc, #96]	; (8008dac <TIM_OC1_SetConfig+0x118>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <TIM_OC1_SetConfig+0xc2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a17      	ldr	r2, [pc, #92]	; (8008db0 <TIM_OC1_SetConfig+0x11c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d111      	bne.n	8008d7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	621a      	str	r2, [r3, #32]
}
 8008d94:	bf00      	nop
 8008d96:	371c      	adds	r7, #28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	40012c00 	.word	0x40012c00
 8008da4:	40013400 	.word	0x40013400
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800

08008db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	f023 0210 	bic.w	r2, r3, #16
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0320 	bic.w	r3, r3, #32
 8008e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a28      	ldr	r2, [pc, #160]	; (8008eb4 <TIM_OC2_SetConfig+0x100>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC2_SetConfig+0x6c>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a27      	ldr	r2, [pc, #156]	; (8008eb8 <TIM_OC2_SetConfig+0x104>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10d      	bne.n	8008e3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <TIM_OC2_SetConfig+0x100>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00f      	beq.n	8008e64 <TIM_OC2_SetConfig+0xb0>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a1c      	ldr	r2, [pc, #112]	; (8008eb8 <TIM_OC2_SetConfig+0x104>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00b      	beq.n	8008e64 <TIM_OC2_SetConfig+0xb0>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a1b      	ldr	r2, [pc, #108]	; (8008ebc <TIM_OC2_SetConfig+0x108>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <TIM_OC2_SetConfig+0xb0>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a1a      	ldr	r2, [pc, #104]	; (8008ec0 <TIM_OC2_SetConfig+0x10c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d003      	beq.n	8008e64 <TIM_OC2_SetConfig+0xb0>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a19      	ldr	r2, [pc, #100]	; (8008ec4 <TIM_OC2_SetConfig+0x110>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d113      	bne.n	8008e8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	621a      	str	r2, [r3, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	40012c00 	.word	0x40012c00
 8008eb8:	40013400 	.word	0x40013400
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	40014400 	.word	0x40014400
 8008ec4:	40014800 	.word	0x40014800

08008ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a27      	ldr	r2, [pc, #156]	; (8008fc4 <TIM_OC3_SetConfig+0xfc>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d003      	beq.n	8008f32 <TIM_OC3_SetConfig+0x6a>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a26      	ldr	r2, [pc, #152]	; (8008fc8 <TIM_OC3_SetConfig+0x100>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d10d      	bne.n	8008f4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	021b      	lsls	r3, r3, #8
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a1c      	ldr	r2, [pc, #112]	; (8008fc4 <TIM_OC3_SetConfig+0xfc>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00f      	beq.n	8008f76 <TIM_OC3_SetConfig+0xae>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a1b      	ldr	r2, [pc, #108]	; (8008fc8 <TIM_OC3_SetConfig+0x100>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00b      	beq.n	8008f76 <TIM_OC3_SetConfig+0xae>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a1a      	ldr	r2, [pc, #104]	; (8008fcc <TIM_OC3_SetConfig+0x104>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d007      	beq.n	8008f76 <TIM_OC3_SetConfig+0xae>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a19      	ldr	r2, [pc, #100]	; (8008fd0 <TIM_OC3_SetConfig+0x108>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d003      	beq.n	8008f76 <TIM_OC3_SetConfig+0xae>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a18      	ldr	r2, [pc, #96]	; (8008fd4 <TIM_OC3_SetConfig+0x10c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d113      	bne.n	8008f9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	011b      	lsls	r3, r3, #4
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	621a      	str	r2, [r3, #32]
}
 8008fb8:	bf00      	nop
 8008fba:	371c      	adds	r7, #28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	40012c00 	.word	0x40012c00
 8008fc8:	40013400 	.word	0x40013400
 8008fcc:	40014000 	.word	0x40014000
 8008fd0:	40014400 	.word	0x40014400
 8008fd4:	40014800 	.word	0x40014800

08008fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4313      	orrs	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	031b      	lsls	r3, r3, #12
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4313      	orrs	r3, r2
 8009032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a18      	ldr	r2, [pc, #96]	; (8009098 <TIM_OC4_SetConfig+0xc0>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00f      	beq.n	800905c <TIM_OC4_SetConfig+0x84>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a17      	ldr	r2, [pc, #92]	; (800909c <TIM_OC4_SetConfig+0xc4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00b      	beq.n	800905c <TIM_OC4_SetConfig+0x84>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <TIM_OC4_SetConfig+0xc8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d007      	beq.n	800905c <TIM_OC4_SetConfig+0x84>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <TIM_OC4_SetConfig+0xcc>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_OC4_SetConfig+0x84>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a14      	ldr	r2, [pc, #80]	; (80090a8 <TIM_OC4_SetConfig+0xd0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d109      	bne.n	8009070 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	019b      	lsls	r3, r3, #6
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	621a      	str	r2, [r3, #32]
}
 800908a:	bf00      	nop
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	40012c00 	.word	0x40012c00
 800909c:	40013400 	.word	0x40013400
 80090a0:	40014000 	.word	0x40014000
 80090a4:	40014400 	.word	0x40014400
 80090a8:	40014800 	.word	0x40014800

080090ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80090f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	041b      	lsls	r3, r3, #16
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a17      	ldr	r2, [pc, #92]	; (8009160 <TIM_OC5_SetConfig+0xb4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d00f      	beq.n	8009126 <TIM_OC5_SetConfig+0x7a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a16      	ldr	r2, [pc, #88]	; (8009164 <TIM_OC5_SetConfig+0xb8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00b      	beq.n	8009126 <TIM_OC5_SetConfig+0x7a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a15      	ldr	r2, [pc, #84]	; (8009168 <TIM_OC5_SetConfig+0xbc>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d007      	beq.n	8009126 <TIM_OC5_SetConfig+0x7a>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a14      	ldr	r2, [pc, #80]	; (800916c <TIM_OC5_SetConfig+0xc0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d003      	beq.n	8009126 <TIM_OC5_SetConfig+0x7a>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a13      	ldr	r2, [pc, #76]	; (8009170 <TIM_OC5_SetConfig+0xc4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d109      	bne.n	800913a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800912c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	621a      	str	r2, [r3, #32]
}
 8009154:	bf00      	nop
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	40012c00 	.word	0x40012c00
 8009164:	40013400 	.word	0x40013400
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800

08009174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	051b      	lsls	r3, r3, #20
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a18      	ldr	r2, [pc, #96]	; (800922c <TIM_OC6_SetConfig+0xb8>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00f      	beq.n	80091f0 <TIM_OC6_SetConfig+0x7c>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a17      	ldr	r2, [pc, #92]	; (8009230 <TIM_OC6_SetConfig+0xbc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00b      	beq.n	80091f0 <TIM_OC6_SetConfig+0x7c>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a16      	ldr	r2, [pc, #88]	; (8009234 <TIM_OC6_SetConfig+0xc0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d007      	beq.n	80091f0 <TIM_OC6_SetConfig+0x7c>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a15      	ldr	r2, [pc, #84]	; (8009238 <TIM_OC6_SetConfig+0xc4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d003      	beq.n	80091f0 <TIM_OC6_SetConfig+0x7c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a14      	ldr	r2, [pc, #80]	; (800923c <TIM_OC6_SetConfig+0xc8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d109      	bne.n	8009204 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	029b      	lsls	r3, r3, #10
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	4313      	orrs	r3, r2
 8009202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	621a      	str	r2, [r3, #32]
}
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	40012c00 	.word	0x40012c00
 8009230:	40013400 	.word	0x40013400
 8009234:	40014000 	.word	0x40014000
 8009238:	40014400 	.word	0x40014400
 800923c:	40014800 	.word	0x40014800

08009240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f023 0201 	bic.w	r2, r3, #1
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800926a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	4313      	orrs	r3, r2
 8009274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f023 030a 	bic.w	r3, r3, #10
 800927c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4313      	orrs	r3, r2
 8009284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	621a      	str	r2, [r3, #32]
}
 8009292:	bf00      	nop
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800929e:	b480      	push	{r7}
 80092a0:	b087      	sub	sp, #28
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f023 0210 	bic.w	r2, r3, #16
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	031b      	lsls	r3, r3, #12
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	621a      	str	r2, [r3, #32]
}
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092fe:	b480      	push	{r7}
 8009300:	b085      	sub	sp, #20
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	f043 0307 	orr.w	r3, r3, #7
 8009320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	609a      	str	r2, [r3, #8]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800934e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	021a      	lsls	r2, r3, #8
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	431a      	orrs	r2, r3
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	4313      	orrs	r3, r2
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	4313      	orrs	r3, r2
 8009360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	609a      	str	r2, [r3, #8]
}
 8009368:	bf00      	nop
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009388:	2302      	movs	r3, #2
 800938a:	e068      	b.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a2e      	ldr	r2, [pc, #184]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d004      	beq.n	80093c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a2d      	ldr	r2, [pc, #180]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d108      	bne.n	80093d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1e      	ldr	r2, [pc, #120]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d01d      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fe:	d018      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a1b      	ldr	r2, [pc, #108]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a1a      	ldr	r2, [pc, #104]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00e      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a18      	ldr	r2, [pc, #96]	; (800947c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d009      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a13      	ldr	r2, [pc, #76]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d004      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a14      	ldr	r2, [pc, #80]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d10c      	bne.n	800944c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	4313      	orrs	r3, r2
 8009442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	40012c00 	.word	0x40012c00
 8009470:	40013400 	.word	0x40013400
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40000c00 	.word	0x40000c00
 8009480:	40014000 	.word	0x40014000

08009484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e040      	b.n	8009518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f83a 	bl	8009520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2224      	movs	r2, #36	; 0x24
 80094b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0201 	bic.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f836 	bl	8009534 <UART_SetConfig>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e022      	b.n	8009518 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fab4 	bl	8009a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb3b 	bl	8009b8c <UART_CheckIdleState>
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009534:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009538:	b088      	sub	sp, #32
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	4313      	orrs	r3, r2
 8009558:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	4bac      	ldr	r3, [pc, #688]	; (8009814 <UART_SetConfig+0x2e0>)
 8009562:	4013      	ands	r3, r2
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	69f9      	ldr	r1, [r7, #28]
 800956a:	430b      	orrs	r3, r1
 800956c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4aa2      	ldr	r2, [pc, #648]	; (8009818 <UART_SetConfig+0x2e4>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d004      	beq.n	800959e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	4313      	orrs	r3, r2
 800959c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a99      	ldr	r2, [pc, #612]	; (800981c <UART_SetConfig+0x2e8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d121      	bne.n	8009600 <UART_SetConfig+0xcc>
 80095bc:	4b98      	ldr	r3, [pc, #608]	; (8009820 <UART_SetConfig+0x2ec>)
 80095be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d816      	bhi.n	80095f8 <UART_SetConfig+0xc4>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <UART_SetConfig+0x9c>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095e1 	.word	0x080095e1
 80095d4:	080095ed 	.word	0x080095ed
 80095d8:	080095e7 	.word	0x080095e7
 80095dc:	080095f3 	.word	0x080095f3
 80095e0:	2301      	movs	r3, #1
 80095e2:	76fb      	strb	r3, [r7, #27]
 80095e4:	e0e8      	b.n	80097b8 <UART_SetConfig+0x284>
 80095e6:	2302      	movs	r3, #2
 80095e8:	76fb      	strb	r3, [r7, #27]
 80095ea:	e0e5      	b.n	80097b8 <UART_SetConfig+0x284>
 80095ec:	2304      	movs	r3, #4
 80095ee:	76fb      	strb	r3, [r7, #27]
 80095f0:	e0e2      	b.n	80097b8 <UART_SetConfig+0x284>
 80095f2:	2308      	movs	r3, #8
 80095f4:	76fb      	strb	r3, [r7, #27]
 80095f6:	e0df      	b.n	80097b8 <UART_SetConfig+0x284>
 80095f8:	2310      	movs	r3, #16
 80095fa:	76fb      	strb	r3, [r7, #27]
 80095fc:	bf00      	nop
 80095fe:	e0db      	b.n	80097b8 <UART_SetConfig+0x284>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a87      	ldr	r2, [pc, #540]	; (8009824 <UART_SetConfig+0x2f0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d134      	bne.n	8009674 <UART_SetConfig+0x140>
 800960a:	4b85      	ldr	r3, [pc, #532]	; (8009820 <UART_SetConfig+0x2ec>)
 800960c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009610:	f003 030c 	and.w	r3, r3, #12
 8009614:	2b0c      	cmp	r3, #12
 8009616:	d829      	bhi.n	800966c <UART_SetConfig+0x138>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <UART_SetConfig+0xec>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009655 	.word	0x08009655
 8009624:	0800966d 	.word	0x0800966d
 8009628:	0800966d 	.word	0x0800966d
 800962c:	0800966d 	.word	0x0800966d
 8009630:	08009661 	.word	0x08009661
 8009634:	0800966d 	.word	0x0800966d
 8009638:	0800966d 	.word	0x0800966d
 800963c:	0800966d 	.word	0x0800966d
 8009640:	0800965b 	.word	0x0800965b
 8009644:	0800966d 	.word	0x0800966d
 8009648:	0800966d 	.word	0x0800966d
 800964c:	0800966d 	.word	0x0800966d
 8009650:	08009667 	.word	0x08009667
 8009654:	2300      	movs	r3, #0
 8009656:	76fb      	strb	r3, [r7, #27]
 8009658:	e0ae      	b.n	80097b8 <UART_SetConfig+0x284>
 800965a:	2302      	movs	r3, #2
 800965c:	76fb      	strb	r3, [r7, #27]
 800965e:	e0ab      	b.n	80097b8 <UART_SetConfig+0x284>
 8009660:	2304      	movs	r3, #4
 8009662:	76fb      	strb	r3, [r7, #27]
 8009664:	e0a8      	b.n	80097b8 <UART_SetConfig+0x284>
 8009666:	2308      	movs	r3, #8
 8009668:	76fb      	strb	r3, [r7, #27]
 800966a:	e0a5      	b.n	80097b8 <UART_SetConfig+0x284>
 800966c:	2310      	movs	r3, #16
 800966e:	76fb      	strb	r3, [r7, #27]
 8009670:	bf00      	nop
 8009672:	e0a1      	b.n	80097b8 <UART_SetConfig+0x284>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a6b      	ldr	r2, [pc, #428]	; (8009828 <UART_SetConfig+0x2f4>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d120      	bne.n	80096c0 <UART_SetConfig+0x18c>
 800967e:	4b68      	ldr	r3, [pc, #416]	; (8009820 <UART_SetConfig+0x2ec>)
 8009680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009684:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009688:	2b10      	cmp	r3, #16
 800968a:	d00f      	beq.n	80096ac <UART_SetConfig+0x178>
 800968c:	2b10      	cmp	r3, #16
 800968e:	d802      	bhi.n	8009696 <UART_SetConfig+0x162>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <UART_SetConfig+0x16c>
 8009694:	e010      	b.n	80096b8 <UART_SetConfig+0x184>
 8009696:	2b20      	cmp	r3, #32
 8009698:	d005      	beq.n	80096a6 <UART_SetConfig+0x172>
 800969a:	2b30      	cmp	r3, #48	; 0x30
 800969c:	d009      	beq.n	80096b2 <UART_SetConfig+0x17e>
 800969e:	e00b      	b.n	80096b8 <UART_SetConfig+0x184>
 80096a0:	2300      	movs	r3, #0
 80096a2:	76fb      	strb	r3, [r7, #27]
 80096a4:	e088      	b.n	80097b8 <UART_SetConfig+0x284>
 80096a6:	2302      	movs	r3, #2
 80096a8:	76fb      	strb	r3, [r7, #27]
 80096aa:	e085      	b.n	80097b8 <UART_SetConfig+0x284>
 80096ac:	2304      	movs	r3, #4
 80096ae:	76fb      	strb	r3, [r7, #27]
 80096b0:	e082      	b.n	80097b8 <UART_SetConfig+0x284>
 80096b2:	2308      	movs	r3, #8
 80096b4:	76fb      	strb	r3, [r7, #27]
 80096b6:	e07f      	b.n	80097b8 <UART_SetConfig+0x284>
 80096b8:	2310      	movs	r3, #16
 80096ba:	76fb      	strb	r3, [r7, #27]
 80096bc:	bf00      	nop
 80096be:	e07b      	b.n	80097b8 <UART_SetConfig+0x284>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a59      	ldr	r2, [pc, #356]	; (800982c <UART_SetConfig+0x2f8>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d120      	bne.n	800970c <UART_SetConfig+0x1d8>
 80096ca:	4b55      	ldr	r3, [pc, #340]	; (8009820 <UART_SetConfig+0x2ec>)
 80096cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	d00f      	beq.n	80096f8 <UART_SetConfig+0x1c4>
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d802      	bhi.n	80096e2 <UART_SetConfig+0x1ae>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <UART_SetConfig+0x1b8>
 80096e0:	e010      	b.n	8009704 <UART_SetConfig+0x1d0>
 80096e2:	2b80      	cmp	r3, #128	; 0x80
 80096e4:	d005      	beq.n	80096f2 <UART_SetConfig+0x1be>
 80096e6:	2bc0      	cmp	r3, #192	; 0xc0
 80096e8:	d009      	beq.n	80096fe <UART_SetConfig+0x1ca>
 80096ea:	e00b      	b.n	8009704 <UART_SetConfig+0x1d0>
 80096ec:	2300      	movs	r3, #0
 80096ee:	76fb      	strb	r3, [r7, #27]
 80096f0:	e062      	b.n	80097b8 <UART_SetConfig+0x284>
 80096f2:	2302      	movs	r3, #2
 80096f4:	76fb      	strb	r3, [r7, #27]
 80096f6:	e05f      	b.n	80097b8 <UART_SetConfig+0x284>
 80096f8:	2304      	movs	r3, #4
 80096fa:	76fb      	strb	r3, [r7, #27]
 80096fc:	e05c      	b.n	80097b8 <UART_SetConfig+0x284>
 80096fe:	2308      	movs	r3, #8
 8009700:	76fb      	strb	r3, [r7, #27]
 8009702:	e059      	b.n	80097b8 <UART_SetConfig+0x284>
 8009704:	2310      	movs	r3, #16
 8009706:	76fb      	strb	r3, [r7, #27]
 8009708:	bf00      	nop
 800970a:	e055      	b.n	80097b8 <UART_SetConfig+0x284>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a47      	ldr	r2, [pc, #284]	; (8009830 <UART_SetConfig+0x2fc>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d124      	bne.n	8009760 <UART_SetConfig+0x22c>
 8009716:	4b42      	ldr	r3, [pc, #264]	; (8009820 <UART_SetConfig+0x2ec>)
 8009718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009724:	d012      	beq.n	800974c <UART_SetConfig+0x218>
 8009726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972a:	d802      	bhi.n	8009732 <UART_SetConfig+0x1fe>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <UART_SetConfig+0x20c>
 8009730:	e012      	b.n	8009758 <UART_SetConfig+0x224>
 8009732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009736:	d006      	beq.n	8009746 <UART_SetConfig+0x212>
 8009738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800973c:	d009      	beq.n	8009752 <UART_SetConfig+0x21e>
 800973e:	e00b      	b.n	8009758 <UART_SetConfig+0x224>
 8009740:	2300      	movs	r3, #0
 8009742:	76fb      	strb	r3, [r7, #27]
 8009744:	e038      	b.n	80097b8 <UART_SetConfig+0x284>
 8009746:	2302      	movs	r3, #2
 8009748:	76fb      	strb	r3, [r7, #27]
 800974a:	e035      	b.n	80097b8 <UART_SetConfig+0x284>
 800974c:	2304      	movs	r3, #4
 800974e:	76fb      	strb	r3, [r7, #27]
 8009750:	e032      	b.n	80097b8 <UART_SetConfig+0x284>
 8009752:	2308      	movs	r3, #8
 8009754:	76fb      	strb	r3, [r7, #27]
 8009756:	e02f      	b.n	80097b8 <UART_SetConfig+0x284>
 8009758:	2310      	movs	r3, #16
 800975a:	76fb      	strb	r3, [r7, #27]
 800975c:	bf00      	nop
 800975e:	e02b      	b.n	80097b8 <UART_SetConfig+0x284>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a2c      	ldr	r2, [pc, #176]	; (8009818 <UART_SetConfig+0x2e4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d124      	bne.n	80097b4 <UART_SetConfig+0x280>
 800976a:	4b2d      	ldr	r3, [pc, #180]	; (8009820 <UART_SetConfig+0x2ec>)
 800976c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009778:	d012      	beq.n	80097a0 <UART_SetConfig+0x26c>
 800977a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977e:	d802      	bhi.n	8009786 <UART_SetConfig+0x252>
 8009780:	2b00      	cmp	r3, #0
 8009782:	d007      	beq.n	8009794 <UART_SetConfig+0x260>
 8009784:	e012      	b.n	80097ac <UART_SetConfig+0x278>
 8009786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800978a:	d006      	beq.n	800979a <UART_SetConfig+0x266>
 800978c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009790:	d009      	beq.n	80097a6 <UART_SetConfig+0x272>
 8009792:	e00b      	b.n	80097ac <UART_SetConfig+0x278>
 8009794:	2300      	movs	r3, #0
 8009796:	76fb      	strb	r3, [r7, #27]
 8009798:	e00e      	b.n	80097b8 <UART_SetConfig+0x284>
 800979a:	2302      	movs	r3, #2
 800979c:	76fb      	strb	r3, [r7, #27]
 800979e:	e00b      	b.n	80097b8 <UART_SetConfig+0x284>
 80097a0:	2304      	movs	r3, #4
 80097a2:	76fb      	strb	r3, [r7, #27]
 80097a4:	e008      	b.n	80097b8 <UART_SetConfig+0x284>
 80097a6:	2308      	movs	r3, #8
 80097a8:	76fb      	strb	r3, [r7, #27]
 80097aa:	e005      	b.n	80097b8 <UART_SetConfig+0x284>
 80097ac:	2310      	movs	r3, #16
 80097ae:	76fb      	strb	r3, [r7, #27]
 80097b0:	bf00      	nop
 80097b2:	e001      	b.n	80097b8 <UART_SetConfig+0x284>
 80097b4:	2310      	movs	r3, #16
 80097b6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a16      	ldr	r2, [pc, #88]	; (8009818 <UART_SetConfig+0x2e4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	f040 8087 	bne.w	80098d2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097c4:	7efb      	ldrb	r3, [r7, #27]
 80097c6:	2b08      	cmp	r3, #8
 80097c8:	d836      	bhi.n	8009838 <UART_SetConfig+0x304>
 80097ca:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <UART_SetConfig+0x29c>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	080097f5 	.word	0x080097f5
 80097d4:	08009839 	.word	0x08009839
 80097d8:	080097fd 	.word	0x080097fd
 80097dc:	08009839 	.word	0x08009839
 80097e0:	08009803 	.word	0x08009803
 80097e4:	08009839 	.word	0x08009839
 80097e8:	08009839 	.word	0x08009839
 80097ec:	08009839 	.word	0x08009839
 80097f0:	0800980b 	.word	0x0800980b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097f4:	f7fd fdcc 	bl	8007390 <HAL_RCC_GetPCLK1Freq>
 80097f8:	6178      	str	r0, [r7, #20]
        break;
 80097fa:	e022      	b.n	8009842 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <UART_SetConfig+0x300>)
 80097fe:	617b      	str	r3, [r7, #20]
        break;
 8009800:	e01f      	b.n	8009842 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009802:	f7fd fd2f 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009806:	6178      	str	r0, [r7, #20]
        break;
 8009808:	e01b      	b.n	8009842 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800980e:	617b      	str	r3, [r7, #20]
        break;
 8009810:	e017      	b.n	8009842 <UART_SetConfig+0x30e>
 8009812:	bf00      	nop
 8009814:	efff69f3 	.word	0xefff69f3
 8009818:	40008000 	.word	0x40008000
 800981c:	40013800 	.word	0x40013800
 8009820:	40021000 	.word	0x40021000
 8009824:	40004400 	.word	0x40004400
 8009828:	40004800 	.word	0x40004800
 800982c:	40004c00 	.word	0x40004c00
 8009830:	40005000 	.word	0x40005000
 8009834:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	76bb      	strb	r3, [r7, #26]
        break;
 8009840:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80f1 	beq.w	8009a2c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	4413      	add	r3, r2
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	429a      	cmp	r2, r3
 8009858:	d305      	bcc.n	8009866 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	429a      	cmp	r2, r3
 8009864:	d902      	bls.n	800986c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	76bb      	strb	r3, [r7, #26]
 800986a:	e0df      	b.n	8009a2c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	4619      	mov	r1, r3
 8009870:	f04f 0200 	mov.w	r2, #0
 8009874:	f04f 0300 	mov.w	r3, #0
 8009878:	f04f 0400 	mov.w	r4, #0
 800987c:	0214      	lsls	r4, r2, #8
 800987e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009882:	020b      	lsls	r3, r1, #8
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6852      	ldr	r2, [r2, #4]
 8009888:	0852      	lsrs	r2, r2, #1
 800988a:	4611      	mov	r1, r2
 800988c:	f04f 0200 	mov.w	r2, #0
 8009890:	eb13 0b01 	adds.w	fp, r3, r1
 8009894:	eb44 0c02 	adc.w	ip, r4, r2
 8009898:	4658      	mov	r0, fp
 800989a:	4661      	mov	r1, ip
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f04f 0400 	mov.w	r4, #0
 80098a4:	461a      	mov	r2, r3
 80098a6:	4623      	mov	r3, r4
 80098a8:	f7f7 f9c6 	bl	8000c38 <__aeabi_uldivmod>
 80098ac:	4603      	mov	r3, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098b8:	d308      	bcc.n	80098cc <UART_SetConfig+0x398>
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098c0:	d204      	bcs.n	80098cc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	60da      	str	r2, [r3, #12]
 80098ca:	e0af      	b.n	8009a2c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	76bb      	strb	r3, [r7, #26]
 80098d0:	e0ac      	b.n	8009a2c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098da:	d15b      	bne.n	8009994 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80098dc:	7efb      	ldrb	r3, [r7, #27]
 80098de:	2b08      	cmp	r3, #8
 80098e0:	d827      	bhi.n	8009932 <UART_SetConfig+0x3fe>
 80098e2:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <UART_SetConfig+0x3b4>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	0800990d 	.word	0x0800990d
 80098ec:	08009915 	.word	0x08009915
 80098f0:	0800991d 	.word	0x0800991d
 80098f4:	08009933 	.word	0x08009933
 80098f8:	08009923 	.word	0x08009923
 80098fc:	08009933 	.word	0x08009933
 8009900:	08009933 	.word	0x08009933
 8009904:	08009933 	.word	0x08009933
 8009908:	0800992b 	.word	0x0800992b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800990c:	f7fd fd40 	bl	8007390 <HAL_RCC_GetPCLK1Freq>
 8009910:	6178      	str	r0, [r7, #20]
        break;
 8009912:	e013      	b.n	800993c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009914:	f7fd fd52 	bl	80073bc <HAL_RCC_GetPCLK2Freq>
 8009918:	6178      	str	r0, [r7, #20]
        break;
 800991a:	e00f      	b.n	800993c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800991c:	4b49      	ldr	r3, [pc, #292]	; (8009a44 <UART_SetConfig+0x510>)
 800991e:	617b      	str	r3, [r7, #20]
        break;
 8009920:	e00c      	b.n	800993c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009922:	f7fd fc9f 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009926:	6178      	str	r0, [r7, #20]
        break;
 8009928:	e008      	b.n	800993c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800992a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800992e:	617b      	str	r3, [r7, #20]
        break;
 8009930:	e004      	b.n	800993c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	76bb      	strb	r3, [r7, #26]
        break;
 800993a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d074      	beq.n	8009a2c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	005a      	lsls	r2, r3, #1
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	441a      	add	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	b29b      	uxth	r3, r3
 8009958:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b0f      	cmp	r3, #15
 800995e:	d916      	bls.n	800998e <UART_SetConfig+0x45a>
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009966:	d212      	bcs.n	800998e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	b29b      	uxth	r3, r3
 800996c:	f023 030f 	bic.w	r3, r3, #15
 8009970:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	085b      	lsrs	r3, r3, #1
 8009976:	b29b      	uxth	r3, r3
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	b29a      	uxth	r2, r3
 800997e:	89fb      	ldrh	r3, [r7, #14]
 8009980:	4313      	orrs	r3, r2
 8009982:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	89fa      	ldrh	r2, [r7, #14]
 800998a:	60da      	str	r2, [r3, #12]
 800998c:	e04e      	b.n	8009a2c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	76bb      	strb	r3, [r7, #26]
 8009992:	e04b      	b.n	8009a2c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009994:	7efb      	ldrb	r3, [r7, #27]
 8009996:	2b08      	cmp	r3, #8
 8009998:	d827      	bhi.n	80099ea <UART_SetConfig+0x4b6>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x46c>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099c5 	.word	0x080099c5
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099d5 	.word	0x080099d5
 80099ac:	080099eb 	.word	0x080099eb
 80099b0:	080099db 	.word	0x080099db
 80099b4:	080099eb 	.word	0x080099eb
 80099b8:	080099eb 	.word	0x080099eb
 80099bc:	080099eb 	.word	0x080099eb
 80099c0:	080099e3 	.word	0x080099e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099c4:	f7fd fce4 	bl	8007390 <HAL_RCC_GetPCLK1Freq>
 80099c8:	6178      	str	r0, [r7, #20]
        break;
 80099ca:	e013      	b.n	80099f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099cc:	f7fd fcf6 	bl	80073bc <HAL_RCC_GetPCLK2Freq>
 80099d0:	6178      	str	r0, [r7, #20]
        break;
 80099d2:	e00f      	b.n	80099f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099d4:	4b1b      	ldr	r3, [pc, #108]	; (8009a44 <UART_SetConfig+0x510>)
 80099d6:	617b      	str	r3, [r7, #20]
        break;
 80099d8:	e00c      	b.n	80099f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099da:	f7fd fc43 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 80099de:	6178      	str	r0, [r7, #20]
        break;
 80099e0:	e008      	b.n	80099f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099e6:	617b      	str	r3, [r7, #20]
        break;
 80099e8:	e004      	b.n	80099f4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	76bb      	strb	r3, [r7, #26]
        break;
 80099f2:	bf00      	nop
    }

    if (pclk != 0U)
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d018      	beq.n	8009a2c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	085a      	lsrs	r2, r3, #1
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	441a      	add	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2b0f      	cmp	r3, #15
 8009a14:	d908      	bls.n	8009a28 <UART_SetConfig+0x4f4>
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a1c:	d204      	bcs.n	8009a28 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	60da      	str	r2, [r3, #12]
 8009a26:	e001      	b.n	8009a2c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009a38:	7ebb      	ldrb	r3, [r7, #26]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009a44:	00f42400 	.word	0x00f42400

08009a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00a      	beq.n	8009a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00a      	beq.n	8009a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	430a      	orrs	r2, r1
 8009a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	f003 0304 	and.w	r3, r3, #4
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00a      	beq.n	8009ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00a      	beq.n	8009ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	f003 0310 	and.w	r3, r3, #16
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00a      	beq.n	8009afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01a      	beq.n	8009b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b46:	d10a      	bne.n	8009b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	605a      	str	r2, [r3, #4]
  }
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af02      	add	r7, sp, #8
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009b9a:	f7fa fc17 	bl	80043cc <HAL_GetTick>
 8009b9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0308 	and.w	r3, r3, #8
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d10e      	bne.n	8009bcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f82a 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e020      	b.n	8009c0e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0304 	and.w	r3, r3, #4
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	d10e      	bne.n	8009bf8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f814 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e00a      	b.n	8009c0e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2220      	movs	r2, #32
 8009c02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4613      	mov	r3, r2
 8009c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c26:	e05d      	b.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d059      	beq.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c30:	f7fa fbcc 	bl	80043cc <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d302      	bcc.n	8009c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d11b      	bne.n	8009c7e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c54:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0201 	bic.w	r2, r2, #1
 8009c64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e042      	b.n	8009d04 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02b      	beq.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c9a:	d123      	bne.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ca4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009cb4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689a      	ldr	r2, [r3, #8]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f022 0201 	bic.w	r2, r2, #1
 8009cc4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e00f      	b.n	8009d04 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	69da      	ldr	r2, [r3, #28]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4013      	ands	r3, r2
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2301      	moveq	r3, #1
 8009cf6:	2300      	movne	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d092      	beq.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08c      	sub	sp, #48	; 0x30
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4603      	mov	r3, r0
 8009d16:	71fb      	strb	r3, [r7, #7]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	71bb      	strb	r3, [r7, #6]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009d24:	79bb      	ldrb	r3, [r7, #6]
 8009d26:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8009d28:	797b      	ldrb	r3, [r7, #5]
 8009d2a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009d2c:	f107 030c 	add.w	r3, r7, #12
 8009d30:	2207      	movs	r2, #7
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 f998 	bl	800b06a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d3a:	f107 0318 	add.w	r3, r7, #24
 8009d3e:	2218      	movs	r2, #24
 8009d40:	2100      	movs	r1, #0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 f991 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d48:	233f      	movs	r3, #63	; 0x3f
 8009d4a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8009d4c:	238a      	movs	r3, #138	; 0x8a
 8009d4e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8009d50:	f107 0314 	add.w	r3, r7, #20
 8009d54:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009d56:	2303      	movs	r3, #3
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8009d5a:	f107 030c 	add.w	r3, r7, #12
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8009d60:	2307      	movs	r3, #7
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009d64:	f107 0318 	add.w	r3, r7, #24
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 feb0 	bl	800aad0 <hci_send_req>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	da01      	bge.n	8009d7a <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009d76:	23ff      	movs	r3, #255	; 0xff
 8009d78:	e014      	b.n	8009da4 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009d7a:	7b3b      	ldrb	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8009d80:	7b3b      	ldrb	r3, [r7, #12]
 8009d82:	e00f      	b.n	8009da4 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009d84:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009d8e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009d98:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3730      	adds	r7, #48	; 0x30
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08e      	sub	sp, #56	; 0x38
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009dc0:	f107 0314 	add.w	r3, r7, #20
 8009dc4:	2207      	movs	r2, #7
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 f94e 	bl	800b06a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009dce:	f107 0320 	add.w	r3, r7, #32
 8009dd2:	2218      	movs	r2, #24
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 f947 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009ddc:	233f      	movs	r3, #63	; 0x3f
 8009dde:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8009de0:	238a      	movs	r3, #138	; 0x8a
 8009de2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8009de4:	f107 031c 	add.w	r3, r7, #28
 8009de8:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8009dea:	2301      	movs	r3, #1
 8009dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8009dee:	f107 0314 	add.w	r3, r7, #20
 8009df2:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8009df4:	2307      	movs	r3, #7
 8009df6:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009df8:	f107 0320 	add.w	r3, r7, #32
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fe66 	bl	800aad0 <hci_send_req>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	da01      	bge.n	8009e0e <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8009e0a:	23ff      	movs	r3, #255	; 0xff
 8009e0c:	e014      	b.n	8009e38 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8009e0e:	7d3b      	ldrb	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009e14:	7d3b      	ldrb	r3, [r7, #20]
 8009e16:	e00f      	b.n	8009e38 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009e18:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009e22:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009e2c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3738      	adds	r7, #56	; 0x38
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b095      	sub	sp, #84	; 0x54
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	4623      	mov	r3, r4
 8009e50:	71fb      	strb	r3, [r7, #7]
 8009e52:	4603      	mov	r3, r0
 8009e54:	80bb      	strh	r3, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	807b      	strh	r3, [r7, #2]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009e64:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009e68:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009e6c:	4413      	add	r3, r2
 8009e6e:	330e      	adds	r3, #14
 8009e70:	2b28      	cmp	r3, #40	; 0x28
 8009e72:	d901      	bls.n	8009e78 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009e74:	2342      	movs	r3, #66	; 0x42
 8009e76:	e0ce      	b.n	800a016 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8009e78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009e80:	4413      	add	r3, r2
 8009e82:	79fa      	ldrb	r2, [r7, #7]
 8009e84:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009e88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8009e92:	88bb      	ldrh	r3, [r7, #4]
 8009e94:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009e96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e9a:	f107 0208 	add.w	r2, r7, #8
 8009e9e:	4413      	add	r3, r2
 8009ea0:	88ba      	ldrh	r2, [r7, #4]
 8009ea2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009ea4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8009eae:	887b      	ldrh	r3, [r7, #2]
 8009eb0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8009eb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009eb6:	f107 0208 	add.w	r2, r7, #8
 8009eba:	4413      	add	r3, r2
 8009ebc:	887a      	ldrh	r2, [r7, #2]
 8009ebe:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009ec0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8009eca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ece:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009ed2:	4413      	add	r3, r2
 8009ed4:	79ba      	ldrb	r2, [r7, #6]
 8009ed6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009eda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ede:	3301      	adds	r3, #1
 8009ee0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8009ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ee8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009eec:	4413      	add	r3, r2
 8009eee:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8009ef2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009ef6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009efa:	3301      	adds	r3, #1
 8009efc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8009f00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009f08:	4413      	add	r3, r2
 8009f0a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009f0e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009f12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f16:	3301      	adds	r3, #1
 8009f18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009f1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f20:	f107 0208 	add.w	r2, r7, #8
 8009f24:	4413      	add	r3, r2
 8009f26:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 f891 	bl	800b054 <memcpy>
  indx +=  LocalNameLen;
 8009f32:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009f36:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8009f40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009f48:	4413      	add	r3, r2
 8009f4a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009f4e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009f52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f56:	3301      	adds	r3, #1
 8009f58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009f5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f60:	f107 0208 	add.w	r2, r7, #8
 8009f64:	4413      	add	r3, r2
 8009f66:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009f6a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 f871 	bl	800b054 <memcpy>
  indx +=  ServiceUUIDLen;  
 8009f72:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009f76:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009f80:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009f84:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f8c:	f107 0208 	add.w	r2, r7, #8
 8009f90:	4413      	add	r3, r2
 8009f92:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8009f96:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009f98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8009fa2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009fa6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009faa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009fae:	f107 0208 	add.w	r2, r7, #8
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8009fb8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8009fba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009fbe:	3302      	adds	r3, #2
 8009fc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fc8:	2218      	movs	r2, #24
 8009fca:	2100      	movs	r1, #0
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f001 f84c 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009fd2:	233f      	movs	r3, #63	; 0x3f
 8009fd4:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009fd6:	2383      	movs	r3, #131	; 0x83
 8009fd8:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8009fda:	f107 0308 	add.w	r3, r7, #8
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8009fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009fe4:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8009fe6:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009fea:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8009fec:	2301      	movs	r3, #1
 8009fee:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009ff0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 fd6a 	bl	800aad0 <hci_send_req>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da01      	bge.n	800a006 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800a002:	23ff      	movs	r3, #255	; 0xff
 800a004:	e007      	b.n	800a016 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800a006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <aci_gap_set_discoverable+0x1d4>
    return status;
 800a00e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a012:	e000      	b.n	800a016 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3754      	adds	r7, #84	; 0x54
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd90      	pop	{r4, r7, pc}

0800a01e <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800a01e:	b590      	push	{r4, r7, lr}
 800a020:	b091      	sub	sp, #68	; 0x44
 800a022:	af00      	add	r7, sp, #0
 800a024:	603a      	str	r2, [r7, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	4603      	mov	r3, r0
 800a02a:	71fb      	strb	r3, [r7, #7]
 800a02c:	460b      	mov	r3, r1
 800a02e:	71bb      	strb	r3, [r7, #6]
 800a030:	4613      	mov	r3, r2
 800a032:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800a034:	79fb      	ldrb	r3, [r7, #7]
 800a036:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800a038:	79bb      	ldrb	r3, [r7, #6]
 800a03a:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800a03c:	79bb      	ldrb	r3, [r7, #6]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	f107 030e 	add.w	r3, r7, #14
 800a048:	6814      	ldr	r4, [r2, #0]
 800a04a:	6850      	ldr	r0, [r2, #4]
 800a04c:	6891      	ldr	r1, [r2, #8]
 800a04e:	68d2      	ldr	r2, [r2, #12]
 800a050:	601c      	str	r4, [r3, #0]
 800a052:	6058      	str	r0, [r3, #4]
 800a054:	6099      	str	r1, [r3, #8]
 800a056:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800a058:	797b      	ldrb	r3, [r7, #5]
 800a05a:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800a05c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800a060:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800a062:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a066:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800a06a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a06c:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800a070:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800a074:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a07c:	2218      	movs	r2, #24
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f000 fff2 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a086:	233f      	movs	r3, #63	; 0x3f
 800a088:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800a08a:	2386      	movs	r3, #134	; 0x86
 800a08c:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800a08e:	f107 030c 	add.w	r3, r7, #12
 800a092:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800a094:	231a      	movs	r3, #26
 800a096:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800a098:	f107 030b 	add.w	r3, r7, #11
 800a09c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800a0a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 fd11 	bl	800aad0 <hci_send_req>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	da01      	bge.n	800a0b8 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800a0b4:	23ff      	movs	r3, #255	; 0xff
 800a0b6:	e005      	b.n	800a0c4 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	e000      	b.n	800a0c4 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3744      	adds	r7, #68	; 0x44
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd90      	pop	{r4, r7, pc}

0800a0cc <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b092      	sub	sp, #72	; 0x48
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	2b1f      	cmp	r3, #31
 800a0e2:	d901      	bls.n	800a0e8 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800a0e4:	2342      	movs	r3, #66	; 0x42
 800a0e6:	e03f      	b.n	800a168 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800a0e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a0ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a0f0:	4413      	add	r3, r2
 800a0f2:	79fa      	ldrb	r2, [r7, #7]
 800a0f4:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800a0f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800a102:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a106:	f107 0208 	add.w	r2, r7, #8
 800a10a:	4413      	add	r3, r2
 800a10c:	79fa      	ldrb	r2, [r7, #7]
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 ff9f 	bl	800b054 <memcpy>
  indx +=  AdvLen;
 800a116:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a11a:	79fb      	ldrb	r3, [r7, #7]
 800a11c:	4413      	add	r3, r2
 800a11e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a126:	2218      	movs	r2, #24
 800a128:	2100      	movs	r1, #0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 ff9d 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a130:	233f      	movs	r3, #63	; 0x3f
 800a132:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800a134:	238e      	movs	r3, #142	; 0x8e
 800a136:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800a13e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a142:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800a144:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800a14a:	2301      	movs	r3, #1
 800a14c:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800a14e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a152:	2100      	movs	r1, #0
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fcbb 	bl	800aad0 <hci_send_req>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	da01      	bge.n	800a164 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800a160:	23ff      	movs	r3, #255	; 0xff
 800a162:	e001      	b.n	800a168 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800a164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3748      	adds	r7, #72	; 0x48
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	2218      	movs	r2, #24
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 ff73 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a184:	233f      	movs	r3, #63	; 0x3f
 800a186:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800a188:	f240 1301 	movw	r3, #257	; 0x101
 800a18c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a18e:	1dfb      	adds	r3, r7, #7
 800a190:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a192:	2301      	movs	r3, #1
 800a194:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800a196:	f107 0308 	add.w	r3, r7, #8
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fc97 	bl	800aad0 <hci_send_req>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	da01      	bge.n	800a1ac <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800a1a8:	23ff      	movs	r3, #255	; 0xff
 800a1aa:	e000      	b.n	800a1ae <aci_gatt_init+0x3e>

  return status;
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b090      	sub	sp, #64	; 0x40
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6039      	str	r1, [r7, #0]
 800a1be:	4611      	mov	r1, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	71fb      	strb	r3, [r7, #7]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	71bb      	strb	r3, [r7, #6]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800a1d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a1d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a1dc:	4413      	add	r3, r2
 800a1de:	79fa      	ldrb	r2, [r7, #7]
 800a1e0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a1e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d103      	bne.n	800a1fc <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a1fa:	e002      	b.n	800a202 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800a202:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a206:	f107 020c 	add.w	r2, r7, #12
 800a20a:	4413      	add	r3, r2
 800a20c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	4618      	mov	r0, r3
 800a214:	f000 ff1e 	bl	800b054 <memcpy>
  indx +=  uuid_len;
 800a218:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800a21c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a220:	4413      	add	r3, r2
 800a222:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800a226:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a22a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a22e:	4413      	add	r3, r2
 800a230:	79ba      	ldrb	r2, [r7, #6]
 800a232:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a236:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a23a:	3301      	adds	r3, #1
 800a23c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800a240:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a244:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a248:	4413      	add	r3, r2
 800a24a:	797a      	ldrb	r2, [r7, #5]
 800a24c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a250:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a254:	3301      	adds	r3, #1
 800a256:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a25a:	f107 0320 	add.w	r3, r7, #32
 800a25e:	2203      	movs	r2, #3
 800a260:	2100      	movs	r1, #0
 800a262:	4618      	mov	r0, r3
 800a264:	f000 ff01 	bl	800b06a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a26c:	2218      	movs	r2, #24
 800a26e:	2100      	movs	r1, #0
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fefa 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a276:	233f      	movs	r3, #63	; 0x3f
 800a278:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800a27a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a27e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800a280:	f107 030c 	add.w	r3, r7, #12
 800a284:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800a286:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a28a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800a28c:	f107 0320 	add.w	r3, r7, #32
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a292:	2303      	movs	r3, #3
 800a294:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800a296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a29a:	2100      	movs	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fc17 	bl	800aad0 <hci_send_req>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	da01      	bge.n	800a2ac <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a2a8:	23ff      	movs	r3, #255	; 0xff
 800a2aa:	e00c      	b.n	800a2c6 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800a2ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <aci_gatt_add_serv+0x104>
    return resp.status;
 800a2b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2b8:	e005      	b.n	800a2c6 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800a2ba:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c2:	801a      	strh	r2, [r3, #0]

  return 0;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3740      	adds	r7, #64	; 0x40
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b092      	sub	sp, #72	; 0x48
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	603a      	str	r2, [r7, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	4603      	mov	r3, r0
 800a2da:	80fb      	strh	r3, [r7, #6]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	717b      	strb	r3, [r7, #5]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800a2ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a2f2:	f107 020c 	add.w	r2, r7, #12
 800a2f6:	4413      	add	r3, r2
 800a2f8:	88fa      	ldrh	r2, [r7, #6]
 800a2fa:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a2fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a300:	3302      	adds	r3, #2
 800a302:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800a306:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a30a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a30e:	4413      	add	r3, r2
 800a310:	797a      	ldrb	r2, [r7, #5]
 800a312:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a316:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a31a:	3301      	adds	r3, #1
 800a31c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800a320:	797b      	ldrb	r3, [r7, #5]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d103      	bne.n	800a32e <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800a326:	2302      	movs	r3, #2
 800a328:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a32c:	e002      	b.n	800a334 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800a32e:	2310      	movs	r3, #16
 800a330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a334:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a338:	f107 020c 	add.w	r2, r7, #12
 800a33c:	4413      	add	r3, r2
 800a33e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fe85 	bl	800b054 <memcpy>
  indx +=  uuid_len;
 800a34a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800a34e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a352:	4413      	add	r3, r2
 800a354:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800a358:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a35c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a360:	4413      	add	r3, r2
 800a362:	793a      	ldrb	r2, [r7, #4]
 800a364:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a368:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a36c:	3301      	adds	r3, #1
 800a36e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800a372:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a376:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a37a:	4413      	add	r3, r2
 800a37c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800a380:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a384:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a388:	3301      	adds	r3, #1
 800a38a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800a38e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a392:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a396:	4413      	add	r3, r2
 800a398:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800a39c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a3a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800a3aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800a3b8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a3bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800a3c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800a3d4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a3d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3dc:	3301      	adds	r3, #1
 800a3de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800a3e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800a3f0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a3f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a3fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a402:	2203      	movs	r2, #3
 800a404:	2100      	movs	r1, #0
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fe2f 	bl	800b06a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a40c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a410:	2218      	movs	r2, #24
 800a412:	2100      	movs	r1, #0
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fe28 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a41a:	233f      	movs	r3, #63	; 0x3f
 800a41c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800a41e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a422:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800a424:	f107 030c 	add.w	r3, r7, #12
 800a428:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800a42a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a42e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800a430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a434:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a436:	2303      	movs	r3, #3
 800a438:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800a43a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fb45 	bl	800aad0 <hci_send_req>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da01      	bge.n	800a450 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800a44c:	23ff      	movs	r3, #255	; 0xff
 800a44e:	e00c      	b.n	800a46a <aci_gatt_add_char+0x19c>

  if (resp.status) {
 800a450:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <aci_gatt_add_char+0x190>
    return resp.status;
 800a458:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a45c:	e005      	b.n	800a46a <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800a45e:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800a462:	b29a      	uxth	r2, r3
 800a464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a466:	801a      	strh	r2, [r3, #0]

  return 0;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3748      	adds	r7, #72	; 0x48
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800a472:	b590      	push	{r4, r7, lr}
 800a474:	b0ab      	sub	sp, #172	; 0xac
 800a476:	af00      	add	r7, sp, #0
 800a478:	4604      	mov	r4, r0
 800a47a:	4608      	mov	r0, r1
 800a47c:	4611      	mov	r1, r2
 800a47e:	461a      	mov	r2, r3
 800a480:	4623      	mov	r3, r4
 800a482:	80fb      	strh	r3, [r7, #6]
 800a484:	4603      	mov	r3, r0
 800a486:	80bb      	strh	r3, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
 800a48c:	4613      	mov	r3, r2
 800a48e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a496:	78bb      	ldrb	r3, [r7, #2]
 800a498:	3306      	adds	r3, #6
 800a49a:	2b80      	cmp	r3, #128	; 0x80
 800a49c:	dd01      	ble.n	800a4a2 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800a49e:	2342      	movs	r3, #66	; 0x42
 800a4a0:	e076      	b.n	800a590 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800a4a6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4aa:	f107 0208 	add.w	r2, r7, #8
 800a4ae:	4413      	add	r3, r2
 800a4b0:	88fa      	ldrh	r2, [r7, #6]
 800a4b2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a4b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4b8:	3302      	adds	r3, #2
 800a4ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800a4be:	88bb      	ldrh	r3, [r7, #4]
 800a4c0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800a4c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4c6:	f107 0208 	add.w	r2, r7, #8
 800a4ca:	4413      	add	r3, r2
 800a4cc:	88ba      	ldrh	r2, [r7, #4]
 800a4ce:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a4d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4d4:	3302      	adds	r3, #2
 800a4d6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800a4da:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800a4e2:	4413      	add	r3, r2
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a4ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800a4f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800a4fc:	4413      	add	r3, r2
 800a4fe:	78ba      	ldrb	r2, [r7, #2]
 800a500:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a504:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a508:	3301      	adds	r3, #1
 800a50a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800a50e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a512:	f107 0208 	add.w	r2, r7, #8
 800a516:	4413      	add	r3, r2
 800a518:	78ba      	ldrb	r2, [r7, #2]
 800a51a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fd98 	bl	800b054 <memcpy>
  indx +=  charValueLen;
 800a524:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800a528:	78bb      	ldrb	r3, [r7, #2]
 800a52a:	4413      	add	r3, r2
 800a52c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a530:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a534:	2218      	movs	r2, #24
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 fd96 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a53e:	233f      	movs	r3, #63	; 0x3f
 800a540:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800a544:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a548:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800a54c:	f107 0308 	add.w	r3, r7, #8
 800a550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800a554:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800a55c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800a560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800a564:	2301      	movs	r3, #1
 800a566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a56a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a56e:	2100      	movs	r1, #0
 800a570:	4618      	mov	r0, r3
 800a572:	f000 faad 	bl	800aad0 <hci_send_req>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	da01      	bge.n	800a580 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 800a57c:	23ff      	movs	r3, #255	; 0xff
 800a57e:	e007      	b.n	800a590 <aci_gatt_update_char_value+0x11e>

  if (status) {
 800a580:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <aci_gatt_update_char_value+0x11c>
    return status;
 800a588:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a58c:	e000      	b.n	800a590 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	37ac      	adds	r7, #172	; 0xac
 800a594:	46bd      	mov	sp, r7
 800a596:	bd90      	pop	{r4, r7, pc}

0800a598 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08a      	sub	sp, #40	; 0x28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800a5a6:	f107 0310 	add.w	r3, r7, #16
 800a5aa:	2218      	movs	r2, #24
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 fd5b 	bl	800b06a <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800a5b4:	233f      	movs	r3, #63	; 0x3f
 800a5b6:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800a5b8:	f240 1327 	movw	r3, #295	; 0x127
 800a5bc:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800a5be:	f107 030c 	add.w	r3, r7, #12
 800a5c2:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800a5c8:	f107 030b 	add.w	r3, r7, #11
 800a5cc:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800a5d2:	f107 0310 	add.w	r3, r7, #16
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 fa79 	bl	800aad0 <hci_send_req>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	da01      	bge.n	800a5e8 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800a5e4:	23ff      	movs	r3, #255	; 0xff
 800a5e6:	e000      	b.n	800a5ea <aci_gatt_allow_read+0x52>

    return status;
 800a5e8:	7afb      	ldrb	r3, [r7, #11]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3728      	adds	r7, #40	; 0x28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b0ac      	sub	sp, #176	; 0xb0
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60ba      	str	r2, [r7, #8]
 800a5fa:	607b      	str	r3, [r7, #4]
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]
 800a600:	460b      	mov	r3, r1
 800a602:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a60a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a60e:	2218      	movs	r2, #24
 800a610:	2100      	movs	r1, #0
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fd29 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a618:	233f      	movs	r3, #63	; 0x3f
 800a61a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800a61e:	230d      	movs	r3, #13
 800a620:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800a624:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800a62c:	2301      	movs	r3, #1
 800a62e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800a63a:	2380      	movs	r3, #128	; 0x80
 800a63c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a644:	2100      	movs	r1, #0
 800a646:	4618      	mov	r0, r3
 800a648:	f000 fa42 	bl	800aad0 <hci_send_req>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	da01      	bge.n	800a656 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800a652:	23ff      	movs	r3, #255	; 0xff
 800a654:	e01c      	b.n	800a690 <aci_hal_read_config_data+0x9e>
  
  if(rp.status)
 800a656:	7d3b      	ldrb	r3, [r7, #20]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800a65c:	7d3b      	ldrb	r3, [r7, #20]
 800a65e:	e017      	b.n	800a690 <aci_hal_read_config_data+0x9e>
  
  *data_len_out_p = rq.rlen-1;
 800a660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a664:	b2db      	uxtb	r3, r3
 800a666:	3b01      	subs	r3, #1
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	89ba      	ldrh	r2, [r7, #12]
 800a676:	4293      	cmp	r3, r2
 800a678:	bf28      	it	cs
 800a67a:	4613      	movcs	r3, r2
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	461a      	mov	r2, r3
 800a680:	f107 0314 	add.w	r3, r7, #20
 800a684:	3301      	adds	r3, #1
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fce3 	bl	800b054 <memcpy>
  
  return 0;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	37b0      	adds	r7, #176	; 0xb0
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08a      	sub	sp, #40	; 0x28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	460a      	mov	r2, r1
 800a6a2:	71fb      	strb	r3, [r7, #7]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800a6ac:	79bb      	ldrb	r3, [r7, #6]
 800a6ae:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a6b0:	f107 0310 	add.w	r3, r7, #16
 800a6b4:	2218      	movs	r2, #24
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fcd6 	bl	800b06a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a6be:	233f      	movs	r3, #63	; 0x3f
 800a6c0:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a6c2:	230f      	movs	r3, #15
 800a6c4:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a6d0:	f107 030b 	add.w	r3, r7, #11
 800a6d4:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800a6da:	f107 0310 	add.w	r3, r7, #16
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 f9f5 	bl	800aad0 <hci_send_req>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	da01      	bge.n	800a6f0 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800a6ec:	23ff      	movs	r3, #255	; 0xff
 800a6ee:	e000      	b.n	800a6f2 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800a6f0:	7afb      	ldrb	r3, [r7, #11]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3728      	adds	r7, #40	; 0x28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a6fa:	b590      	push	{r4, r7, lr}
 800a6fc:	b089      	sub	sp, #36	; 0x24
 800a6fe:	af02      	add	r7, sp, #8
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a704:	f107 0410 	add.w	r4, r7, #16
 800a708:	f107 0215 	add.w	r2, r7, #21
 800a70c:	f107 0112 	add.w	r1, r7, #18
 800a710:	f107 0016 	add.w	r0, r7, #22
 800a714:	f107 030e 	add.w	r3, r7, #14
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	4623      	mov	r3, r4
 800a71c:	f000 f853 	bl	800a7c6 <hci_le_read_local_version>
 800a720:	4603      	mov	r3, r0
 800a722:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a724:	7dfb      	ldrb	r3, [r7, #23]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d126      	bne.n	800a778 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800a72a:	8a7b      	ldrh	r3, [r7, #18]
 800a72c:	0a1b      	lsrs	r3, r3, #8
 800a72e:	b29b      	uxth	r3, r3
 800a730:	b2da      	uxtb	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a736:	8a7b      	ldrh	r3, [r7, #18]
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	b21a      	sxth	r2, r3
 800a746:	89fb      	ldrh	r3, [r7, #14]
 800a748:	091b      	lsrs	r3, r3, #4
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	b21b      	sxth	r3, r3
 800a750:	b2db      	uxtb	r3, r3
 800a752:	b21b      	sxth	r3, r3
 800a754:	4313      	orrs	r3, r2
 800a756:	b21b      	sxth	r3, r3
 800a758:	b29a      	uxth	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	b21a      	sxth	r2, r3
 800a764:	89fb      	ldrh	r3, [r7, #14]
 800a766:	b21b      	sxth	r3, r3
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	b21b      	sxth	r3, r3
 800a76e:	4313      	orrs	r3, r2
 800a770:	b21b      	sxth	r3, r3
 800a772:	b29a      	uxth	r2, r3
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800a778:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	371c      	adds	r7, #28
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd90      	pop	{r4, r7, pc}

0800a782 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b088      	sub	sp, #32
 800a786:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a788:	f107 0308 	add.w	r3, r7, #8
 800a78c:	2218      	movs	r2, #24
 800a78e:	2100      	movs	r1, #0
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fc6a 	bl	800b06a <memset>
  rq.ogf = OGF_HOST_CTL;
 800a796:	2303      	movs	r3, #3
 800a798:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800a79a:	2303      	movs	r3, #3
 800a79c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a79e:	1dfb      	adds	r3, r7, #7
 800a7a0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a7a6:	f107 0308 	add.w	r3, r7, #8
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 f98f 	bl	800aad0 <hci_send_req>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da01      	bge.n	800a7bc <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800a7b8:	23ff      	movs	r3, #255	; 0xff
 800a7ba:	e000      	b.n	800a7be <hci_reset+0x3c>
  
  return status;  
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3720      	adds	r7, #32
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b08e      	sub	sp, #56	; 0x38
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	607a      	str	r2, [r7, #4]
 800a7d2:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a7d4:	f107 0314 	add.w	r3, r7, #20
 800a7d8:	2209      	movs	r2, #9
 800a7da:	2100      	movs	r1, #0
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 fc44 	bl	800b06a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a7e2:	f107 0320 	add.w	r3, r7, #32
 800a7e6:	2218      	movs	r2, #24
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fc3d 	bl	800b06a <memset>
  rq.ogf = OGF_INFO_PARAM;
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800a800:	f107 0314 	add.w	r3, r7, #20
 800a804:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a806:	2309      	movs	r3, #9
 800a808:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a80a:	f107 0320 	add.w	r3, r7, #32
 800a80e:	2100      	movs	r1, #0
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f95d 	bl	800aad0 <hci_send_req>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	da01      	bge.n	800a820 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a81c:	23ff      	movs	r3, #255	; 0xff
 800a81e:	e018      	b.n	800a852 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800a820:	7d3b      	ldrb	r3, [r7, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <hci_le_read_local_version+0x64>
    return resp.status;
 800a826:	7d3b      	ldrb	r3, [r7, #20]
 800a828:	e013      	b.n	800a852 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800a82a:	7d7a      	ldrb	r2, [r7, #21]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800a830:	8afa      	ldrh	r2, [r7, #22]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a836:	7e3a      	ldrb	r2, [r7, #24]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a83c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a840:	b29a      	uxth	r2, r3
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a846:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3738      	adds	r7, #56	; 0x38
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b092      	sub	sp, #72	; 0x48
 800a85e:	af00      	add	r7, sp, #0
 800a860:	4603      	mov	r3, r0
 800a862:	6039      	str	r1, [r7, #0]
 800a864:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a866:	f107 0310 	add.w	r3, r7, #16
 800a86a:	2220      	movs	r2, #32
 800a86c:	2100      	movs	r1, #0
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fbfb 	bl	800b06a <memset>
  scan_resp_cp.length = length;
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	2b1f      	cmp	r3, #31
 800a87c:	bf28      	it	cs
 800a87e:	231f      	movcs	r3, #31
 800a880:	b2db      	uxtb	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	f107 0310 	add.w	r3, r7, #16
 800a888:	3301      	adds	r3, #1
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fbe1 	bl	800b054 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a896:	2218      	movs	r2, #24
 800a898:	2100      	movs	r1, #0
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fbe5 	bl	800b06a <memset>
  rq.ogf = OGF_LE_CTL;
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a8a4:	2309      	movs	r3, #9
 800a8a6:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800a8a8:	f107 0310 	add.w	r3, r7, #16
 800a8ac:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a8ae:	2320      	movs	r3, #32
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800a8b2:	f107 030f 	add.w	r3, r7, #15
 800a8b6:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a8bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 f904 	bl	800aad0 <hci_send_req>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	da01      	bge.n	800a8d2 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a8ce:	23ff      	movs	r3, #255	; 0xff
 800a8d0:	e000      	b.n	800a8d4 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3748      	adds	r7, #72	; 0x48
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3308      	adds	r3, #8
 800a8e8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d001      	beq.n	800a8f6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e00c      	b.n	800a910 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3302      	adds	r3, #2
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a904:	3b03      	subs	r3, #3
 800a906:	429a      	cmp	r2, r3
 800a908:	d001      	beq.n	800a90e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a90a:	2302      	movs	r3, #2
 800a90c:	e000      	b.n	800a910 <verify_packet+0x34>
  
  return 0;      
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b0a6      	sub	sp, #152	; 0x98
 800a920:	af00      	add	r7, sp, #0
 800a922:	607b      	str	r3, [r7, #4]
 800a924:	4603      	mov	r3, r0
 800a926:	81fb      	strh	r3, [r7, #14]
 800a928:	460b      	mov	r3, r1
 800a92a:	81bb      	strh	r3, [r7, #12]
 800a92c:	4613      	mov	r3, r2
 800a92e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a930:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a938:	b21a      	sxth	r2, r3
 800a93a:	89fb      	ldrh	r3, [r7, #14]
 800a93c:	029b      	lsls	r3, r3, #10
 800a93e:	b21b      	sxth	r3, r3
 800a940:	4313      	orrs	r3, r2
 800a942:	b21b      	sxth	r3, r3
 800a944:	b29b      	uxth	r3, r3
 800a946:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a94c:	2301      	movs	r3, #1
 800a94e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a950:	f107 0318 	add.w	r3, r7, #24
 800a954:	3301      	adds	r3, #1
 800a956:	461a      	mov	r2, r3
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	8819      	ldrh	r1, [r3, #0]
 800a95e:	789b      	ldrb	r3, [r3, #2]
 800a960:	8011      	strh	r1, [r2, #0]
 800a962:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a964:	f107 0318 	add.w	r3, r7, #24
 800a968:	3304      	adds	r3, #4
 800a96a:	7afa      	ldrb	r2, [r7, #11]
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 fb70 	bl	800b054 <memcpy>
  
  if (hciContext.io.Send)
 800a974:	4b08      	ldr	r3, [pc, #32]	; (800a998 <send_cmd+0x7c>)
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d009      	beq.n	800a990 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <send_cmd+0x7c>)
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	7afa      	ldrb	r2, [r7, #11]
 800a982:	b292      	uxth	r2, r2
 800a984:	3204      	adds	r2, #4
 800a986:	b291      	uxth	r1, r2
 800a988:	f107 0218 	add.w	r2, r7, #24
 800a98c:	4610      	mov	r0, r2
 800a98e:	4798      	blx	r3
  }
}
 800a990:	bf00      	nop
 800a992:	3798      	adds	r7, #152	; 0x98
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	200004b4 	.word	0x200004b4

0800a99c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a9a6:	e00a      	b.n	800a9be <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a9a8:	f107 030c 	add.w	r3, r7, #12
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6838      	ldr	r0, [r7, #0]
 800a9b0:	f000 fada 	bl	800af68 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fa49 	bl	800ae50 <list_insert_head>
  while (!list_is_empty(src_list))
 800a9be:	6838      	ldr	r0, [r7, #0]
 800a9c0:	f000 fa26 	bl	800ae10 <list_is_empty>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0ee      	beq.n	800a9a8 <move_list+0xc>
  }
}
 800a9ca:	bf00      	nop
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a9da:	e009      	b.n	800a9f0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a9dc:	1d3b      	adds	r3, r7, #4
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4808      	ldr	r0, [pc, #32]	; (800aa04 <free_event_list+0x30>)
 800a9e2:	f000 fa9c 	bl	800af1e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4807      	ldr	r0, [pc, #28]	; (800aa08 <free_event_list+0x34>)
 800a9ec:	f000 fa54 	bl	800ae98 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a9f0:	4805      	ldr	r0, [pc, #20]	; (800aa08 <free_event_list+0x34>)
 800a9f2:	f000 fade 	bl	800afb2 <list_get_size>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	ddef      	ble.n	800a9dc <free_event_list+0x8>
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200007c4 	.word	0x200007c4
 800aa08:	200007bc 	.word	0x200007bc

0800aa0c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800aa1c:	4a18      	ldr	r2, [pc, #96]	; (800aa80 <hci_init+0x74>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800aa22:	4818      	ldr	r0, [pc, #96]	; (800aa84 <hci_init+0x78>)
 800aa24:	f000 f9e4 	bl	800adf0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800aa28:	4817      	ldr	r0, [pc, #92]	; (800aa88 <hci_init+0x7c>)
 800aa2a:	f000 f9e1 	bl	800adf0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800aa2e:	f7f7 ffb1 	bl	8002994 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800aa32:	2300      	movs	r3, #0
 800aa34:	73fb      	strb	r3, [r7, #15]
 800aa36:	e00c      	b.n	800aa52 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	228c      	movs	r2, #140	; 0x8c
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
 800aa40:	4a12      	ldr	r2, [pc, #72]	; (800aa8c <hci_init+0x80>)
 800aa42:	4413      	add	r3, r2
 800aa44:	4619      	mov	r1, r3
 800aa46:	480f      	ldr	r0, [pc, #60]	; (800aa84 <hci_init+0x78>)
 800aa48:	f000 fa26 	bl	800ae98 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	73fb      	strb	r3, [r7, #15]
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	2b04      	cmp	r3, #4
 800aa56:	d9ef      	bls.n	800aa38 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800aa58:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <hci_init+0x74>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <hci_init+0x5c>
 800aa60:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <hci_init+0x74>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2000      	movs	r0, #0
 800aa66:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800aa68:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <hci_init+0x74>)
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <hci_init+0x6a>
 800aa70:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <hci_init+0x74>)
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	4798      	blx	r3
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200004b4 	.word	0x200004b4
 800aa84:	200007bc 	.word	0x200007bc
 800aa88:	200007c4 	.word	0x200007c4
 800aa8c:	200001f8 	.word	0x200001f8

0800aa90 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a0b      	ldr	r2, [pc, #44]	; (800aacc <hci_register_io_bus+0x3c>)
 800aa9e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	4a09      	ldr	r2, [pc, #36]	; (800aacc <hci_register_io_bus+0x3c>)
 800aaa6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	4a07      	ldr	r2, [pc, #28]	; (800aacc <hci_register_io_bus+0x3c>)
 800aaae:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	4a05      	ldr	r2, [pc, #20]	; (800aacc <hci_register_io_bus+0x3c>)
 800aab6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	4a03      	ldr	r2, [pc, #12]	; (800aacc <hci_register_io_bus+0x3c>)
 800aabe:	6093      	str	r3, [r2, #8]
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	200004b4 	.word	0x200004b4

0800aad0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08e      	sub	sp, #56	; 0x38
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	885b      	ldrh	r3, [r3, #2]
 800aae0:	b21b      	sxth	r3, r3
 800aae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aae6:	b21a      	sxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	029b      	lsls	r3, r3, #10
 800aaee:	b21b      	sxth	r3, r3
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	b21b      	sxth	r3, r3
 800aaf4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 f976 	bl	800adf0 <list_init_head>

  free_event_list();
 800ab04:	f7ff ff66 	bl	800a9d4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	8818      	ldrh	r0, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	8859      	ldrh	r1, [r3, #2]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f7ff feff 	bl	800a91c <send_cmd>
  
  if (async)
 800ab1e:	78fb      	ldrb	r3, [r7, #3]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <hci_send_req+0x58>
  {
    return 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e0e2      	b.n	800acee <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800ab28:	f7f9 fc50 	bl	80043cc <HAL_GetTick>
 800ab2c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ab2e:	f7f9 fc4d 	bl	80043cc <HAL_GetTick>
 800ab32:	4602      	mov	r2, r0
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab3c:	f200 80b3 	bhi.w	800aca6 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800ab40:	486d      	ldr	r0, [pc, #436]	; (800acf8 <hci_send_req+0x228>)
 800ab42:	f000 f965 	bl	800ae10 <list_is_empty>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d000      	beq.n	800ab4e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ab4c:	e7ef      	b.n	800ab2e <hci_send_req+0x5e>
      {
        break;
 800ab4e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ab50:	f107 0310 	add.w	r3, r7, #16
 800ab54:	4619      	mov	r1, r3
 800ab56:	4868      	ldr	r0, [pc, #416]	; (800acf8 <hci_send_req+0x228>)
 800ab58:	f000 f9e1 	bl	800af1e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	3308      	adds	r3, #8
 800ab60:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d17a      	bne.n	800ac60 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	3308      	adds	r3, #8
 800ab74:	3303      	adds	r3, #3
 800ab76:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ab7e:	3b03      	subs	r3, #3
 800ab80:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b0f      	cmp	r3, #15
 800ab88:	d00a      	beq.n	800aba0 <hci_send_req+0xd0>
 800ab8a:	2b0f      	cmp	r3, #15
 800ab8c:	dc02      	bgt.n	800ab94 <hci_send_req+0xc4>
 800ab8e:	2b0e      	cmp	r3, #14
 800ab90:	d028      	beq.n	800abe4 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800ab92:	e06a      	b.n	800ac6a <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 800ab94:	2b10      	cmp	r3, #16
 800ab96:	f000 8088 	beq.w	800acaa <hci_send_req+0x1da>
 800ab9a:	2b3e      	cmp	r3, #62	; 0x3e
 800ab9c:	d042      	beq.n	800ac24 <hci_send_req+0x154>
        break;
 800ab9e:	e064      	b.n	800ac6a <hci_send_req+0x19a>
        cs = (void *) ptr;
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	885b      	ldrh	r3, [r3, #2]
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800abac:	429a      	cmp	r2, r3
 800abae:	d17e      	bne.n	800acae <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	2b0f      	cmp	r3, #15
 800abb6:	d004      	beq.n	800abc2 <hci_send_req+0xf2>
          if (cs->status) {
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d051      	beq.n	800ac64 <hci_send_req+0x194>
            goto failed;
 800abc0:	e078      	b.n	800acb4 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	695a      	ldr	r2, [r3, #20]
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	429a      	cmp	r2, r3
 800abca:	bf28      	it	cs
 800abcc:	461a      	movcs	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6918      	ldr	r0, [r3, #16]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	461a      	mov	r2, r3
 800abdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abde:	f000 fa39 	bl	800b054 <memcpy>
        goto done;
 800abe2:	e078      	b.n	800acd6 <hci_send_req+0x206>
        cc = (void *) ptr;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d15d      	bne.n	800acb2 <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	3303      	adds	r3, #3
 800abfa:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	3b03      	subs	r3, #3
 800ac00:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695a      	ldr	r2, [r3, #20]
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	bf28      	it	cs
 800ac0c:	461a      	movcs	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6918      	ldr	r0, [r3, #16]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac1e:	f000 fa19 	bl	800b054 <memcpy>
        goto done;
 800ac22:	e058      	b.n	800acd6 <hci_send_req+0x206>
        me = (void *) ptr;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d118      	bne.n	800ac68 <hci_send_req+0x198>
        len -= 1;
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	695a      	ldr	r2, [r3, #20]
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	bf28      	it	cs
 800ac46:	461a      	movcs	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6918      	ldr	r0, [r3, #16]
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	1c59      	adds	r1, r3, #1
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f000 f9fb 	bl	800b054 <memcpy>
        goto done;
 800ac5e:	e03a      	b.n	800acd6 <hci_send_req+0x206>
      }
    }
 800ac60:	bf00      	nop
 800ac62:	e002      	b.n	800ac6a <hci_send_req+0x19a>
          break;
 800ac64:	bf00      	nop
 800ac66:	e000      	b.n	800ac6a <hci_send_req+0x19a>
          break;
 800ac68:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800ac6a:	4824      	ldr	r0, [pc, #144]	; (800acfc <hci_send_req+0x22c>)
 800ac6c:	f000 f8d0 	bl	800ae10 <list_is_empty>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00d      	beq.n	800ac92 <hci_send_req+0x1c2>
 800ac76:	4820      	ldr	r0, [pc, #128]	; (800acf8 <hci_send_req+0x228>)
 800ac78:	f000 f8ca 	bl	800ae10 <list_is_empty>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d007      	beq.n	800ac92 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	4619      	mov	r1, r3
 800ac86:	481d      	ldr	r0, [pc, #116]	; (800acfc <hci_send_req+0x22c>)
 800ac88:	f000 f906 	bl	800ae98 <list_insert_tail>
      hciReadPacket=NULL;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	613b      	str	r3, [r7, #16]
 800ac90:	e008      	b.n	800aca4 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	f107 0308 	add.w	r3, r7, #8
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 f8fc 	bl	800ae98 <list_insert_tail>
      hciReadPacket=NULL;
 800aca0:	2300      	movs	r3, #0
 800aca2:	613b      	str	r3, [r7, #16]
  {
 800aca4:	e740      	b.n	800ab28 <hci_send_req+0x58>
        goto failed;
 800aca6:	bf00      	nop
 800aca8:	e004      	b.n	800acb4 <hci_send_req+0x1e4>
        goto failed;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <hci_send_req+0x1e4>
          goto failed;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <hci_send_req+0x1e4>
          goto failed;
 800acb2:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	4619      	mov	r1, r3
 800acbe:	480f      	ldr	r0, [pc, #60]	; (800acfc <hci_send_req+0x22c>)
 800acc0:	f000 f8c6 	bl	800ae50 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800acc4:	f107 0308 	add.w	r3, r7, #8
 800acc8:	4619      	mov	r1, r3
 800acca:	480b      	ldr	r0, [pc, #44]	; (800acf8 <hci_send_req+0x228>)
 800accc:	f7ff fe66 	bl	800a99c <move_list>

  return -1;
 800acd0:	f04f 33ff 	mov.w	r3, #4294967295
 800acd4:	e00b      	b.n	800acee <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	4619      	mov	r1, r3
 800acda:	4808      	ldr	r0, [pc, #32]	; (800acfc <hci_send_req+0x22c>)
 800acdc:	f000 f8b8 	bl	800ae50 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800ace0:	f107 0308 	add.w	r3, r7, #8
 800ace4:	4619      	mov	r1, r3
 800ace6:	4804      	ldr	r0, [pc, #16]	; (800acf8 <hci_send_req+0x228>)
 800ace8:	f7ff fe58 	bl	800a99c <move_list>

  return 0;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3738      	adds	r7, #56	; 0x38
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	200007c4 	.word	0x200007c4
 800acfc:	200007bc 	.word	0x200007bc

0800ad00 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800ad0a:	e013      	b.n	800ad34 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800ad0c:	1d3b      	adds	r3, r7, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	480d      	ldr	r0, [pc, #52]	; (800ad48 <hci_user_evt_proc+0x48>)
 800ad12:	f000 f904 	bl	800af1e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ad16:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <hci_user_evt_proc+0x4c>)
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d005      	beq.n	800ad2a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <hci_user_evt_proc+0x4c>)
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	3208      	adds	r2, #8
 800ad26:	4610      	mov	r0, r2
 800ad28:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4808      	ldr	r0, [pc, #32]	; (800ad50 <hci_user_evt_proc+0x50>)
 800ad30:	f000 f8b2 	bl	800ae98 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800ad34:	4804      	ldr	r0, [pc, #16]	; (800ad48 <hci_user_evt_proc+0x48>)
 800ad36:	f000 f86b 	bl	800ae10 <list_is_empty>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0e5      	beq.n	800ad0c <hci_user_evt_proc+0xc>
  }
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	200007c4 	.word	0x200007c4
 800ad4c:	200004b4 	.word	0x200004b4
 800ad50:	200007bc 	.word	0x200007bc

0800ad54 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800ad64:	481f      	ldr	r0, [pc, #124]	; (800ade4 <hci_notify_asynch_evt+0x90>)
 800ad66:	f000 f853 	bl	800ae10 <list_is_empty>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d132      	bne.n	800add6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800ad70:	f107 030c 	add.w	r3, r7, #12
 800ad74:	4619      	mov	r1, r3
 800ad76:	481b      	ldr	r0, [pc, #108]	; (800ade4 <hci_notify_asynch_evt+0x90>)
 800ad78:	f000 f8d1 	bl	800af1e <list_remove_head>
    
    if (hciContext.io.Receive)
 800ad7c:	4b1a      	ldr	r3, [pc, #104]	; (800ade8 <hci_notify_asynch_evt+0x94>)
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d02a      	beq.n	800adda <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800ad84:	4b18      	ldr	r3, [pc, #96]	; (800ade8 <hci_notify_asynch_evt+0x94>)
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	3208      	adds	r2, #8
 800ad8c:	2180      	movs	r1, #128	; 0x80
 800ad8e:	4610      	mov	r0, r2
 800ad90:	4798      	blx	r3
 800ad92:	4603      	mov	r3, r0
 800ad94:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800ad96:	7cfb      	ldrb	r3, [r7, #19]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d016      	beq.n	800adca <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	7cfa      	ldrb	r2, [r7, #19]
 800ada0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff fd98 	bl	800a8dc <verify_packet>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d105      	bne.n	800adbe <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4619      	mov	r1, r3
 800adb6:	480d      	ldr	r0, [pc, #52]	; (800adec <hci_notify_asynch_evt+0x98>)
 800adb8:	f000 f86e 	bl	800ae98 <list_insert_tail>
 800adbc:	e00d      	b.n	800adda <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4619      	mov	r1, r3
 800adc2:	4808      	ldr	r0, [pc, #32]	; (800ade4 <hci_notify_asynch_evt+0x90>)
 800adc4:	f000 f844 	bl	800ae50 <list_insert_head>
 800adc8:	e007      	b.n	800adda <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4619      	mov	r1, r3
 800adce:	4805      	ldr	r0, [pc, #20]	; (800ade4 <hci_notify_asynch_evt+0x90>)
 800add0:	f000 f83e 	bl	800ae50 <list_insert_head>
 800add4:	e001      	b.n	800adda <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800add6:	2301      	movs	r3, #1
 800add8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800adda:	697b      	ldr	r3, [r7, #20]

}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	200007bc 	.word	0x200007bc
 800ade8:	200004b4 	.word	0x200004b4
 800adec:	200007c4 	.word	0x200007c4

0800adf0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	605a      	str	r2, [r3, #4]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae18:	f3ef 8310 	mrs	r3, PRIMASK
 800ae1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae22:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d102      	bne.n	800ae34 <list_is_empty+0x24>
  {
    return_value = 1;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]
 800ae32:	e001      	b.n	800ae38 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	75fb      	strb	r3, [r7, #23]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	371c      	adds	r7, #28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae60:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae64:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	605a      	str	r2, [r3, #4]
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ae8c:	bf00      	nop
 800ae8e:	371c      	adds	r7, #28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aea2:	f3ef 8310 	mrs	r3, PRIMASK
 800aea6:	60fb      	str	r3, [r7, #12]
  return(result);
 800aea8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aeaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeac:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800aed4:	bf00      	nop
 800aed6:	371c      	adds	r7, #28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aee8:	f3ef 8310 	mrs	r3, PRIMASK
 800aeec:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeee:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aef2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	6812      	ldr	r2, [r2, #0]
 800aefc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	6852      	ldr	r2, [r2, #4]
 800af06:	605a      	str	r2, [r3, #4]
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800af12:	bf00      	nop
 800af14:	371c      	adds	r7, #28
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b086      	sub	sp, #24
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af28:	f3ef 8310 	mrs	r3, PRIMASK
 800af2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af32:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff ffcd 	bl	800aee0 <list_remove_node>
  (*node)->next = NULL;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2200      	movs	r2, #0
 800af54:	605a      	str	r2, [r3, #4]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800af60:	bf00      	nop
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af72:	f3ef 8310 	mrs	r3, PRIMASK
 800af76:	60fb      	str	r3, [r7, #12]
  return(result);
 800af78:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af7c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685a      	ldr	r2, [r3, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff ffa8 	bl	800aee0 <list_remove_node>
  (*node)->next = NULL;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2200      	movs	r2, #0
 800af9e:	605a      	str	r2, [r3, #4]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800afaa:	bf00      	nop
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b089      	sub	sp, #36	; 0x24
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  int size = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afbe:	f3ef 8310 	mrs	r3, PRIMASK
 800afc2:	613b      	str	r3, [r7, #16]
  return(result);
 800afc4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800afc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afc8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800afd0:	e005      	b.n	800afde <list_get_size+0x2c>
  {
    size++;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3301      	adds	r3, #1
 800afd6:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800afde:	69ba      	ldr	r2, [r7, #24]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d1f5      	bne.n	800afd2 <list_get_size+0x20>
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800aff0:	69fb      	ldr	r3, [r7, #28]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3724      	adds	r7, #36	; 0x24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
	...

0800b000 <__errno>:
 800b000:	4b01      	ldr	r3, [pc, #4]	; (800b008 <__errno+0x8>)
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	20000024 	.word	0x20000024

0800b00c <__libc_init_array>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	4e0d      	ldr	r6, [pc, #52]	; (800b044 <__libc_init_array+0x38>)
 800b010:	4c0d      	ldr	r4, [pc, #52]	; (800b048 <__libc_init_array+0x3c>)
 800b012:	1ba4      	subs	r4, r4, r6
 800b014:	10a4      	asrs	r4, r4, #2
 800b016:	2500      	movs	r5, #0
 800b018:	42a5      	cmp	r5, r4
 800b01a:	d109      	bne.n	800b030 <__libc_init_array+0x24>
 800b01c:	4e0b      	ldr	r6, [pc, #44]	; (800b04c <__libc_init_array+0x40>)
 800b01e:	4c0c      	ldr	r4, [pc, #48]	; (800b050 <__libc_init_array+0x44>)
 800b020:	f000 ff92 	bl	800bf48 <_init>
 800b024:	1ba4      	subs	r4, r4, r6
 800b026:	10a4      	asrs	r4, r4, #2
 800b028:	2500      	movs	r5, #0
 800b02a:	42a5      	cmp	r5, r4
 800b02c:	d105      	bne.n	800b03a <__libc_init_array+0x2e>
 800b02e:	bd70      	pop	{r4, r5, r6, pc}
 800b030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b034:	4798      	blx	r3
 800b036:	3501      	adds	r5, #1
 800b038:	e7ee      	b.n	800b018 <__libc_init_array+0xc>
 800b03a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b03e:	4798      	blx	r3
 800b040:	3501      	adds	r5, #1
 800b042:	e7f2      	b.n	800b02a <__libc_init_array+0x1e>
 800b044:	0800c054 	.word	0x0800c054
 800b048:	0800c054 	.word	0x0800c054
 800b04c:	0800c054 	.word	0x0800c054
 800b050:	0800c058 	.word	0x0800c058

0800b054 <memcpy>:
 800b054:	b510      	push	{r4, lr}
 800b056:	1e43      	subs	r3, r0, #1
 800b058:	440a      	add	r2, r1
 800b05a:	4291      	cmp	r1, r2
 800b05c:	d100      	bne.n	800b060 <memcpy+0xc>
 800b05e:	bd10      	pop	{r4, pc}
 800b060:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b064:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b068:	e7f7      	b.n	800b05a <memcpy+0x6>

0800b06a <memset>:
 800b06a:	4402      	add	r2, r0
 800b06c:	4603      	mov	r3, r0
 800b06e:	4293      	cmp	r3, r2
 800b070:	d100      	bne.n	800b074 <memset+0xa>
 800b072:	4770      	bx	lr
 800b074:	f803 1b01 	strb.w	r1, [r3], #1
 800b078:	e7f9      	b.n	800b06e <memset+0x4>
	...

0800b07c <srand>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4b0d      	ldr	r3, [pc, #52]	; (800b0b4 <srand+0x38>)
 800b080:	681c      	ldr	r4, [r3, #0]
 800b082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b084:	4605      	mov	r5, r0
 800b086:	b97b      	cbnz	r3, 800b0a8 <srand+0x2c>
 800b088:	2018      	movs	r0, #24
 800b08a:	f000 f86f 	bl	800b16c <malloc>
 800b08e:	4a0a      	ldr	r2, [pc, #40]	; (800b0b8 <srand+0x3c>)
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <srand+0x40>)
 800b092:	63a0      	str	r0, [r4, #56]	; 0x38
 800b094:	e9c0 2300 	strd	r2, r3, [r0]
 800b098:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <srand+0x44>)
 800b09a:	6083      	str	r3, [r0, #8]
 800b09c:	230b      	movs	r3, #11
 800b09e:	8183      	strh	r3, [r0, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b0a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	611d      	str	r5, [r3, #16]
 800b0ae:	615a      	str	r2, [r3, #20]
 800b0b0:	bd38      	pop	{r3, r4, r5, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000024 	.word	0x20000024
 800b0b8:	abcd330e 	.word	0xabcd330e
 800b0bc:	e66d1234 	.word	0xe66d1234
 800b0c0:	0005deec 	.word	0x0005deec

0800b0c4 <rand>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4b13      	ldr	r3, [pc, #76]	; (800b114 <rand+0x50>)
 800b0c8:	681c      	ldr	r4, [r3, #0]
 800b0ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0cc:	b97b      	cbnz	r3, 800b0ee <rand+0x2a>
 800b0ce:	2018      	movs	r0, #24
 800b0d0:	f000 f84c 	bl	800b16c <malloc>
 800b0d4:	4a10      	ldr	r2, [pc, #64]	; (800b118 <rand+0x54>)
 800b0d6:	4b11      	ldr	r3, [pc, #68]	; (800b11c <rand+0x58>)
 800b0d8:	63a0      	str	r0, [r4, #56]	; 0x38
 800b0da:	e9c0 2300 	strd	r2, r3, [r0]
 800b0de:	4b10      	ldr	r3, [pc, #64]	; (800b120 <rand+0x5c>)
 800b0e0:	6083      	str	r3, [r0, #8]
 800b0e2:	230b      	movs	r3, #11
 800b0e4:	8183      	strh	r3, [r0, #12]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b0ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b0f0:	480c      	ldr	r0, [pc, #48]	; (800b124 <rand+0x60>)
 800b0f2:	690a      	ldr	r2, [r1, #16]
 800b0f4:	694b      	ldr	r3, [r1, #20]
 800b0f6:	4c0c      	ldr	r4, [pc, #48]	; (800b128 <rand+0x64>)
 800b0f8:	4350      	muls	r0, r2
 800b0fa:	fb04 0003 	mla	r0, r4, r3, r0
 800b0fe:	fba2 2304 	umull	r2, r3, r2, r4
 800b102:	4403      	add	r3, r0
 800b104:	1c54      	adds	r4, r2, #1
 800b106:	f143 0500 	adc.w	r5, r3, #0
 800b10a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800b10e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	20000024 	.word	0x20000024
 800b118:	abcd330e 	.word	0xabcd330e
 800b11c:	e66d1234 	.word	0xe66d1234
 800b120:	0005deec 	.word	0x0005deec
 800b124:	5851f42d 	.word	0x5851f42d
 800b128:	4c957f2d 	.word	0x4c957f2d

0800b12c <siprintf>:
 800b12c:	b40e      	push	{r1, r2, r3}
 800b12e:	b500      	push	{lr}
 800b130:	b09c      	sub	sp, #112	; 0x70
 800b132:	ab1d      	add	r3, sp, #116	; 0x74
 800b134:	9002      	str	r0, [sp, #8]
 800b136:	9006      	str	r0, [sp, #24]
 800b138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b13c:	4809      	ldr	r0, [pc, #36]	; (800b164 <siprintf+0x38>)
 800b13e:	9107      	str	r1, [sp, #28]
 800b140:	9104      	str	r1, [sp, #16]
 800b142:	4909      	ldr	r1, [pc, #36]	; (800b168 <siprintf+0x3c>)
 800b144:	f853 2b04 	ldr.w	r2, [r3], #4
 800b148:	9105      	str	r1, [sp, #20]
 800b14a:	6800      	ldr	r0, [r0, #0]
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	a902      	add	r1, sp, #8
 800b150:	f000 f916 	bl	800b380 <_svfiprintf_r>
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	2200      	movs	r2, #0
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	b01c      	add	sp, #112	; 0x70
 800b15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b160:	b003      	add	sp, #12
 800b162:	4770      	bx	lr
 800b164:	20000024 	.word	0x20000024
 800b168:	ffff0208 	.word	0xffff0208

0800b16c <malloc>:
 800b16c:	4b02      	ldr	r3, [pc, #8]	; (800b178 <malloc+0xc>)
 800b16e:	4601      	mov	r1, r0
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	f000 b851 	b.w	800b218 <_malloc_r>
 800b176:	bf00      	nop
 800b178:	20000024 	.word	0x20000024

0800b17c <_free_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4605      	mov	r5, r0
 800b180:	2900      	cmp	r1, #0
 800b182:	d045      	beq.n	800b210 <_free_r+0x94>
 800b184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b188:	1f0c      	subs	r4, r1, #4
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bfb8      	it	lt
 800b18e:	18e4      	addlt	r4, r4, r3
 800b190:	f000 fb9f 	bl	800b8d2 <__malloc_lock>
 800b194:	4a1f      	ldr	r2, [pc, #124]	; (800b214 <_free_r+0x98>)
 800b196:	6813      	ldr	r3, [r2, #0]
 800b198:	4610      	mov	r0, r2
 800b19a:	b933      	cbnz	r3, 800b1aa <_free_r+0x2e>
 800b19c:	6063      	str	r3, [r4, #4]
 800b19e:	6014      	str	r4, [r2, #0]
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a6:	f000 bb95 	b.w	800b8d4 <__malloc_unlock>
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	d90c      	bls.n	800b1c8 <_free_r+0x4c>
 800b1ae:	6821      	ldr	r1, [r4, #0]
 800b1b0:	1862      	adds	r2, r4, r1
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	bf04      	itt	eq
 800b1b6:	681a      	ldreq	r2, [r3, #0]
 800b1b8:	685b      	ldreq	r3, [r3, #4]
 800b1ba:	6063      	str	r3, [r4, #4]
 800b1bc:	bf04      	itt	eq
 800b1be:	1852      	addeq	r2, r2, r1
 800b1c0:	6022      	streq	r2, [r4, #0]
 800b1c2:	6004      	str	r4, [r0, #0]
 800b1c4:	e7ec      	b.n	800b1a0 <_free_r+0x24>
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	b10a      	cbz	r2, 800b1d0 <_free_r+0x54>
 800b1cc:	42a2      	cmp	r2, r4
 800b1ce:	d9fa      	bls.n	800b1c6 <_free_r+0x4a>
 800b1d0:	6819      	ldr	r1, [r3, #0]
 800b1d2:	1858      	adds	r0, r3, r1
 800b1d4:	42a0      	cmp	r0, r4
 800b1d6:	d10b      	bne.n	800b1f0 <_free_r+0x74>
 800b1d8:	6820      	ldr	r0, [r4, #0]
 800b1da:	4401      	add	r1, r0
 800b1dc:	1858      	adds	r0, r3, r1
 800b1de:	4282      	cmp	r2, r0
 800b1e0:	6019      	str	r1, [r3, #0]
 800b1e2:	d1dd      	bne.n	800b1a0 <_free_r+0x24>
 800b1e4:	6810      	ldr	r0, [r2, #0]
 800b1e6:	6852      	ldr	r2, [r2, #4]
 800b1e8:	605a      	str	r2, [r3, #4]
 800b1ea:	4401      	add	r1, r0
 800b1ec:	6019      	str	r1, [r3, #0]
 800b1ee:	e7d7      	b.n	800b1a0 <_free_r+0x24>
 800b1f0:	d902      	bls.n	800b1f8 <_free_r+0x7c>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	602b      	str	r3, [r5, #0]
 800b1f6:	e7d3      	b.n	800b1a0 <_free_r+0x24>
 800b1f8:	6820      	ldr	r0, [r4, #0]
 800b1fa:	1821      	adds	r1, r4, r0
 800b1fc:	428a      	cmp	r2, r1
 800b1fe:	bf04      	itt	eq
 800b200:	6811      	ldreq	r1, [r2, #0]
 800b202:	6852      	ldreq	r2, [r2, #4]
 800b204:	6062      	str	r2, [r4, #4]
 800b206:	bf04      	itt	eq
 800b208:	1809      	addeq	r1, r1, r0
 800b20a:	6021      	streq	r1, [r4, #0]
 800b20c:	605c      	str	r4, [r3, #4]
 800b20e:	e7c7      	b.n	800b1a0 <_free_r+0x24>
 800b210:	bd38      	pop	{r3, r4, r5, pc}
 800b212:	bf00      	nop
 800b214:	200004d4 	.word	0x200004d4

0800b218 <_malloc_r>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	1ccd      	adds	r5, r1, #3
 800b21c:	f025 0503 	bic.w	r5, r5, #3
 800b220:	3508      	adds	r5, #8
 800b222:	2d0c      	cmp	r5, #12
 800b224:	bf38      	it	cc
 800b226:	250c      	movcc	r5, #12
 800b228:	2d00      	cmp	r5, #0
 800b22a:	4606      	mov	r6, r0
 800b22c:	db01      	blt.n	800b232 <_malloc_r+0x1a>
 800b22e:	42a9      	cmp	r1, r5
 800b230:	d903      	bls.n	800b23a <_malloc_r+0x22>
 800b232:	230c      	movs	r3, #12
 800b234:	6033      	str	r3, [r6, #0]
 800b236:	2000      	movs	r0, #0
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	f000 fb4a 	bl	800b8d2 <__malloc_lock>
 800b23e:	4a21      	ldr	r2, [pc, #132]	; (800b2c4 <_malloc_r+0xac>)
 800b240:	6814      	ldr	r4, [r2, #0]
 800b242:	4621      	mov	r1, r4
 800b244:	b991      	cbnz	r1, 800b26c <_malloc_r+0x54>
 800b246:	4c20      	ldr	r4, [pc, #128]	; (800b2c8 <_malloc_r+0xb0>)
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	b91b      	cbnz	r3, 800b254 <_malloc_r+0x3c>
 800b24c:	4630      	mov	r0, r6
 800b24e:	f000 fb17 	bl	800b880 <_sbrk_r>
 800b252:	6020      	str	r0, [r4, #0]
 800b254:	4629      	mov	r1, r5
 800b256:	4630      	mov	r0, r6
 800b258:	f000 fb12 	bl	800b880 <_sbrk_r>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d124      	bne.n	800b2aa <_malloc_r+0x92>
 800b260:	230c      	movs	r3, #12
 800b262:	6033      	str	r3, [r6, #0]
 800b264:	4630      	mov	r0, r6
 800b266:	f000 fb35 	bl	800b8d4 <__malloc_unlock>
 800b26a:	e7e4      	b.n	800b236 <_malloc_r+0x1e>
 800b26c:	680b      	ldr	r3, [r1, #0]
 800b26e:	1b5b      	subs	r3, r3, r5
 800b270:	d418      	bmi.n	800b2a4 <_malloc_r+0x8c>
 800b272:	2b0b      	cmp	r3, #11
 800b274:	d90f      	bls.n	800b296 <_malloc_r+0x7e>
 800b276:	600b      	str	r3, [r1, #0]
 800b278:	50cd      	str	r5, [r1, r3]
 800b27a:	18cc      	adds	r4, r1, r3
 800b27c:	4630      	mov	r0, r6
 800b27e:	f000 fb29 	bl	800b8d4 <__malloc_unlock>
 800b282:	f104 000b 	add.w	r0, r4, #11
 800b286:	1d23      	adds	r3, r4, #4
 800b288:	f020 0007 	bic.w	r0, r0, #7
 800b28c:	1ac3      	subs	r3, r0, r3
 800b28e:	d0d3      	beq.n	800b238 <_malloc_r+0x20>
 800b290:	425a      	negs	r2, r3
 800b292:	50e2      	str	r2, [r4, r3]
 800b294:	e7d0      	b.n	800b238 <_malloc_r+0x20>
 800b296:	428c      	cmp	r4, r1
 800b298:	684b      	ldr	r3, [r1, #4]
 800b29a:	bf16      	itet	ne
 800b29c:	6063      	strne	r3, [r4, #4]
 800b29e:	6013      	streq	r3, [r2, #0]
 800b2a0:	460c      	movne	r4, r1
 800b2a2:	e7eb      	b.n	800b27c <_malloc_r+0x64>
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	6849      	ldr	r1, [r1, #4]
 800b2a8:	e7cc      	b.n	800b244 <_malloc_r+0x2c>
 800b2aa:	1cc4      	adds	r4, r0, #3
 800b2ac:	f024 0403 	bic.w	r4, r4, #3
 800b2b0:	42a0      	cmp	r0, r4
 800b2b2:	d005      	beq.n	800b2c0 <_malloc_r+0xa8>
 800b2b4:	1a21      	subs	r1, r4, r0
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f000 fae2 	bl	800b880 <_sbrk_r>
 800b2bc:	3001      	adds	r0, #1
 800b2be:	d0cf      	beq.n	800b260 <_malloc_r+0x48>
 800b2c0:	6025      	str	r5, [r4, #0]
 800b2c2:	e7db      	b.n	800b27c <_malloc_r+0x64>
 800b2c4:	200004d4 	.word	0x200004d4
 800b2c8:	200004d8 	.word	0x200004d8

0800b2cc <__ssputs_r>:
 800b2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d0:	688e      	ldr	r6, [r1, #8]
 800b2d2:	429e      	cmp	r6, r3
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	4690      	mov	r8, r2
 800b2da:	4699      	mov	r9, r3
 800b2dc:	d837      	bhi.n	800b34e <__ssputs_r+0x82>
 800b2de:	898a      	ldrh	r2, [r1, #12]
 800b2e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2e4:	d031      	beq.n	800b34a <__ssputs_r+0x7e>
 800b2e6:	6825      	ldr	r5, [r4, #0]
 800b2e8:	6909      	ldr	r1, [r1, #16]
 800b2ea:	1a6f      	subs	r7, r5, r1
 800b2ec:	6965      	ldr	r5, [r4, #20]
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2f4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b2f8:	f109 0301 	add.w	r3, r9, #1
 800b2fc:	443b      	add	r3, r7
 800b2fe:	429d      	cmp	r5, r3
 800b300:	bf38      	it	cc
 800b302:	461d      	movcc	r5, r3
 800b304:	0553      	lsls	r3, r2, #21
 800b306:	d530      	bpl.n	800b36a <__ssputs_r+0x9e>
 800b308:	4629      	mov	r1, r5
 800b30a:	f7ff ff85 	bl	800b218 <_malloc_r>
 800b30e:	4606      	mov	r6, r0
 800b310:	b950      	cbnz	r0, 800b328 <__ssputs_r+0x5c>
 800b312:	230c      	movs	r3, #12
 800b314:	f8ca 3000 	str.w	r3, [sl]
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b31e:	81a3      	strh	r3, [r4, #12]
 800b320:	f04f 30ff 	mov.w	r0, #4294967295
 800b324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b328:	463a      	mov	r2, r7
 800b32a:	6921      	ldr	r1, [r4, #16]
 800b32c:	f7ff fe92 	bl	800b054 <memcpy>
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b33a:	81a3      	strh	r3, [r4, #12]
 800b33c:	6126      	str	r6, [r4, #16]
 800b33e:	6165      	str	r5, [r4, #20]
 800b340:	443e      	add	r6, r7
 800b342:	1bed      	subs	r5, r5, r7
 800b344:	6026      	str	r6, [r4, #0]
 800b346:	60a5      	str	r5, [r4, #8]
 800b348:	464e      	mov	r6, r9
 800b34a:	454e      	cmp	r6, r9
 800b34c:	d900      	bls.n	800b350 <__ssputs_r+0x84>
 800b34e:	464e      	mov	r6, r9
 800b350:	4632      	mov	r2, r6
 800b352:	4641      	mov	r1, r8
 800b354:	6820      	ldr	r0, [r4, #0]
 800b356:	f000 faa3 	bl	800b8a0 <memmove>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	1b9b      	subs	r3, r3, r6
 800b35e:	60a3      	str	r3, [r4, #8]
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	441e      	add	r6, r3
 800b364:	6026      	str	r6, [r4, #0]
 800b366:	2000      	movs	r0, #0
 800b368:	e7dc      	b.n	800b324 <__ssputs_r+0x58>
 800b36a:	462a      	mov	r2, r5
 800b36c:	f000 fab3 	bl	800b8d6 <_realloc_r>
 800b370:	4606      	mov	r6, r0
 800b372:	2800      	cmp	r0, #0
 800b374:	d1e2      	bne.n	800b33c <__ssputs_r+0x70>
 800b376:	6921      	ldr	r1, [r4, #16]
 800b378:	4650      	mov	r0, sl
 800b37a:	f7ff feff 	bl	800b17c <_free_r>
 800b37e:	e7c8      	b.n	800b312 <__ssputs_r+0x46>

0800b380 <_svfiprintf_r>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	461d      	mov	r5, r3
 800b386:	898b      	ldrh	r3, [r1, #12]
 800b388:	061f      	lsls	r7, r3, #24
 800b38a:	b09d      	sub	sp, #116	; 0x74
 800b38c:	4680      	mov	r8, r0
 800b38e:	460c      	mov	r4, r1
 800b390:	4616      	mov	r6, r2
 800b392:	d50f      	bpl.n	800b3b4 <_svfiprintf_r+0x34>
 800b394:	690b      	ldr	r3, [r1, #16]
 800b396:	b96b      	cbnz	r3, 800b3b4 <_svfiprintf_r+0x34>
 800b398:	2140      	movs	r1, #64	; 0x40
 800b39a:	f7ff ff3d 	bl	800b218 <_malloc_r>
 800b39e:	6020      	str	r0, [r4, #0]
 800b3a0:	6120      	str	r0, [r4, #16]
 800b3a2:	b928      	cbnz	r0, 800b3b0 <_svfiprintf_r+0x30>
 800b3a4:	230c      	movs	r3, #12
 800b3a6:	f8c8 3000 	str.w	r3, [r8]
 800b3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ae:	e0c8      	b.n	800b542 <_svfiprintf_r+0x1c2>
 800b3b0:	2340      	movs	r3, #64	; 0x40
 800b3b2:	6163      	str	r3, [r4, #20]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b8:	2320      	movs	r3, #32
 800b3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3be:	2330      	movs	r3, #48	; 0x30
 800b3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3c4:	9503      	str	r5, [sp, #12]
 800b3c6:	f04f 0b01 	mov.w	fp, #1
 800b3ca:	4637      	mov	r7, r6
 800b3cc:	463d      	mov	r5, r7
 800b3ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b3d2:	b10b      	cbz	r3, 800b3d8 <_svfiprintf_r+0x58>
 800b3d4:	2b25      	cmp	r3, #37	; 0x25
 800b3d6:	d13e      	bne.n	800b456 <_svfiprintf_r+0xd6>
 800b3d8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b3dc:	d00b      	beq.n	800b3f6 <_svfiprintf_r+0x76>
 800b3de:	4653      	mov	r3, sl
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	f7ff ff71 	bl	800b2cc <__ssputs_r>
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	f000 80a4 	beq.w	800b538 <_svfiprintf_r+0x1b8>
 800b3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f2:	4453      	add	r3, sl
 800b3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f6:	783b      	ldrb	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 809d 	beq.w	800b538 <_svfiprintf_r+0x1b8>
 800b3fe:	2300      	movs	r3, #0
 800b400:	f04f 32ff 	mov.w	r2, #4294967295
 800b404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	9307      	str	r3, [sp, #28]
 800b40c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b410:	931a      	str	r3, [sp, #104]	; 0x68
 800b412:	462f      	mov	r7, r5
 800b414:	2205      	movs	r2, #5
 800b416:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b41a:	4850      	ldr	r0, [pc, #320]	; (800b55c <_svfiprintf_r+0x1dc>)
 800b41c:	f7f4 fee0 	bl	80001e0 <memchr>
 800b420:	9b04      	ldr	r3, [sp, #16]
 800b422:	b9d0      	cbnz	r0, 800b45a <_svfiprintf_r+0xda>
 800b424:	06d9      	lsls	r1, r3, #27
 800b426:	bf44      	itt	mi
 800b428:	2220      	movmi	r2, #32
 800b42a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b42e:	071a      	lsls	r2, r3, #28
 800b430:	bf44      	itt	mi
 800b432:	222b      	movmi	r2, #43	; 0x2b
 800b434:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b438:	782a      	ldrb	r2, [r5, #0]
 800b43a:	2a2a      	cmp	r2, #42	; 0x2a
 800b43c:	d015      	beq.n	800b46a <_svfiprintf_r+0xea>
 800b43e:	9a07      	ldr	r2, [sp, #28]
 800b440:	462f      	mov	r7, r5
 800b442:	2000      	movs	r0, #0
 800b444:	250a      	movs	r5, #10
 800b446:	4639      	mov	r1, r7
 800b448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b44c:	3b30      	subs	r3, #48	; 0x30
 800b44e:	2b09      	cmp	r3, #9
 800b450:	d94d      	bls.n	800b4ee <_svfiprintf_r+0x16e>
 800b452:	b1b8      	cbz	r0, 800b484 <_svfiprintf_r+0x104>
 800b454:	e00f      	b.n	800b476 <_svfiprintf_r+0xf6>
 800b456:	462f      	mov	r7, r5
 800b458:	e7b8      	b.n	800b3cc <_svfiprintf_r+0x4c>
 800b45a:	4a40      	ldr	r2, [pc, #256]	; (800b55c <_svfiprintf_r+0x1dc>)
 800b45c:	1a80      	subs	r0, r0, r2
 800b45e:	fa0b f000 	lsl.w	r0, fp, r0
 800b462:	4318      	orrs	r0, r3
 800b464:	9004      	str	r0, [sp, #16]
 800b466:	463d      	mov	r5, r7
 800b468:	e7d3      	b.n	800b412 <_svfiprintf_r+0x92>
 800b46a:	9a03      	ldr	r2, [sp, #12]
 800b46c:	1d11      	adds	r1, r2, #4
 800b46e:	6812      	ldr	r2, [r2, #0]
 800b470:	9103      	str	r1, [sp, #12]
 800b472:	2a00      	cmp	r2, #0
 800b474:	db01      	blt.n	800b47a <_svfiprintf_r+0xfa>
 800b476:	9207      	str	r2, [sp, #28]
 800b478:	e004      	b.n	800b484 <_svfiprintf_r+0x104>
 800b47a:	4252      	negs	r2, r2
 800b47c:	f043 0302 	orr.w	r3, r3, #2
 800b480:	9207      	str	r2, [sp, #28]
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	783b      	ldrb	r3, [r7, #0]
 800b486:	2b2e      	cmp	r3, #46	; 0x2e
 800b488:	d10c      	bne.n	800b4a4 <_svfiprintf_r+0x124>
 800b48a:	787b      	ldrb	r3, [r7, #1]
 800b48c:	2b2a      	cmp	r3, #42	; 0x2a
 800b48e:	d133      	bne.n	800b4f8 <_svfiprintf_r+0x178>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	1d1a      	adds	r2, r3, #4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	9203      	str	r2, [sp, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bfb8      	it	lt
 800b49c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4a0:	3702      	adds	r7, #2
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	4d2e      	ldr	r5, [pc, #184]	; (800b560 <_svfiprintf_r+0x1e0>)
 800b4a6:	7839      	ldrb	r1, [r7, #0]
 800b4a8:	2203      	movs	r2, #3
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7f4 fe98 	bl	80001e0 <memchr>
 800b4b0:	b138      	cbz	r0, 800b4c2 <_svfiprintf_r+0x142>
 800b4b2:	2340      	movs	r3, #64	; 0x40
 800b4b4:	1b40      	subs	r0, r0, r5
 800b4b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b4ba:	9b04      	ldr	r3, [sp, #16]
 800b4bc:	4303      	orrs	r3, r0
 800b4be:	3701      	adds	r7, #1
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	7839      	ldrb	r1, [r7, #0]
 800b4c4:	4827      	ldr	r0, [pc, #156]	; (800b564 <_svfiprintf_r+0x1e4>)
 800b4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ca:	2206      	movs	r2, #6
 800b4cc:	1c7e      	adds	r6, r7, #1
 800b4ce:	f7f4 fe87 	bl	80001e0 <memchr>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d038      	beq.n	800b548 <_svfiprintf_r+0x1c8>
 800b4d6:	4b24      	ldr	r3, [pc, #144]	; (800b568 <_svfiprintf_r+0x1e8>)
 800b4d8:	bb13      	cbnz	r3, 800b520 <_svfiprintf_r+0x1a0>
 800b4da:	9b03      	ldr	r3, [sp, #12]
 800b4dc:	3307      	adds	r3, #7
 800b4de:	f023 0307 	bic.w	r3, r3, #7
 800b4e2:	3308      	adds	r3, #8
 800b4e4:	9303      	str	r3, [sp, #12]
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	444b      	add	r3, r9
 800b4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ec:	e76d      	b.n	800b3ca <_svfiprintf_r+0x4a>
 800b4ee:	fb05 3202 	mla	r2, r5, r2, r3
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	460f      	mov	r7, r1
 800b4f6:	e7a6      	b.n	800b446 <_svfiprintf_r+0xc6>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	3701      	adds	r7, #1
 800b4fc:	9305      	str	r3, [sp, #20]
 800b4fe:	4619      	mov	r1, r3
 800b500:	250a      	movs	r5, #10
 800b502:	4638      	mov	r0, r7
 800b504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b508:	3a30      	subs	r2, #48	; 0x30
 800b50a:	2a09      	cmp	r2, #9
 800b50c:	d903      	bls.n	800b516 <_svfiprintf_r+0x196>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0c8      	beq.n	800b4a4 <_svfiprintf_r+0x124>
 800b512:	9105      	str	r1, [sp, #20]
 800b514:	e7c6      	b.n	800b4a4 <_svfiprintf_r+0x124>
 800b516:	fb05 2101 	mla	r1, r5, r1, r2
 800b51a:	2301      	movs	r3, #1
 800b51c:	4607      	mov	r7, r0
 800b51e:	e7f0      	b.n	800b502 <_svfiprintf_r+0x182>
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	4622      	mov	r2, r4
 800b526:	4b11      	ldr	r3, [pc, #68]	; (800b56c <_svfiprintf_r+0x1ec>)
 800b528:	a904      	add	r1, sp, #16
 800b52a:	4640      	mov	r0, r8
 800b52c:	f3af 8000 	nop.w
 800b530:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b534:	4681      	mov	r9, r0
 800b536:	d1d6      	bne.n	800b4e6 <_svfiprintf_r+0x166>
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	065b      	lsls	r3, r3, #25
 800b53c:	f53f af35 	bmi.w	800b3aa <_svfiprintf_r+0x2a>
 800b540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b542:	b01d      	add	sp, #116	; 0x74
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	ab03      	add	r3, sp, #12
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	4622      	mov	r2, r4
 800b54e:	4b07      	ldr	r3, [pc, #28]	; (800b56c <_svfiprintf_r+0x1ec>)
 800b550:	a904      	add	r1, sp, #16
 800b552:	4640      	mov	r0, r8
 800b554:	f000 f882 	bl	800b65c <_printf_i>
 800b558:	e7ea      	b.n	800b530 <_svfiprintf_r+0x1b0>
 800b55a:	bf00      	nop
 800b55c:	0800c014 	.word	0x0800c014
 800b560:	0800c01a 	.word	0x0800c01a
 800b564:	0800c01e 	.word	0x0800c01e
 800b568:	00000000 	.word	0x00000000
 800b56c:	0800b2cd 	.word	0x0800b2cd

0800b570 <_printf_common>:
 800b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	4691      	mov	r9, r2
 800b576:	461f      	mov	r7, r3
 800b578:	688a      	ldr	r2, [r1, #8]
 800b57a:	690b      	ldr	r3, [r1, #16]
 800b57c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b580:	4293      	cmp	r3, r2
 800b582:	bfb8      	it	lt
 800b584:	4613      	movlt	r3, r2
 800b586:	f8c9 3000 	str.w	r3, [r9]
 800b58a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b58e:	4606      	mov	r6, r0
 800b590:	460c      	mov	r4, r1
 800b592:	b112      	cbz	r2, 800b59a <_printf_common+0x2a>
 800b594:	3301      	adds	r3, #1
 800b596:	f8c9 3000 	str.w	r3, [r9]
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	0699      	lsls	r1, r3, #26
 800b59e:	bf42      	ittt	mi
 800b5a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b5a4:	3302      	addmi	r3, #2
 800b5a6:	f8c9 3000 	strmi.w	r3, [r9]
 800b5aa:	6825      	ldr	r5, [r4, #0]
 800b5ac:	f015 0506 	ands.w	r5, r5, #6
 800b5b0:	d107      	bne.n	800b5c2 <_printf_common+0x52>
 800b5b2:	f104 0a19 	add.w	sl, r4, #25
 800b5b6:	68e3      	ldr	r3, [r4, #12]
 800b5b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b5bc:	1a9b      	subs	r3, r3, r2
 800b5be:	42ab      	cmp	r3, r5
 800b5c0:	dc28      	bgt.n	800b614 <_printf_common+0xa4>
 800b5c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b5c6:	6822      	ldr	r2, [r4, #0]
 800b5c8:	3300      	adds	r3, #0
 800b5ca:	bf18      	it	ne
 800b5cc:	2301      	movne	r3, #1
 800b5ce:	0692      	lsls	r2, r2, #26
 800b5d0:	d42d      	bmi.n	800b62e <_printf_common+0xbe>
 800b5d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	4630      	mov	r0, r6
 800b5da:	47c0      	blx	r8
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d020      	beq.n	800b622 <_printf_common+0xb2>
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	68e5      	ldr	r5, [r4, #12]
 800b5e4:	f8d9 2000 	ldr.w	r2, [r9]
 800b5e8:	f003 0306 	and.w	r3, r3, #6
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	bf08      	it	eq
 800b5f0:	1aad      	subeq	r5, r5, r2
 800b5f2:	68a3      	ldr	r3, [r4, #8]
 800b5f4:	6922      	ldr	r2, [r4, #16]
 800b5f6:	bf0c      	ite	eq
 800b5f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5fc:	2500      	movne	r5, #0
 800b5fe:	4293      	cmp	r3, r2
 800b600:	bfc4      	itt	gt
 800b602:	1a9b      	subgt	r3, r3, r2
 800b604:	18ed      	addgt	r5, r5, r3
 800b606:	f04f 0900 	mov.w	r9, #0
 800b60a:	341a      	adds	r4, #26
 800b60c:	454d      	cmp	r5, r9
 800b60e:	d11a      	bne.n	800b646 <_printf_common+0xd6>
 800b610:	2000      	movs	r0, #0
 800b612:	e008      	b.n	800b626 <_printf_common+0xb6>
 800b614:	2301      	movs	r3, #1
 800b616:	4652      	mov	r2, sl
 800b618:	4639      	mov	r1, r7
 800b61a:	4630      	mov	r0, r6
 800b61c:	47c0      	blx	r8
 800b61e:	3001      	adds	r0, #1
 800b620:	d103      	bne.n	800b62a <_printf_common+0xba>
 800b622:	f04f 30ff 	mov.w	r0, #4294967295
 800b626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62a:	3501      	adds	r5, #1
 800b62c:	e7c3      	b.n	800b5b6 <_printf_common+0x46>
 800b62e:	18e1      	adds	r1, r4, r3
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	2030      	movs	r0, #48	; 0x30
 800b634:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b638:	4422      	add	r2, r4
 800b63a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b63e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b642:	3302      	adds	r3, #2
 800b644:	e7c5      	b.n	800b5d2 <_printf_common+0x62>
 800b646:	2301      	movs	r3, #1
 800b648:	4622      	mov	r2, r4
 800b64a:	4639      	mov	r1, r7
 800b64c:	4630      	mov	r0, r6
 800b64e:	47c0      	blx	r8
 800b650:	3001      	adds	r0, #1
 800b652:	d0e6      	beq.n	800b622 <_printf_common+0xb2>
 800b654:	f109 0901 	add.w	r9, r9, #1
 800b658:	e7d8      	b.n	800b60c <_printf_common+0x9c>
	...

0800b65c <_printf_i>:
 800b65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b660:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b664:	460c      	mov	r4, r1
 800b666:	7e09      	ldrb	r1, [r1, #24]
 800b668:	b085      	sub	sp, #20
 800b66a:	296e      	cmp	r1, #110	; 0x6e
 800b66c:	4617      	mov	r7, r2
 800b66e:	4606      	mov	r6, r0
 800b670:	4698      	mov	r8, r3
 800b672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b674:	f000 80b3 	beq.w	800b7de <_printf_i+0x182>
 800b678:	d822      	bhi.n	800b6c0 <_printf_i+0x64>
 800b67a:	2963      	cmp	r1, #99	; 0x63
 800b67c:	d036      	beq.n	800b6ec <_printf_i+0x90>
 800b67e:	d80a      	bhi.n	800b696 <_printf_i+0x3a>
 800b680:	2900      	cmp	r1, #0
 800b682:	f000 80b9 	beq.w	800b7f8 <_printf_i+0x19c>
 800b686:	2958      	cmp	r1, #88	; 0x58
 800b688:	f000 8083 	beq.w	800b792 <_printf_i+0x136>
 800b68c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b690:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b694:	e032      	b.n	800b6fc <_printf_i+0xa0>
 800b696:	2964      	cmp	r1, #100	; 0x64
 800b698:	d001      	beq.n	800b69e <_printf_i+0x42>
 800b69a:	2969      	cmp	r1, #105	; 0x69
 800b69c:	d1f6      	bne.n	800b68c <_printf_i+0x30>
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	6813      	ldr	r3, [r2, #0]
 800b6a2:	0605      	lsls	r5, r0, #24
 800b6a4:	f103 0104 	add.w	r1, r3, #4
 800b6a8:	d52a      	bpl.n	800b700 <_printf_i+0xa4>
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6011      	str	r1, [r2, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	da03      	bge.n	800b6ba <_printf_i+0x5e>
 800b6b2:	222d      	movs	r2, #45	; 0x2d
 800b6b4:	425b      	negs	r3, r3
 800b6b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b6ba:	486f      	ldr	r0, [pc, #444]	; (800b878 <_printf_i+0x21c>)
 800b6bc:	220a      	movs	r2, #10
 800b6be:	e039      	b.n	800b734 <_printf_i+0xd8>
 800b6c0:	2973      	cmp	r1, #115	; 0x73
 800b6c2:	f000 809d 	beq.w	800b800 <_printf_i+0x1a4>
 800b6c6:	d808      	bhi.n	800b6da <_printf_i+0x7e>
 800b6c8:	296f      	cmp	r1, #111	; 0x6f
 800b6ca:	d020      	beq.n	800b70e <_printf_i+0xb2>
 800b6cc:	2970      	cmp	r1, #112	; 0x70
 800b6ce:	d1dd      	bne.n	800b68c <_printf_i+0x30>
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	f043 0320 	orr.w	r3, r3, #32
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	e003      	b.n	800b6e2 <_printf_i+0x86>
 800b6da:	2975      	cmp	r1, #117	; 0x75
 800b6dc:	d017      	beq.n	800b70e <_printf_i+0xb2>
 800b6de:	2978      	cmp	r1, #120	; 0x78
 800b6e0:	d1d4      	bne.n	800b68c <_printf_i+0x30>
 800b6e2:	2378      	movs	r3, #120	; 0x78
 800b6e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6e8:	4864      	ldr	r0, [pc, #400]	; (800b87c <_printf_i+0x220>)
 800b6ea:	e055      	b.n	800b798 <_printf_i+0x13c>
 800b6ec:	6813      	ldr	r3, [r2, #0]
 800b6ee:	1d19      	adds	r1, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6011      	str	r1, [r2, #0]
 800b6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e08c      	b.n	800b81a <_printf_i+0x1be>
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6011      	str	r1, [r2, #0]
 800b704:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b708:	bf18      	it	ne
 800b70a:	b21b      	sxthne	r3, r3
 800b70c:	e7cf      	b.n	800b6ae <_printf_i+0x52>
 800b70e:	6813      	ldr	r3, [r2, #0]
 800b710:	6825      	ldr	r5, [r4, #0]
 800b712:	1d18      	adds	r0, r3, #4
 800b714:	6010      	str	r0, [r2, #0]
 800b716:	0628      	lsls	r0, r5, #24
 800b718:	d501      	bpl.n	800b71e <_printf_i+0xc2>
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	e002      	b.n	800b724 <_printf_i+0xc8>
 800b71e:	0668      	lsls	r0, r5, #25
 800b720:	d5fb      	bpl.n	800b71a <_printf_i+0xbe>
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	4854      	ldr	r0, [pc, #336]	; (800b878 <_printf_i+0x21c>)
 800b726:	296f      	cmp	r1, #111	; 0x6f
 800b728:	bf14      	ite	ne
 800b72a:	220a      	movne	r2, #10
 800b72c:	2208      	moveq	r2, #8
 800b72e:	2100      	movs	r1, #0
 800b730:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b734:	6865      	ldr	r5, [r4, #4]
 800b736:	60a5      	str	r5, [r4, #8]
 800b738:	2d00      	cmp	r5, #0
 800b73a:	f2c0 8095 	blt.w	800b868 <_printf_i+0x20c>
 800b73e:	6821      	ldr	r1, [r4, #0]
 800b740:	f021 0104 	bic.w	r1, r1, #4
 800b744:	6021      	str	r1, [r4, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d13d      	bne.n	800b7c6 <_printf_i+0x16a>
 800b74a:	2d00      	cmp	r5, #0
 800b74c:	f040 808e 	bne.w	800b86c <_printf_i+0x210>
 800b750:	4665      	mov	r5, ip
 800b752:	2a08      	cmp	r2, #8
 800b754:	d10b      	bne.n	800b76e <_printf_i+0x112>
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	07db      	lsls	r3, r3, #31
 800b75a:	d508      	bpl.n	800b76e <_printf_i+0x112>
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	6862      	ldr	r2, [r4, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	bfde      	ittt	le
 800b764:	2330      	movle	r3, #48	; 0x30
 800b766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b76a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b76e:	ebac 0305 	sub.w	r3, ip, r5
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	f8cd 8000 	str.w	r8, [sp]
 800b778:	463b      	mov	r3, r7
 800b77a:	aa03      	add	r2, sp, #12
 800b77c:	4621      	mov	r1, r4
 800b77e:	4630      	mov	r0, r6
 800b780:	f7ff fef6 	bl	800b570 <_printf_common>
 800b784:	3001      	adds	r0, #1
 800b786:	d14d      	bne.n	800b824 <_printf_i+0x1c8>
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	b005      	add	sp, #20
 800b78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b792:	4839      	ldr	r0, [pc, #228]	; (800b878 <_printf_i+0x21c>)
 800b794:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b798:	6813      	ldr	r3, [r2, #0]
 800b79a:	6821      	ldr	r1, [r4, #0]
 800b79c:	1d1d      	adds	r5, r3, #4
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6015      	str	r5, [r2, #0]
 800b7a2:	060a      	lsls	r2, r1, #24
 800b7a4:	d50b      	bpl.n	800b7be <_printf_i+0x162>
 800b7a6:	07ca      	lsls	r2, r1, #31
 800b7a8:	bf44      	itt	mi
 800b7aa:	f041 0120 	orrmi.w	r1, r1, #32
 800b7ae:	6021      	strmi	r1, [r4, #0]
 800b7b0:	b91b      	cbnz	r3, 800b7ba <_printf_i+0x15e>
 800b7b2:	6822      	ldr	r2, [r4, #0]
 800b7b4:	f022 0220 	bic.w	r2, r2, #32
 800b7b8:	6022      	str	r2, [r4, #0]
 800b7ba:	2210      	movs	r2, #16
 800b7bc:	e7b7      	b.n	800b72e <_printf_i+0xd2>
 800b7be:	064d      	lsls	r5, r1, #25
 800b7c0:	bf48      	it	mi
 800b7c2:	b29b      	uxthmi	r3, r3
 800b7c4:	e7ef      	b.n	800b7a6 <_printf_i+0x14a>
 800b7c6:	4665      	mov	r5, ip
 800b7c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7cc:	fb02 3311 	mls	r3, r2, r1, r3
 800b7d0:	5cc3      	ldrb	r3, [r0, r3]
 800b7d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	d1f5      	bne.n	800b7c8 <_printf_i+0x16c>
 800b7dc:	e7b9      	b.n	800b752 <_printf_i+0xf6>
 800b7de:	6813      	ldr	r3, [r2, #0]
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	6961      	ldr	r1, [r4, #20]
 800b7e4:	1d18      	adds	r0, r3, #4
 800b7e6:	6010      	str	r0, [r2, #0]
 800b7e8:	0628      	lsls	r0, r5, #24
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	d501      	bpl.n	800b7f2 <_printf_i+0x196>
 800b7ee:	6019      	str	r1, [r3, #0]
 800b7f0:	e002      	b.n	800b7f8 <_printf_i+0x19c>
 800b7f2:	066a      	lsls	r2, r5, #25
 800b7f4:	d5fb      	bpl.n	800b7ee <_printf_i+0x192>
 800b7f6:	8019      	strh	r1, [r3, #0]
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	6123      	str	r3, [r4, #16]
 800b7fc:	4665      	mov	r5, ip
 800b7fe:	e7b9      	b.n	800b774 <_printf_i+0x118>
 800b800:	6813      	ldr	r3, [r2, #0]
 800b802:	1d19      	adds	r1, r3, #4
 800b804:	6011      	str	r1, [r2, #0]
 800b806:	681d      	ldr	r5, [r3, #0]
 800b808:	6862      	ldr	r2, [r4, #4]
 800b80a:	2100      	movs	r1, #0
 800b80c:	4628      	mov	r0, r5
 800b80e:	f7f4 fce7 	bl	80001e0 <memchr>
 800b812:	b108      	cbz	r0, 800b818 <_printf_i+0x1bc>
 800b814:	1b40      	subs	r0, r0, r5
 800b816:	6060      	str	r0, [r4, #4]
 800b818:	6863      	ldr	r3, [r4, #4]
 800b81a:	6123      	str	r3, [r4, #16]
 800b81c:	2300      	movs	r3, #0
 800b81e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b822:	e7a7      	b.n	800b774 <_printf_i+0x118>
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	462a      	mov	r2, r5
 800b828:	4639      	mov	r1, r7
 800b82a:	4630      	mov	r0, r6
 800b82c:	47c0      	blx	r8
 800b82e:	3001      	adds	r0, #1
 800b830:	d0aa      	beq.n	800b788 <_printf_i+0x12c>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	079b      	lsls	r3, r3, #30
 800b836:	d413      	bmi.n	800b860 <_printf_i+0x204>
 800b838:	68e0      	ldr	r0, [r4, #12]
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	4298      	cmp	r0, r3
 800b83e:	bfb8      	it	lt
 800b840:	4618      	movlt	r0, r3
 800b842:	e7a3      	b.n	800b78c <_printf_i+0x130>
 800b844:	2301      	movs	r3, #1
 800b846:	464a      	mov	r2, r9
 800b848:	4639      	mov	r1, r7
 800b84a:	4630      	mov	r0, r6
 800b84c:	47c0      	blx	r8
 800b84e:	3001      	adds	r0, #1
 800b850:	d09a      	beq.n	800b788 <_printf_i+0x12c>
 800b852:	3501      	adds	r5, #1
 800b854:	68e3      	ldr	r3, [r4, #12]
 800b856:	9a03      	ldr	r2, [sp, #12]
 800b858:	1a9b      	subs	r3, r3, r2
 800b85a:	42ab      	cmp	r3, r5
 800b85c:	dcf2      	bgt.n	800b844 <_printf_i+0x1e8>
 800b85e:	e7eb      	b.n	800b838 <_printf_i+0x1dc>
 800b860:	2500      	movs	r5, #0
 800b862:	f104 0919 	add.w	r9, r4, #25
 800b866:	e7f5      	b.n	800b854 <_printf_i+0x1f8>
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1ac      	bne.n	800b7c6 <_printf_i+0x16a>
 800b86c:	7803      	ldrb	r3, [r0, #0]
 800b86e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b876:	e76c      	b.n	800b752 <_printf_i+0xf6>
 800b878:	0800c025 	.word	0x0800c025
 800b87c:	0800c036 	.word	0x0800c036

0800b880 <_sbrk_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4c06      	ldr	r4, [pc, #24]	; (800b89c <_sbrk_r+0x1c>)
 800b884:	2300      	movs	r3, #0
 800b886:	4605      	mov	r5, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	f7f8 fa6e 	bl	8003d6c <_sbrk>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_sbrk_r+0x1a>
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	b103      	cbz	r3, 800b89a <_sbrk_r+0x1a>
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	200007cc 	.word	0x200007cc

0800b8a0 <memmove>:
 800b8a0:	4288      	cmp	r0, r1
 800b8a2:	b510      	push	{r4, lr}
 800b8a4:	eb01 0302 	add.w	r3, r1, r2
 800b8a8:	d807      	bhi.n	800b8ba <memmove+0x1a>
 800b8aa:	1e42      	subs	r2, r0, #1
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	d00a      	beq.n	800b8c6 <memmove+0x26>
 800b8b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b8b8:	e7f8      	b.n	800b8ac <memmove+0xc>
 800b8ba:	4283      	cmp	r3, r0
 800b8bc:	d9f5      	bls.n	800b8aa <memmove+0xa>
 800b8be:	1881      	adds	r1, r0, r2
 800b8c0:	1ad2      	subs	r2, r2, r3
 800b8c2:	42d3      	cmn	r3, r2
 800b8c4:	d100      	bne.n	800b8c8 <memmove+0x28>
 800b8c6:	bd10      	pop	{r4, pc}
 800b8c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b8d0:	e7f7      	b.n	800b8c2 <memmove+0x22>

0800b8d2 <__malloc_lock>:
 800b8d2:	4770      	bx	lr

0800b8d4 <__malloc_unlock>:
 800b8d4:	4770      	bx	lr

0800b8d6 <_realloc_r>:
 800b8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d8:	4607      	mov	r7, r0
 800b8da:	4614      	mov	r4, r2
 800b8dc:	460e      	mov	r6, r1
 800b8de:	b921      	cbnz	r1, 800b8ea <_realloc_r+0x14>
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8e6:	f7ff bc97 	b.w	800b218 <_malloc_r>
 800b8ea:	b922      	cbnz	r2, 800b8f6 <_realloc_r+0x20>
 800b8ec:	f7ff fc46 	bl	800b17c <_free_r>
 800b8f0:	4625      	mov	r5, r4
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8f6:	f000 f814 	bl	800b922 <_malloc_usable_size_r>
 800b8fa:	42a0      	cmp	r0, r4
 800b8fc:	d20f      	bcs.n	800b91e <_realloc_r+0x48>
 800b8fe:	4621      	mov	r1, r4
 800b900:	4638      	mov	r0, r7
 800b902:	f7ff fc89 	bl	800b218 <_malloc_r>
 800b906:	4605      	mov	r5, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	d0f2      	beq.n	800b8f2 <_realloc_r+0x1c>
 800b90c:	4631      	mov	r1, r6
 800b90e:	4622      	mov	r2, r4
 800b910:	f7ff fba0 	bl	800b054 <memcpy>
 800b914:	4631      	mov	r1, r6
 800b916:	4638      	mov	r0, r7
 800b918:	f7ff fc30 	bl	800b17c <_free_r>
 800b91c:	e7e9      	b.n	800b8f2 <_realloc_r+0x1c>
 800b91e:	4635      	mov	r5, r6
 800b920:	e7e7      	b.n	800b8f2 <_realloc_r+0x1c>

0800b922 <_malloc_usable_size_r>:
 800b922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b926:	1f18      	subs	r0, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfbc      	itt	lt
 800b92c:	580b      	ldrlt	r3, [r1, r0]
 800b92e:	18c0      	addlt	r0, r0, r3
 800b930:	4770      	bx	lr
 800b932:	0000      	movs	r0, r0
 800b934:	0000      	movs	r0, r0
	...

0800b938 <ceil>:
 800b938:	ec51 0b10 	vmov	r0, r1, d0
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b944:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b948:	2e13      	cmp	r6, #19
 800b94a:	460c      	mov	r4, r1
 800b94c:	ee10 5a10 	vmov	r5, s0
 800b950:	4680      	mov	r8, r0
 800b952:	dc30      	bgt.n	800b9b6 <ceil+0x7e>
 800b954:	2e00      	cmp	r6, #0
 800b956:	da12      	bge.n	800b97e <ceil+0x46>
 800b958:	a333      	add	r3, pc, #204	; (adr r3, 800ba28 <ceil+0xf0>)
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f7f4 fc95 	bl	800028c <__adddf3>
 800b962:	2200      	movs	r2, #0
 800b964:	2300      	movs	r3, #0
 800b966:	f7f5 f8d7 	bl	8000b18 <__aeabi_dcmpgt>
 800b96a:	b128      	cbz	r0, 800b978 <ceil+0x40>
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	db55      	blt.n	800ba1c <ceil+0xe4>
 800b970:	432c      	orrs	r4, r5
 800b972:	d057      	beq.n	800ba24 <ceil+0xec>
 800b974:	4c2e      	ldr	r4, [pc, #184]	; (800ba30 <ceil+0xf8>)
 800b976:	2500      	movs	r5, #0
 800b978:	4621      	mov	r1, r4
 800b97a:	4628      	mov	r0, r5
 800b97c:	e025      	b.n	800b9ca <ceil+0x92>
 800b97e:	4f2d      	ldr	r7, [pc, #180]	; (800ba34 <ceil+0xfc>)
 800b980:	4137      	asrs	r7, r6
 800b982:	ea01 0307 	and.w	r3, r1, r7
 800b986:	4303      	orrs	r3, r0
 800b988:	d01f      	beq.n	800b9ca <ceil+0x92>
 800b98a:	a327      	add	r3, pc, #156	; (adr r3, 800ba28 <ceil+0xf0>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fc7c 	bl	800028c <__adddf3>
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	f7f5 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d0eb      	beq.n	800b978 <ceil+0x40>
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	bfc2      	ittt	gt
 800b9a4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800b9a8:	fa43 f606 	asrgt.w	r6, r3, r6
 800b9ac:	19a4      	addgt	r4, r4, r6
 800b9ae:	ea24 0407 	bic.w	r4, r4, r7
 800b9b2:	2500      	movs	r5, #0
 800b9b4:	e7e0      	b.n	800b978 <ceil+0x40>
 800b9b6:	2e33      	cmp	r6, #51	; 0x33
 800b9b8:	dd0b      	ble.n	800b9d2 <ceil+0x9a>
 800b9ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9be:	d104      	bne.n	800b9ca <ceil+0x92>
 800b9c0:	ee10 2a10 	vmov	r2, s0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	f7f4 fc61 	bl	800028c <__adddf3>
 800b9ca:	ec41 0b10 	vmov	d0, r0, r1
 800b9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9da:	fa23 f707 	lsr.w	r7, r3, r7
 800b9de:	4207      	tst	r7, r0
 800b9e0:	d0f3      	beq.n	800b9ca <ceil+0x92>
 800b9e2:	a311      	add	r3, pc, #68	; (adr r3, 800ba28 <ceil+0xf0>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fc50 	bl	800028c <__adddf3>
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f7f5 f892 	bl	8000b18 <__aeabi_dcmpgt>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d0bf      	beq.n	800b978 <ceil+0x40>
 800b9f8:	2c00      	cmp	r4, #0
 800b9fa:	dd02      	ble.n	800ba02 <ceil+0xca>
 800b9fc:	2e14      	cmp	r6, #20
 800b9fe:	d103      	bne.n	800ba08 <ceil+0xd0>
 800ba00:	3401      	adds	r4, #1
 800ba02:	ea25 0507 	bic.w	r5, r5, r7
 800ba06:	e7b7      	b.n	800b978 <ceil+0x40>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba0e:	fa03 f606 	lsl.w	r6, r3, r6
 800ba12:	4435      	add	r5, r6
 800ba14:	4545      	cmp	r5, r8
 800ba16:	bf38      	it	cc
 800ba18:	18e4      	addcc	r4, r4, r3
 800ba1a:	e7f2      	b.n	800ba02 <ceil+0xca>
 800ba1c:	2500      	movs	r5, #0
 800ba1e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ba22:	e7a9      	b.n	800b978 <ceil+0x40>
 800ba24:	4625      	mov	r5, r4
 800ba26:	e7a7      	b.n	800b978 <ceil+0x40>
 800ba28:	8800759c 	.word	0x8800759c
 800ba2c:	7e37e43c 	.word	0x7e37e43c
 800ba30:	3ff00000 	.word	0x3ff00000
 800ba34:	000fffff 	.word	0x000fffff

0800ba38 <round>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	ec57 6b10 	vmov	r6, r7, d0
 800ba3e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800ba42:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800ba46:	2c13      	cmp	r4, #19
 800ba48:	463b      	mov	r3, r7
 800ba4a:	463d      	mov	r5, r7
 800ba4c:	dc17      	bgt.n	800ba7e <round+0x46>
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	da09      	bge.n	800ba66 <round+0x2e>
 800ba52:	3401      	adds	r4, #1
 800ba54:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800ba58:	d103      	bne.n	800ba62 <round+0x2a>
 800ba5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba5e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba62:	2100      	movs	r1, #0
 800ba64:	e02c      	b.n	800bac0 <round+0x88>
 800ba66:	4a18      	ldr	r2, [pc, #96]	; (800bac8 <round+0x90>)
 800ba68:	4122      	asrs	r2, r4
 800ba6a:	4217      	tst	r7, r2
 800ba6c:	d100      	bne.n	800ba70 <round+0x38>
 800ba6e:	b19e      	cbz	r6, 800ba98 <round+0x60>
 800ba70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba74:	4123      	asrs	r3, r4
 800ba76:	442b      	add	r3, r5
 800ba78:	ea23 0302 	bic.w	r3, r3, r2
 800ba7c:	e7f1      	b.n	800ba62 <round+0x2a>
 800ba7e:	2c33      	cmp	r4, #51	; 0x33
 800ba80:	dd0d      	ble.n	800ba9e <round+0x66>
 800ba82:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ba86:	d107      	bne.n	800ba98 <round+0x60>
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	ee10 2a10 	vmov	r2, s0
 800ba90:	f7f4 fbfc 	bl	800028c <__adddf3>
 800ba94:	4606      	mov	r6, r0
 800ba96:	460f      	mov	r7, r1
 800ba98:	ec47 6b10 	vmov	d0, r6, r7
 800ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba9e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800baa2:	f04f 30ff 	mov.w	r0, #4294967295
 800baa6:	40d0      	lsrs	r0, r2
 800baa8:	4206      	tst	r6, r0
 800baaa:	d0f5      	beq.n	800ba98 <round+0x60>
 800baac:	2201      	movs	r2, #1
 800baae:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800bab2:	fa02 f404 	lsl.w	r4, r2, r4
 800bab6:	1931      	adds	r1, r6, r4
 800bab8:	bf28      	it	cs
 800baba:	189b      	addcs	r3, r3, r2
 800babc:	ea21 0100 	bic.w	r1, r1, r0
 800bac0:	461f      	mov	r7, r3
 800bac2:	460e      	mov	r6, r1
 800bac4:	e7e8      	b.n	800ba98 <round+0x60>
 800bac6:	bf00      	nop
 800bac8:	000fffff 	.word	0x000fffff

0800bacc <log>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	ed2d 8b02 	vpush	{d8}
 800bad2:	b08a      	sub	sp, #40	; 0x28
 800bad4:	ec55 4b10 	vmov	r4, r5, d0
 800bad8:	f000 f87a 	bl	800bbd0 <__ieee754_log>
 800badc:	4b36      	ldr	r3, [pc, #216]	; (800bbb8 <log+0xec>)
 800bade:	eeb0 8a40 	vmov.f32	s16, s0
 800bae2:	eef0 8a60 	vmov.f32	s17, s1
 800bae6:	f993 6000 	ldrsb.w	r6, [r3]
 800baea:	1c73      	adds	r3, r6, #1
 800baec:	d05b      	beq.n	800bba6 <log+0xda>
 800baee:	4622      	mov	r2, r4
 800baf0:	462b      	mov	r3, r5
 800baf2:	4620      	mov	r0, r4
 800baf4:	4629      	mov	r1, r5
 800baf6:	f7f5 f819 	bl	8000b2c <__aeabi_dcmpun>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d153      	bne.n	800bba6 <log+0xda>
 800bafe:	2200      	movs	r2, #0
 800bb00:	2300      	movs	r3, #0
 800bb02:	4620      	mov	r0, r4
 800bb04:	4629      	mov	r1, r5
 800bb06:	f7f5 f807 	bl	8000b18 <__aeabi_dcmpgt>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d14b      	bne.n	800bba6 <log+0xda>
 800bb0e:	4b2b      	ldr	r3, [pc, #172]	; (800bbbc <log+0xf0>)
 800bb10:	9301      	str	r3, [sp, #4]
 800bb12:	9008      	str	r0, [sp, #32]
 800bb14:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bb18:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bb1c:	b9a6      	cbnz	r6, 800bb48 <log+0x7c>
 800bb1e:	4b28      	ldr	r3, [pc, #160]	; (800bbc0 <log+0xf4>)
 800bb20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bb24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb28:	4620      	mov	r0, r4
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4629      	mov	r1, r5
 800bb30:	f7f4 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb34:	bb40      	cbnz	r0, 800bb88 <log+0xbc>
 800bb36:	2301      	movs	r3, #1
 800bb38:	2e02      	cmp	r6, #2
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	d119      	bne.n	800bb72 <log+0xa6>
 800bb3e:	f7ff fa5f 	bl	800b000 <__errno>
 800bb42:	2321      	movs	r3, #33	; 0x21
 800bb44:	6003      	str	r3, [r0, #0]
 800bb46:	e019      	b.n	800bb7c <log+0xb0>
 800bb48:	4b1e      	ldr	r3, [pc, #120]	; (800bbc4 <log+0xf8>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb50:	4620      	mov	r0, r4
 800bb52:	2200      	movs	r2, #0
 800bb54:	2300      	movs	r3, #0
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d0ea      	beq.n	800bb36 <log+0x6a>
 800bb60:	2302      	movs	r3, #2
 800bb62:	429e      	cmp	r6, r3
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	d111      	bne.n	800bb8c <log+0xc0>
 800bb68:	f7ff fa4a 	bl	800b000 <__errno>
 800bb6c:	2322      	movs	r3, #34	; 0x22
 800bb6e:	6003      	str	r3, [r0, #0]
 800bb70:	e011      	b.n	800bb96 <log+0xca>
 800bb72:	4668      	mov	r0, sp
 800bb74:	f000 f9de 	bl	800bf34 <matherr>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d0e0      	beq.n	800bb3e <log+0x72>
 800bb7c:	4812      	ldr	r0, [pc, #72]	; (800bbc8 <log+0xfc>)
 800bb7e:	f000 f9db 	bl	800bf38 <nan>
 800bb82:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bb86:	e006      	b.n	800bb96 <log+0xca>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	4668      	mov	r0, sp
 800bb8e:	f000 f9d1 	bl	800bf34 <matherr>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d0e8      	beq.n	800bb68 <log+0x9c>
 800bb96:	9b08      	ldr	r3, [sp, #32]
 800bb98:	b11b      	cbz	r3, 800bba2 <log+0xd6>
 800bb9a:	f7ff fa31 	bl	800b000 <__errno>
 800bb9e:	9b08      	ldr	r3, [sp, #32]
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bba6:	eeb0 0a48 	vmov.f32	s0, s16
 800bbaa:	eef0 0a68 	vmov.f32	s1, s17
 800bbae:	b00a      	add	sp, #40	; 0x28
 800bbb0:	ecbd 8b02 	vpop	{d8}
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000088 	.word	0x20000088
 800bbbc:	0800c047 	.word	0x0800c047
 800bbc0:	c7efffff 	.word	0xc7efffff
 800bbc4:	fff00000 	.word	0xfff00000
 800bbc8:	0800c019 	.word	0x0800c019
 800bbcc:	00000000 	.word	0x00000000

0800bbd0 <__ieee754_log>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	ec51 0b10 	vmov	r0, r1, d0
 800bbd8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bbdc:	b087      	sub	sp, #28
 800bbde:	460d      	mov	r5, r1
 800bbe0:	da27      	bge.n	800bc32 <__ieee754_log+0x62>
 800bbe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bbe6:	4303      	orrs	r3, r0
 800bbe8:	ee10 2a10 	vmov	r2, s0
 800bbec:	d10a      	bne.n	800bc04 <__ieee754_log+0x34>
 800bbee:	49cc      	ldr	r1, [pc, #816]	; (800bf20 <__ieee754_log+0x350>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f7f4 fe29 	bl	800084c <__aeabi_ddiv>
 800bbfa:	ec41 0b10 	vmov	d0, r0, r1
 800bbfe:	b007      	add	sp, #28
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	2900      	cmp	r1, #0
 800bc06:	da05      	bge.n	800bc14 <__ieee754_log+0x44>
 800bc08:	460b      	mov	r3, r1
 800bc0a:	f7f4 fb3d 	bl	8000288 <__aeabi_dsub>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2300      	movs	r3, #0
 800bc12:	e7f0      	b.n	800bbf6 <__ieee754_log+0x26>
 800bc14:	4bc3      	ldr	r3, [pc, #780]	; (800bf24 <__ieee754_log+0x354>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	f7f4 fcee 	bl	80005f8 <__aeabi_dmul>
 800bc1c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800bc20:	460d      	mov	r5, r1
 800bc22:	4ac1      	ldr	r2, [pc, #772]	; (800bf28 <__ieee754_log+0x358>)
 800bc24:	4295      	cmp	r5, r2
 800bc26:	dd06      	ble.n	800bc36 <__ieee754_log+0x66>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	f7f4 fb2e 	bl	800028c <__adddf3>
 800bc30:	e7e3      	b.n	800bbfa <__ieee754_log+0x2a>
 800bc32:	2300      	movs	r3, #0
 800bc34:	e7f5      	b.n	800bc22 <__ieee754_log+0x52>
 800bc36:	152c      	asrs	r4, r5, #20
 800bc38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bc3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bc40:	441c      	add	r4, r3
 800bc42:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800bc46:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800bc4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc4e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800bc52:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800bc56:	ea42 0105 	orr.w	r1, r2, r5
 800bc5a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4bb2      	ldr	r3, [pc, #712]	; (800bf2c <__ieee754_log+0x35c>)
 800bc62:	f7f4 fb11 	bl	8000288 <__aeabi_dsub>
 800bc66:	1cab      	adds	r3, r5, #2
 800bc68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	4682      	mov	sl, r0
 800bc70:	468b      	mov	fp, r1
 800bc72:	f04f 0200 	mov.w	r2, #0
 800bc76:	dc53      	bgt.n	800bd20 <__ieee754_log+0x150>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f7f4 ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc7e:	b1d0      	cbz	r0, 800bcb6 <__ieee754_log+0xe6>
 800bc80:	2c00      	cmp	r4, #0
 800bc82:	f000 8120 	beq.w	800bec6 <__ieee754_log+0x2f6>
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7f4 fc4c 	bl	8000524 <__aeabi_i2d>
 800bc8c:	a390      	add	r3, pc, #576	; (adr r3, 800bed0 <__ieee754_log+0x300>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	4606      	mov	r6, r0
 800bc94:	460f      	mov	r7, r1
 800bc96:	f7f4 fcaf 	bl	80005f8 <__aeabi_dmul>
 800bc9a:	a38f      	add	r3, pc, #572	; (adr r3, 800bed8 <__ieee754_log+0x308>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	4630      	mov	r0, r6
 800bca6:	4639      	mov	r1, r7
 800bca8:	f7f4 fca6 	bl	80005f8 <__aeabi_dmul>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	e7ba      	b.n	800bc2c <__ieee754_log+0x5c>
 800bcb6:	a38a      	add	r3, pc, #552	; (adr r3, 800bee0 <__ieee754_log+0x310>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	4650      	mov	r0, sl
 800bcbe:	4659      	mov	r1, fp
 800bcc0:	f7f4 fc9a 	bl	80005f8 <__aeabi_dmul>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	2000      	movs	r0, #0
 800bcca:	4999      	ldr	r1, [pc, #612]	; (800bf30 <__ieee754_log+0x360>)
 800bccc:	f7f4 fadc 	bl	8000288 <__aeabi_dsub>
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460f      	mov	r7, r1
 800bcd6:	465b      	mov	r3, fp
 800bcd8:	4650      	mov	r0, sl
 800bcda:	4659      	mov	r1, fp
 800bcdc:	f7f4 fc8c 	bl	80005f8 <__aeabi_dmul>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4630      	mov	r0, r6
 800bce6:	4639      	mov	r1, r7
 800bce8:	f7f4 fc86 	bl	80005f8 <__aeabi_dmul>
 800bcec:	4606      	mov	r6, r0
 800bcee:	460f      	mov	r7, r1
 800bcf0:	b914      	cbnz	r4, 800bcf8 <__ieee754_log+0x128>
 800bcf2:	4632      	mov	r2, r6
 800bcf4:	463b      	mov	r3, r7
 800bcf6:	e0a0      	b.n	800be3a <__ieee754_log+0x26a>
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f7f4 fc13 	bl	8000524 <__aeabi_i2d>
 800bcfe:	a374      	add	r3, pc, #464	; (adr r3, 800bed0 <__ieee754_log+0x300>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	4680      	mov	r8, r0
 800bd06:	4689      	mov	r9, r1
 800bd08:	f7f4 fc76 	bl	80005f8 <__aeabi_dmul>
 800bd0c:	a372      	add	r3, pc, #456	; (adr r3, 800bed8 <__ieee754_log+0x308>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	4604      	mov	r4, r0
 800bd14:	460d      	mov	r5, r1
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	f7f4 fc6d 	bl	80005f8 <__aeabi_dmul>
 800bd1e:	e0a5      	b.n	800be6c <__ieee754_log+0x29c>
 800bd20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd24:	f7f4 fab2 	bl	800028c <__adddf3>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	4659      	mov	r1, fp
 800bd30:	f7f4 fd8c 	bl	800084c <__aeabi_ddiv>
 800bd34:	e9cd 0100 	strd	r0, r1, [sp]
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f7f4 fbf3 	bl	8000524 <__aeabi_i2d>
 800bd3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd46:	4610      	mov	r0, r2
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f7f4 fc55 	bl	80005f8 <__aeabi_dmul>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd56:	f7f4 fc4f 	bl	80005f8 <__aeabi_dmul>
 800bd5a:	a363      	add	r3, pc, #396	; (adr r3, 800bee8 <__ieee754_log+0x318>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	4680      	mov	r8, r0
 800bd62:	4689      	mov	r9, r1
 800bd64:	f7f4 fc48 	bl	80005f8 <__aeabi_dmul>
 800bd68:	a361      	add	r3, pc, #388	; (adr r3, 800bef0 <__ieee754_log+0x320>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 fa8d 	bl	800028c <__adddf3>
 800bd72:	4642      	mov	r2, r8
 800bd74:	464b      	mov	r3, r9
 800bd76:	f7f4 fc3f 	bl	80005f8 <__aeabi_dmul>
 800bd7a:	a35f      	add	r3, pc, #380	; (adr r3, 800bef8 <__ieee754_log+0x328>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa84 	bl	800028c <__adddf3>
 800bd84:	4642      	mov	r2, r8
 800bd86:	464b      	mov	r3, r9
 800bd88:	f7f4 fc36 	bl	80005f8 <__aeabi_dmul>
 800bd8c:	a35c      	add	r3, pc, #368	; (adr r3, 800bf00 <__ieee754_log+0x330>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa7b 	bl	800028c <__adddf3>
 800bd96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	a35a      	add	r3, pc, #360	; (adr r3, 800bf08 <__ieee754_log+0x338>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bda8:	4640      	mov	r0, r8
 800bdaa:	4649      	mov	r1, r9
 800bdac:	f7f4 fc24 	bl	80005f8 <__aeabi_dmul>
 800bdb0:	a357      	add	r3, pc, #348	; (adr r3, 800bf10 <__ieee754_log+0x340>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa69 	bl	800028c <__adddf3>
 800bdba:	4642      	mov	r2, r8
 800bdbc:	464b      	mov	r3, r9
 800bdbe:	f7f4 fc1b 	bl	80005f8 <__aeabi_dmul>
 800bdc2:	a355      	add	r3, pc, #340	; (adr r3, 800bf18 <__ieee754_log+0x348>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa60 	bl	800028c <__adddf3>
 800bdcc:	4642      	mov	r2, r8
 800bdce:	464b      	mov	r3, r9
 800bdd0:	f7f4 fc12 	bl	80005f8 <__aeabi_dmul>
 800bdd4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800bde0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde4:	f7f4 fa52 	bl	800028c <__adddf3>
 800bde8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800bdec:	3551      	adds	r5, #81	; 0x51
 800bdee:	4335      	orrs	r5, r6
 800bdf0:	2d00      	cmp	r5, #0
 800bdf2:	4680      	mov	r8, r0
 800bdf4:	4689      	mov	r9, r1
 800bdf6:	dd48      	ble.n	800be8a <__ieee754_log+0x2ba>
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	4b4d      	ldr	r3, [pc, #308]	; (800bf30 <__ieee754_log+0x360>)
 800bdfc:	4650      	mov	r0, sl
 800bdfe:	4659      	mov	r1, fp
 800be00:	f7f4 fbfa 	bl	80005f8 <__aeabi_dmul>
 800be04:	4652      	mov	r2, sl
 800be06:	465b      	mov	r3, fp
 800be08:	f7f4 fbf6 	bl	80005f8 <__aeabi_dmul>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4606      	mov	r6, r0
 800be12:	460f      	mov	r7, r1
 800be14:	4640      	mov	r0, r8
 800be16:	4649      	mov	r1, r9
 800be18:	f7f4 fa38 	bl	800028c <__adddf3>
 800be1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be20:	f7f4 fbea 	bl	80005f8 <__aeabi_dmul>
 800be24:	4680      	mov	r8, r0
 800be26:	4689      	mov	r9, r1
 800be28:	b964      	cbnz	r4, 800be44 <__ieee754_log+0x274>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4630      	mov	r0, r6
 800be30:	4639      	mov	r1, r7
 800be32:	f7f4 fa29 	bl	8000288 <__aeabi_dsub>
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	4650      	mov	r0, sl
 800be3c:	4659      	mov	r1, fp
 800be3e:	f7f4 fa23 	bl	8000288 <__aeabi_dsub>
 800be42:	e6da      	b.n	800bbfa <__ieee754_log+0x2a>
 800be44:	a322      	add	r3, pc, #136	; (adr r3, 800bed0 <__ieee754_log+0x300>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4e:	f7f4 fbd3 	bl	80005f8 <__aeabi_dmul>
 800be52:	a321      	add	r3, pc, #132	; (adr r3, 800bed8 <__ieee754_log+0x308>)
 800be54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be58:	4604      	mov	r4, r0
 800be5a:	460d      	mov	r5, r1
 800be5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be60:	f7f4 fbca 	bl	80005f8 <__aeabi_dmul>
 800be64:	4642      	mov	r2, r8
 800be66:	464b      	mov	r3, r9
 800be68:	f7f4 fa10 	bl	800028c <__adddf3>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4630      	mov	r0, r6
 800be72:	4639      	mov	r1, r7
 800be74:	f7f4 fa08 	bl	8000288 <__aeabi_dsub>
 800be78:	4652      	mov	r2, sl
 800be7a:	465b      	mov	r3, fp
 800be7c:	f7f4 fa04 	bl	8000288 <__aeabi_dsub>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	e7d9      	b.n	800be3e <__ieee754_log+0x26e>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4650      	mov	r0, sl
 800be90:	4659      	mov	r1, fp
 800be92:	f7f4 f9f9 	bl	8000288 <__aeabi_dsub>
 800be96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be9a:	f7f4 fbad 	bl	80005f8 <__aeabi_dmul>
 800be9e:	4606      	mov	r6, r0
 800bea0:	460f      	mov	r7, r1
 800bea2:	2c00      	cmp	r4, #0
 800bea4:	f43f af25 	beq.w	800bcf2 <__ieee754_log+0x122>
 800bea8:	a309      	add	r3, pc, #36	; (adr r3, 800bed0 <__ieee754_log+0x300>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb2:	f7f4 fba1 	bl	80005f8 <__aeabi_dmul>
 800beb6:	a308      	add	r3, pc, #32	; (adr r3, 800bed8 <__ieee754_log+0x308>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	4604      	mov	r4, r0
 800bebe:	460d      	mov	r5, r1
 800bec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec4:	e729      	b.n	800bd1a <__ieee754_log+0x14a>
 800bec6:	2000      	movs	r0, #0
 800bec8:	2100      	movs	r1, #0
 800beca:	e696      	b.n	800bbfa <__ieee754_log+0x2a>
 800becc:	f3af 8000 	nop.w
 800bed0:	fee00000 	.word	0xfee00000
 800bed4:	3fe62e42 	.word	0x3fe62e42
 800bed8:	35793c76 	.word	0x35793c76
 800bedc:	3dea39ef 	.word	0x3dea39ef
 800bee0:	55555555 	.word	0x55555555
 800bee4:	3fd55555 	.word	0x3fd55555
 800bee8:	df3e5244 	.word	0xdf3e5244
 800beec:	3fc2f112 	.word	0x3fc2f112
 800bef0:	96cb03de 	.word	0x96cb03de
 800bef4:	3fc74664 	.word	0x3fc74664
 800bef8:	94229359 	.word	0x94229359
 800befc:	3fd24924 	.word	0x3fd24924
 800bf00:	55555593 	.word	0x55555593
 800bf04:	3fe55555 	.word	0x3fe55555
 800bf08:	d078c69f 	.word	0xd078c69f
 800bf0c:	3fc39a09 	.word	0x3fc39a09
 800bf10:	1d8e78af 	.word	0x1d8e78af
 800bf14:	3fcc71c5 	.word	0x3fcc71c5
 800bf18:	9997fa04 	.word	0x9997fa04
 800bf1c:	3fd99999 	.word	0x3fd99999
 800bf20:	c3500000 	.word	0xc3500000
 800bf24:	43500000 	.word	0x43500000
 800bf28:	7fefffff 	.word	0x7fefffff
 800bf2c:	3ff00000 	.word	0x3ff00000
 800bf30:	3fe00000 	.word	0x3fe00000

0800bf34 <matherr>:
 800bf34:	2000      	movs	r0, #0
 800bf36:	4770      	bx	lr

0800bf38 <nan>:
 800bf38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf40 <nan+0x8>
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	00000000 	.word	0x00000000
 800bf44:	7ff80000 	.word	0x7ff80000

0800bf48 <_init>:
 800bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4a:	bf00      	nop
 800bf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4e:	bc08      	pop	{r3}
 800bf50:	469e      	mov	lr, r3
 800bf52:	4770      	bx	lr

0800bf54 <_fini>:
 800bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf56:	bf00      	nop
 800bf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf5a:	bc08      	pop	{r3}
 800bf5c:	469e      	mov	lr, r3
 800bf5e:	4770      	bx	lr
